; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

define <vscale x 2 x i32> @pow2_multiplier_vec(<vscale x 2 x i32> %A, <vscale x 2 x i1> %mask, i32 %evl) {
; CHECK-LABEL: @pow2_multiplier_vec(
; CHECK-NEXT:    [[TMP1:%.*]] = call <vscale x 2 x i32> @llvm.vp.shl.nxv2i32(<vscale x 2 x i32> [[A:%.*]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 3, i32 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> [[MASK:%.*]], i32 [[EVL:%.*]])
; CHECK-NEXT:    ret <vscale x 2 x i32> [[TMP1]]
;
  %pow2 = insertelement <vscale x 2 x i32> poison, i32 8, i32 0
  %pow2_splat = shufflevector <vscale x 2 x i32> %pow2, <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
  %B = call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> %A, <vscale x 2 x i32> %pow2_splat, <vscale x 2 x i1> %mask, i32 %evl)
  ret <vscale x 2 x i32> %B
}

define <vscale x 2 x i32> @pow2_multiplier_vec_inverted(<vscale x 2 x i32> %A, <vscale x 2 x i1> %mask, i32 %evl) {
; CHECK-LABEL: @pow2_multiplier_vec_inverted(
; CHECK-NEXT:    [[TMP1:%.*]] = call <vscale x 2 x i32> @llvm.vp.shl.nxv2i32(<vscale x 2 x i32> [[A:%.*]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 3, i32 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> [[MASK:%.*]], i32 [[EVL:%.*]])
; CHECK-NEXT:    ret <vscale x 2 x i32> [[TMP1]]
;
  %pow2 = insertelement <vscale x 2 x i32> poison, i32 8, i32 0
  %pow2_splat = shufflevector <vscale x 2 x i32> %pow2, <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
  %B = call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> %pow2_splat, <vscale x 2 x i32> %A, <vscale x 2 x i1> %mask, i32 %evl)
  ret <vscale x 2 x i32> %B
}

declare <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i1>, i32)
