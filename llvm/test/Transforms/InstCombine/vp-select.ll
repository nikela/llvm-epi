; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S --instcombine %s | FileCheck %s
define <vscale x 2 x i32> @merge_vp_select_i32(<vscale x 2 x i1> %cond, <vscale x 2 x i32> %true1, <vscale x 2 x i32> %true2, <vscale x 2 x i32> %false, i32 %evl) {
; CHECK-LABEL: @merge_vp_select_i32(
; CHECK-NEXT:    [[TMP1:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[COND:%.*]], <vscale x 2 x i32> [[TRUE2:%.*]], <vscale x 2 x i32> [[FALSE:%.*]], i32 [[EVL:%.*]])
; CHECK-NEXT:    ret <vscale x 2 x i32> [[TMP1]]
;
  %1 = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> %cond, <vscale x 2 x i32> %true1, <vscale x 2 x i32> %false, i32 %evl)
  %2 = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> %cond, <vscale x 2 x i32> %true2, <vscale x 2 x i32> %1, i32 %evl)
  ret <vscale x 2 x i32> %2
}

define <vscale x 2 x float> @merge_vp_select_float(<vscale x 2 x i1> %cond, <vscale x 2 x float> %true1, <vscale x 2 x float> %true2, <vscale x 2 x float> %false, i32 %evl) {
; CHECK-LABEL: @merge_vp_select_float(
; CHECK-NEXT:    [[TMP1:%.*]] = call <vscale x 2 x float> @llvm.vp.select.nxv2f32(<vscale x 2 x i1> [[COND:%.*]], <vscale x 2 x float> [[TRUE2:%.*]], <vscale x 2 x float> [[FALSE:%.*]], i32 [[EVL:%.*]])
; CHECK-NEXT:    ret <vscale x 2 x float> [[TMP1]]
;
  %1 = call <vscale x 2 x float> @llvm.vp.select.nxv2f32(<vscale x 2 x i1> %cond, <vscale x 2 x float> %true1, <vscale x 2 x float> %false, i32 %evl)
  %2 = call <vscale x 2 x float> @llvm.vp.select.nxv2f32(<vscale x 2 x i1> %cond, <vscale x 2 x float> %true2, <vscale x 2 x float> %1, i32 %evl)
  ret <vscale x 2 x float> %2
}

define <vscale x 2 x i32> @same_value_i32(<vscale x 2 x i1> %cond, <vscale x 2 x i32> %v, i32 %evl) {
; CHECK-LABEL: @same_value_i32(
; CHECK-NEXT:    ret <vscale x 2 x i32> [[V:%.*]]
;
  %1 = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> %cond, <vscale x 2 x i32> %v, <vscale x 2 x i32> %v, i32 %evl)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x float> @same_value_float(<vscale x 2 x i1> %cond, <vscale x 2 x float> %v, i32 %evl) {
; CHECK-LABEL: @same_value_float(
; CHECK-NEXT:    ret <vscale x 2 x float> [[V:%.*]]
;
  %1 = call <vscale x 2 x float> @llvm.vp.select.nxv2f32(<vscale x 2 x i1> %cond, <vscale x 2 x float> %v, <vscale x 2 x float> %v, i32 %evl)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x i32> @allones_cond_i32(<vscale x 2 x i32> %v1,<vscale x 2 x i32> %v2, i32 %evl) {
; CHECK-LABEL: @allones_cond_i32(
; CHECK-NEXT:    ret <vscale x 2 x i32> [[V1:%.*]]
;
  %one = insertelement <vscale x 2 x i1> poison, i1 1, i32 0
  %cond = shufflevector <vscale x 2 x i1> %one, <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer
  %1 = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> %cond, <vscale x 2 x i32> %v1, <vscale x 2 x i32> %v2, i32 %evl)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x float> @allones_cond_float(<vscale x 2 x float> %v1,<vscale x 2 x float> %v2, i32 %evl) {
; CHECK-LABEL: @allones_cond_float(
; CHECK-NEXT:    ret <vscale x 2 x float> [[V1:%.*]]
;
  %one = insertelement <vscale x 2 x i1> poison, i1 1, i32 0
  %cond = shufflevector <vscale x 2 x i1> %one, <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer
  %1 = call <vscale x 2 x float> @llvm.vp.select.nxv2f32(<vscale x 2 x i1> %cond, <vscale x 2 x float> %v1, <vscale x 2 x float> %v2, i32 %evl)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x i32> @allzeros_cond_i32(<vscale x 2 x i32> %v1,<vscale x 2 x i32> %v2, i32 %evl) {
; CHECK-LABEL: @allzeros_cond_i32(
; CHECK-NEXT:    ret <vscale x 2 x i32> [[V2:%.*]]
;
  %zero = insertelement <vscale x 2 x i1> poison, i1 0, i32 0
  %cond = shufflevector <vscale x 2 x i1> %zero, <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer
  %1 = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> %cond, <vscale x 2 x i32> %v1, <vscale x 2 x i32> %v2, i32 %evl)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x float> @allzeros_cond_float(<vscale x 2 x float> %v1,<vscale x 2 x float> %v2, i32 %evl) {
; CHECK-LABEL: @allzeros_cond_float(
; CHECK-NEXT:    ret <vscale x 2 x float> [[V2:%.*]]
;
  %zero = insertelement <vscale x 2 x i1> poison, i1 0, i32 0
  %cond = shufflevector <vscale x 2 x i1> %zero, <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer
  %1 = call <vscale x 2 x float> @llvm.vp.select.nxv2f32(<vscale x 2 x i1> %cond, <vscale x 2 x float> %v1, <vscale x 2 x float> %v2, i32 %evl)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x i32> @true_is_allones_i32(<vscale x 2 x i1> %cond, <vscale x 2 x i32> %v, i32 %evl) {
; CHECK-LABEL: @true_is_allones_i32(
; CHECK-NEXT:    [[TMP1:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[COND:%.*]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 1, i32 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i32> [[V:%.*]], i32 [[EVL:%.*]])
; CHECK-NEXT:    ret <vscale x 2 x i32> [[TMP1]]
;
  %one = insertelement <vscale x 2 x i32> poison, i32 1, i32 0
  %true = shufflevector <vscale x 2 x i32> %one, <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
  %1 = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> %cond, <vscale x 2 x i32> %true, <vscale x 2 x i32> %v, i32 %evl)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x float> @true_is_allones_float(<vscale x 2 x i1> %cond, <vscale x 2 x float> %v, i32 %evl) {
; CHECK-LABEL: @true_is_allones_float(
; CHECK-NEXT:    [[TMP1:%.*]] = call <vscale x 2 x float> @llvm.vp.select.nxv2f32(<vscale x 2 x i1> [[COND:%.*]], <vscale x 2 x float> shufflevector (<vscale x 2 x float> insertelement (<vscale x 2 x float> poison, float 1.000000e+00, i32 0), <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x float> [[V:%.*]], i32 [[EVL:%.*]])
; CHECK-NEXT:    ret <vscale x 2 x float> [[TMP1]]
;
  %one = insertelement <vscale x 2 x float> poison, float 1.0, i32 0
  %true = shufflevector <vscale x 2 x float> %one, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer
  %1 = call <vscale x 2 x float> @llvm.vp.select.nxv2f32(<vscale x 2 x i1> %cond, <vscale x 2 x float> %true, <vscale x 2 x float> %v, i32 %evl)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x i1> @true_is_allones_i1(<vscale x 2 x i1> %cond, <vscale x 2 x i1> %v, i32 %evl) {
; CHECK-LABEL: @true_is_allones_i1(
; CHECK-NEXT:    [[TMP1:%.*]] = call <vscale x 2 x i1> @llvm.vp.or.nxv2i1(<vscale x 2 x i1> [[COND:%.*]], <vscale x 2 x i1> [[V:%.*]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[EVL:%.*]])
; CHECK-NEXT:    ret <vscale x 2 x i1> [[TMP1]]
;
  %one = insertelement <vscale x 2 x i1> poison, i1 1, i32 0
  %true = shufflevector <vscale x 2 x i1> %one, <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer
  %1 = call <vscale x 2 x i1> @llvm.vp.select.nxv2i1(<vscale x 2 x i1> %cond, <vscale x 2 x i1> %true, <vscale x 2 x i1> %v, i32 %evl)
  ret <vscale x 2 x i1> %1
}

define <vscale x 2 x i32> @false_is_allzeros_i32(<vscale x 2 x i1> %cond, <vscale x 2 x i32> %v, i32 %evl) {
; CHECK-LABEL: @false_is_allzeros_i32(
; CHECK-NEXT:    [[TMP1:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[COND:%.*]], <vscale x 2 x i32> [[V:%.*]], <vscale x 2 x i32> zeroinitializer, i32 [[EVL:%.*]])
; CHECK-NEXT:    ret <vscale x 2 x i32> [[TMP1]]
;
  %zero = insertelement <vscale x 2 x i32> poison, i32 0, i32 0
  %false = shufflevector <vscale x 2 x i32> %zero, <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
  %1 = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> %cond, <vscale x 2 x i32> %v, <vscale x 2 x i32> %false, i32 %evl)
  ret <vscale x 2 x i32> %1
}

define <vscale x 2 x float> @false_is_allzeros_float(<vscale x 2 x i1> %cond, <vscale x 2 x float> %v, i32 %evl) {
; CHECK-LABEL: @false_is_allzeros_float(
; CHECK-NEXT:    [[TMP1:%.*]] = call <vscale x 2 x float> @llvm.vp.select.nxv2f32(<vscale x 2 x i1> [[COND:%.*]], <vscale x 2 x float> [[V:%.*]], <vscale x 2 x float> zeroinitializer, i32 [[EVL:%.*]])
; CHECK-NEXT:    ret <vscale x 2 x float> [[TMP1]]
;
  %zero = insertelement <vscale x 2 x float> poison, float 0.0, i32 0
  %false = shufflevector <vscale x 2 x float> %zero, <vscale x 2 x float> poison, <vscale x 2 x i32> zeroinitializer
  %1 = call <vscale x 2 x float> @llvm.vp.select.nxv2f32(<vscale x 2 x i1> %cond, <vscale x 2 x float> %v, <vscale x 2 x float> %false, i32 %evl)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x i1> @false_is_allzeros_i1(<vscale x 2 x i1> %cond, <vscale x 2 x i1> %v, i32 %evl) {
; CHECK-LABEL: @false_is_allzeros_i1(
; CHECK-NEXT:    [[TMP1:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[COND:%.*]], <vscale x 2 x i1> [[V:%.*]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[EVL:%.*]])
; CHECK-NEXT:    ret <vscale x 2 x i1> [[TMP1]]
;
  %zero = insertelement <vscale x 2 x i1> poison, i1 0, i32 0
  %false = shufflevector <vscale x 2 x i1> %zero, <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer
  %1 = call <vscale x 2 x i1> @llvm.vp.select.nxv2i1(<vscale x 2 x i1> %cond, <vscale x 2 x i1> %v, <vscale x 2 x i1> %false, i32 %evl)
  ret <vscale x 2 x i1> %1
}

declare <vscale x 2 x float> @llvm.vp.select.nxv2f32(<vscale x 2 x i1>, <vscale x 2 x float>, <vscale x 2 x float>, i32)
declare <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1>, <vscale x 2 x i32>, <vscale x 2 x i32>, i32)
declare <vscale x 2 x i1> @llvm.vp.select.nxv2i1(<vscale x 2 x i1>, <vscale x 2 x i1>, <vscale x 2 x i1>, i32)
