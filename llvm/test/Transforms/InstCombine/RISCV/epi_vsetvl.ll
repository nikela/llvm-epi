; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple=riscv64 -S -passes=instcombine %s | FileCheck %s
define <vscale x 1 x i64> @combine_epi_vsetvl_k1(<vscale x 1 x i64> %a, <vscale x 1 x i64> %b, i64 %evl) {
; CHECK-LABEL: @combine_epi_vsetvl_k1(
; CHECK-NEXT:    [[VSCALE:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[ASSUME_COND:%.*]] = icmp uge i64 [[VSCALE]], [[EVL:%.*]]
; CHECK-NEXT:    call void @llvm.assume(i1 [[ASSUME_COND]])
; CHECK-NEXT:    [[GVL:%.*]] = trunc i64 [[EVL]] to i32
; CHECK-NEXT:    [[RET:%.*]] = call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> [[A:%.*]], <vscale x 1 x i64> [[B:%.*]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[GVL]])
; CHECK-NEXT:    ret <vscale x 1 x i64> [[RET]]
;
  %vscale = call i64 @llvm.vscale.i64()
  %assume.cond = icmp uge i64 %vscale, %evl
  call void @llvm.assume(i1 %assume.cond)
  %one = insertelement <vscale x 1 x i1> poison, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %one, <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer
  %gvl_i64 = call i64 @llvm.epi.vsetvl(i64 %evl, i64 3, i64 0)
  %gvl = trunc i64 %gvl_i64 to i32
  %ret = call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> %a, <vscale x 1 x i64> %b, <vscale x 1 x i1> %allones, i32 %gvl)
  ret <vscale x 1 x i64> %ret
}

define <vscale x 2 x i32> @combine_epi_vsetvl_i64(<vscale x 2 x i32> %a, <vscale x 2 x i32> %b, i64 %evl) {
; CHECK-LABEL: @combine_epi_vsetvl_i64(
; CHECK-NEXT:    [[VSCALE:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP1:%.*]] = shl i64 [[VSCALE]], 1
; CHECK-NEXT:    [[ASSUME_COND:%.*]] = icmp uge i64 [[TMP1]], [[EVL:%.*]]
; CHECK-NEXT:    call void @llvm.assume(i1 [[ASSUME_COND]])
; CHECK-NEXT:    [[GVL:%.*]] = trunc i64 [[EVL]] to i32
; CHECK-NEXT:    [[RET:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[A:%.*]], <vscale x 2 x i32> [[B:%.*]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[GVL]])
; CHECK-NEXT:    ret <vscale x 2 x i32> [[RET]]
;
  %vscale = call i64 @llvm.vscale.i64()
  %1 = shl i64 %vscale, 1
  %assume.cond = icmp uge i64 %1, %evl
  call void @llvm.assume(i1 %assume.cond)
  %one = insertelement <vscale x 2 x i1> poison, i1 1, i32 0
  %allones = shufflevector <vscale x 2 x i1> %one, <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer
  %gvl_i64 = call i64 @llvm.epi.vsetvl(i64 %evl, i64 2, i64 0)
  %gvl = trunc i64 %gvl_i64 to i32
  %ret = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> %a, <vscale x 2 x i32> %b, <vscale x 2 x i1> %allones, i32 %gvl)
  ret <vscale x 2 x i32> %ret
}

define <vscale x 2 x i32> @combine_epi_vsetvl_i32(<vscale x 2 x i32> %a, <vscale x 2 x i32> %b, i32 %evl) {
; CHECK-LABEL: @combine_epi_vsetvl_i32(
; CHECK-NEXT:    [[VSCALE:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP1:%.*]] = shl i32 [[VSCALE]], 1
; CHECK-NEXT:    [[ASSUME_COND:%.*]] = icmp uge i32 [[TMP1]], [[EVL:%.*]]
; CHECK-NEXT:    call void @llvm.assume(i1 [[ASSUME_COND]])
; CHECK-NEXT:    [[RET:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[A:%.*]], <vscale x 2 x i32> [[B:%.*]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[EVL]])
; CHECK-NEXT:    ret <vscale x 2 x i32> [[RET]]
;
  %vscale = call i32 @llvm.vscale.i32()
  %1 = shl i32 %vscale, 1
  %assume.cond = icmp uge i32 %1, %evl
  call void @llvm.assume(i1 %assume.cond)
  %one = insertelement <vscale x 2 x i1> poison, i1 1, i32 0
  %allones = shufflevector <vscale x 2 x i1> %one, <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer
  %evl_i64 = zext i32 %evl to i64
  %gvl_i64 = call i64 @llvm.epi.vsetvl(i64 %evl_i64, i64 2, i64 0)
  %gvl = trunc i64 %gvl_i64 to i32
  %ret = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> %a, <vscale x 2 x i32> %b, <vscale x 2 x i1> %allones, i32 %gvl)
  ret <vscale x 2 x i32> %ret
}

declare i32 @llvm.vscale.i32()
declare i64 @llvm.vscale.i64()
declare void @llvm.assume(i1)
declare i64 @llvm.epi.vsetvl(i64, i64, i64)
declare <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i1>, i32)
declare <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32>, <vscale x 2 x i32>, <vscale x 2 x i1>, i32)
