; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -o - < %s -passes=sroa | FileCheck %s

%struct.scalable_tuple = type { <vscale x 4 x i64>, <vscale x 4 x i64> }

define <vscale x 4 x i64> @foo.scalable(<vscale x 4 x i64> %x, <vscale x 4 x i64> %y) {
; CHECK-LABEL: @foo.scalable(
; CHECK-NEXT:    [[T1:%.*]] = add <vscale x 4 x i64> [[X:%.*]], [[Y:%.*]]
; CHECK-NEXT:    [[T2:%.*]] = mul <vscale x 4 x i64> [[X]], [[Y]]
; CHECK-NEXT:    [[T3:%.*]] = add <vscale x 4 x i64> [[T1]], [[T2]]
; CHECK-NEXT:    ret <vscale x 4 x i64> [[T3]]
;
  %ptr = alloca %struct.scalable_tuple

  %ptr.first = getelementptr inbounds %struct.scalable_tuple, %struct.scalable_tuple* %ptr, i64 0, i32 0
  %t1 = add <vscale x 4 x i64> %x, %y
  store <vscale x 4 x i64> %t1, <vscale x 4 x i64>* %ptr.first

  %ptr.second = getelementptr inbounds %struct.scalable_tuple, %struct.scalable_tuple* %ptr, i64 0, i32 1
  %t2 = mul <vscale x 4 x i64> %x, %y
  store <vscale x 4 x i64> %t2, <vscale x 4 x i64>* %ptr.second

  %t4 = load <vscale x 4 x i64>, <vscale x 4 x i64>* %ptr.first
  %t5 = load <vscale x 4 x i64>, <vscale x 4 x i64>* %ptr.second

  %t3 = add <vscale x 4 x i64> %t4, %t5

  ret <vscale x 4 x i64> %t3
}
