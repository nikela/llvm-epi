; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -S --passes=loop-vectorize -prefer-predicate-over-epilogue=predicate-dont-vectorize -force-ordered-reductions -o - < %s | FileCheck %s

; ModuleID = '/home/lalbano/llvm-test-suite/SingleSource/Benchmarks/Adobe-C++/loop_unroll.cpp'
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"
target triple = "riscv64-unknown-linux-gnu"

%struct.one_result = type { double, ptr }

@results = dso_local local_unnamed_addr global ptr null, align 8
@current_test = dso_local local_unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [31 x i8] c"Could not allocate %d results\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"\0Atest %*s description   absolute   operations   ratio with\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"number %*s time       per second   test0\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [43 x i8] c"%2i %*s\22%s\22  %5.2f sec   %5.2f M     %.2f\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"\0ATotal absolute time for %s: %.2f sec\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"\0A%s Penalty: %.2f\0A\0A\00", align 1

; Function Attrs: nofree nounwind
declare noundef signext i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nounwind uwtable vscale_range(1,1024)
define dso_local void @_Z9summarizePKciiii(ptr noundef %name, i32 noundef signext %size, i32 noundef signext %iterations, i32 noundef signext %show_gmeans, i32 noundef signext %show_penalty) local_unnamed_addr #4 {
; CHECK-LABEL: define dso_local void @_Z9summarizePKciiii
; CHECK-SAME: (ptr noundef [[NAME:%.*]], i32 noundef signext [[SIZE:%.*]], i32 noundef signext [[ITERATIONS:%.*]], i32 noundef signext [[SHOW_GMEANS:%.*]], i32 noundef signext [[SHOW_PENALTY:%.*]]) local_unnamed_addr #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CONV:%.*]] = sitofp i32 [[SIZE]] to double
; CHECK-NEXT:    [[CONV1:%.*]] = sitofp i32 [[ITERATIONS]] to double
; CHECK-NEXT:    [[MUL:%.*]] = fmul double [[CONV]], [[CONV1]]
; CHECK-NEXT:    [[DIV:%.*]] = fdiv double [[MUL]], 1.000000e+06
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr @current_test, align 4, !tbaa [[TBAA0:![0-9]+]]
; CHECK-NEXT:    [[CMP91:%.*]] = icmp sgt i32 [[TMP0]], 0
; CHECK-NEXT:    br i1 [[CMP91]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr @results, align 8, !tbaa [[TBAA4:![0-9]+]]
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[TMP0]] to i64
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_LR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[LONGEST_LABEL_LEN_092:%.*]] = phi i32 [ 12, [[FOR_BODY_LR_PH]] ], [ [[SPEC_SELECT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[LABEL:%.*]] = getelementptr inbounds [[STRUCT_ONE_RESULT:%.*]], ptr [[TMP1]], i64 [[INDVARS_IV]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[LABEL]], align 8, !tbaa [[TBAA6:![0-9]+]]
; CHECK-NEXT:    [[CALL:%.*]] = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) [[TMP2]]) #[[ATTR7:[0-9]+]]
; CHECK-NEXT:    [[CONV2:%.*]] = trunc i64 [[CALL]] to i32
; CHECK-NEXT:    [[SPEC_SELECT]] = tail call i32 @llvm.smax.i32(i32 [[LONGEST_LABEL_LEN_092]], i32 [[CONV2]])
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END_LOOPEXIT:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP9:![0-9]+]]
; CHECK:       for.end.loopexit:
; CHECK-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT]], [[FOR_BODY]] ]
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end:
; CHECK-NEXT:    [[LONGEST_LABEL_LEN_0_LCSSA:%.*]] = phi i32 [ 12, [[ENTRY:%.*]] ], [ [[SPEC_SELECT_LCSSA]], [[FOR_END_LOOPEXIT]] ]
; CHECK-NEXT:    [[SUB:%.*]] = add nsw i32 [[LONGEST_LABEL_LEN_0_LCSSA]], -12
; CHECK-NEXT:    [[CALL4:%.*]] = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef signext [[SUB]], ptr noundef nonnull @.str.2)
; CHECK-NEXT:    [[CALL5:%.*]] = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3, i32 noundef signext [[LONGEST_LABEL_LEN_0_LCSSA]], ptr noundef nonnull @.str.2)
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr @current_test, align 4, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[CMP794:%.*]] = icmp sgt i32 [[TMP3]], 0
; CHECK-NEXT:    br i1 [[CMP794]], label [[FOR_BODY8_PREHEADER:%.*]], label [[FOR_END43:%.*]]
; CHECK:       for.body8.preheader:
; CHECK-NEXT:    br label [[FOR_BODY8:%.*]]
; CHECK:       for.cond35.preheader:
; CHECK-NEXT:    [[DOTLCSSA119:%.*]] = phi i32 [ [[TMP27:%.*]], [[FOR_BODY8]] ]
; CHECK-NEXT:    [[CMP3697:%.*]] = icmp sgt i32 [[DOTLCSSA119]], 0
; CHECK-NEXT:    br i1 [[CMP3697]], label [[FOR_BODY37_LR_PH:%.*]], label [[FOR_END43]]
; CHECK:       for.body37.lr.ph:
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr @results, align 8, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[WIDE_TRIP_COUNT112:%.*]] = zext i32 [[DOTLCSSA119]] to i64
; CHECK-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[WIDE_TRIP_COUNT112]], 1
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 1 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP5:%.*]] = call <vscale x 1 x i64> @llvm.experimental.stepvector.nxv1i64()
; CHECK-NEXT:    [[TMP6:%.*]] = add <vscale x 1 x i64> [[TMP5]], zeroinitializer
; CHECK-NEXT:    [[TMP7:%.*]] = mul <vscale x 1 x i64> [[TMP6]], shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 1, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer)
; CHECK-NEXT:    [[INDUCTION:%.*]] = add <vscale x 1 x i64> zeroinitializer, [[TMP7]]
; CHECK-NEXT:    [[TMP8:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP9:%.*]] = mul i64 1, [[TMP8]]
; CHECK-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[TMP9]], i64 0
; CHECK-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 1 x i64> [[DOTSPLATINSERT]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 1 x i64> [ [[INDUCTION]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi double [ 0.000000e+00, [[VECTOR_PH]] ], [ [[TMP18:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = sub i64 [[WIDE_TRIP_COUNT112]], [[INDEX]]
; CHECK-NEXT:    [[TMP11:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP10]], i64 3, i64 0)
; CHECK-NEXT:    [[TMP12:%.*]] = trunc i64 [[TMP11]] to i32
; CHECK-NEXT:    [[TMP13:%.*]] = zext i32 [[TMP12]] to i64
; CHECK-NEXT:    [[TMP14:%.*]] = mul i64 1, [[TMP13]]
; CHECK-NEXT:    [[DOTSPLATINSERT1:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[TMP14]], i64 0
; CHECK-NEXT:    [[DOTSPLAT2:%.*]] = shufflevector <vscale x 1 x i64> [[DOTSPLATINSERT1]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; CHECK-NEXT:    [[VP_ICMP_ULE:%.*]] = call <vscale x 1 x i1> @llvm.vp.icmp.nxv1i64(<vscale x 1 x i64> [[VEC_IND]], <vscale x 1 x i64> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP12]])
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT_ONE_RESULT]], ptr [[TMP4]], <vscale x 1 x i64> [[VEC_IND]]
; CHECK-NEXT:    [[TMP16:%.*]] = mul i64 [[INDEX]], 16
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr [[TMP4]], i64 [[TMP16]]
; CHECK-NEXT:    [[VP_STRIDED_LOAD:%.*]] = call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP17]], i64 16, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP12]]), !tbaa [[TBAA11:![0-9]+]]
; CHECK-NEXT:    [[VP_OP:%.*]] = call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> [[VEC_IND]], <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 1, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP12]])
; CHECK-NEXT:    [[TMP18]] = call double @llvm.vp.reduce.fadd.nxv1f64(double [[VEC_PHI]], <vscale x 1 x double> [[VP_STRIDED_LOAD]], <vscale x 1 x i1> [[VP_ICMP_ULE]], i32 [[TMP12]])
; CHECK-NEXT:    [[TMP19:%.*]] = zext i32 [[TMP12]] to i64
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP19]]
; CHECK-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 1 x i64> [[VEC_IND]], [[DOTSPLAT2]]
; CHECK-NEXT:    [[TMP20:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT112]]
; CHECK-NEXT:    br i1 [[TMP20]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP12:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    br i1 true, label [[FOR_END43_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT112]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY37_LR_PH]] ]
; CHECK-NEXT:    [[BC_MERGE_RDX:%.*]] = phi double [ 0.000000e+00, [[FOR_BODY37_LR_PH]] ], [ [[TMP18]], [[MIDDLE_BLOCK]] ]
; CHECK-NEXT:    br label [[FOR_BODY37:%.*]]
; CHECK:       for.body8:
; CHECK-NEXT:    [[INDVARS_IV108:%.*]] = phi i64 [ [[INDVARS_IV_NEXT109:%.*]], [[FOR_BODY8]] ], [ 0, [[FOR_BODY8_PREHEADER]] ]
; CHECK-NEXT:    [[TMP21:%.*]] = load ptr, ptr @results, align 8, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[ARRAYIDX11:%.*]] = getelementptr inbounds [[STRUCT_ONE_RESULT]], ptr [[TMP21]], i64 [[INDVARS_IV108]]
; CHECK-NEXT:    [[LABEL12:%.*]] = getelementptr inbounds [[STRUCT_ONE_RESULT]], ptr [[TMP21]], i64 [[INDVARS_IV108]], i32 1
; CHECK-NEXT:    [[TMP22:%.*]] = load ptr, ptr [[LABEL12]], align 8, !tbaa [[TBAA6]]
; CHECK-NEXT:    [[CALL13:%.*]] = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) [[TMP22]]) #[[ATTR7]]
; CHECK-NEXT:    [[TMP23:%.*]] = trunc i64 [[CALL13]] to i32
; CHECK-NEXT:    [[CONV15:%.*]] = sub i32 [[LONGEST_LABEL_LEN_0_LCSSA]], [[TMP23]]
; CHECK-NEXT:    [[TMP24:%.*]] = load double, ptr [[ARRAYIDX11]], align 8, !tbaa [[TBAA11]]
; CHECK-NEXT:    [[DIV24:%.*]] = fdiv double [[DIV]], [[TMP24]]
; CHECK-NEXT:    [[TMP25:%.*]] = load double, ptr [[TMP21]], align 8, !tbaa [[TBAA11]]
; CHECK-NEXT:    [[DIV30:%.*]] = fdiv double [[TMP24]], [[TMP25]]
; CHECK-NEXT:    [[TMP26:%.*]] = trunc i64 [[INDVARS_IV108]] to i32
; CHECK-NEXT:    [[CALL31:%.*]] = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4, i32 noundef signext [[TMP26]], i32 noundef signext [[CONV15]], ptr noundef nonnull @.str.5, ptr noundef [[TMP22]], double noundef [[TMP24]], double noundef [[DIV24]], double noundef [[DIV30]])
; CHECK-NEXT:    [[INDVARS_IV_NEXT109]] = add nuw nsw i64 [[INDVARS_IV108]], 1
; CHECK-NEXT:    [[TMP27]] = load i32, ptr @current_test, align 4, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP28:%.*]] = sext i32 [[TMP27]] to i64
; CHECK-NEXT:    [[CMP7:%.*]] = icmp slt i64 [[INDVARS_IV_NEXT109]], [[TMP28]]
; CHECK-NEXT:    br i1 [[CMP7]], label [[FOR_BODY8]], label [[FOR_COND35_PREHEADER:%.*]], !llvm.loop [[LOOP15:![0-9]+]]
; CHECK:       for.body37:
; CHECK-NEXT:    [[INDVARS_IV110:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT111:%.*]], [[FOR_BODY37]] ]
; CHECK-NEXT:    [[TOTAL_ABSOLUTE_TIMES_098:%.*]] = phi double [ [[BC_MERGE_RDX]], [[SCALAR_PH]] ], [ [[ADD:%.*]], [[FOR_BODY37]] ]
; CHECK-NEXT:    [[ARRAYIDX39:%.*]] = getelementptr inbounds [[STRUCT_ONE_RESULT]], ptr [[TMP4]], i64 [[INDVARS_IV110]]
; CHECK-NEXT:    [[TMP29:%.*]] = load double, ptr [[ARRAYIDX39]], align 8, !tbaa [[TBAA11]]
; CHECK-NEXT:    [[ADD]] = fadd double [[TOTAL_ABSOLUTE_TIMES_098]], [[TMP29]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT111]] = add nuw nsw i64 [[INDVARS_IV110]], 1
; CHECK-NEXT:    [[EXITCOND113_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT111]], [[WIDE_TRIP_COUNT112]]
; CHECK-NEXT:    br i1 [[EXITCOND113_NOT]], label [[FOR_END43_LOOPEXIT]], label [[FOR_BODY37]], !llvm.loop [[LOOP16:![0-9]+]]
; CHECK:       for.end43.loopexit:
; CHECK-NEXT:    [[ADD_LCSSA:%.*]] = phi double [ [[ADD]], [[FOR_BODY37]] ], [ [[TMP18]], [[MIDDLE_BLOCK]] ]
; CHECK-NEXT:    br label [[FOR_END43]]
; CHECK:       for.end43:
; CHECK-NEXT:    [[TOTAL_ABSOLUTE_TIMES_0_LCSSA:%.*]] = phi double [ 0.000000e+00, [[FOR_COND35_PREHEADER]] ], [ 0.000000e+00, [[FOR_END]] ], [ [[ADD_LCSSA]], [[FOR_END43_LOOPEXIT]] ]
; CHECK-NEXT:    [[CALL44:%.*]] = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6, ptr noundef [[NAME]], double noundef [[TOTAL_ABSOLUTE_TIMES_0_LCSSA]])
; CHECK-NEXT:    [[TMP30:%.*]] = load i32, ptr @current_test, align 4, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[CMP45:%.*]] = icmp sgt i32 [[TMP30]], 1
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[SHOW_PENALTY]], 0
; CHECK-NEXT:    [[OR_COND:%.*]] = and i1 [[TOBOOL]], [[CMP45]]
; CHECK-NEXT:    br i1 [[OR_COND]], label [[FOR_BODY49_PREHEADER:%.*]], label [[IF_END66:%.*]]
; CHECK:       for.body49.preheader:
; CHECK-NEXT:    br label [[FOR_BODY49:%.*]]
; CHECK:       for.body49:
; CHECK-NEXT:    [[INDVARS_IV114:%.*]] = phi i64 [ [[INDVARS_IV_NEXT115:%.*]], [[FOR_BODY49]] ], [ 1, [[FOR_BODY49_PREHEADER]] ]
; CHECK-NEXT:    [[GMEAN_RATIO_0102:%.*]] = phi double [ [[ADD57:%.*]], [[FOR_BODY49]] ], [ 0.000000e+00, [[FOR_BODY49_PREHEADER]] ]
; CHECK-NEXT:    [[TMP31:%.*]] = load ptr, ptr @results, align 8, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[ARRAYIDX51:%.*]] = getelementptr inbounds [[STRUCT_ONE_RESULT]], ptr [[TMP31]], i64 [[INDVARS_IV114]]
; CHECK-NEXT:    [[TMP32:%.*]] = load double, ptr [[ARRAYIDX51]], align 8, !tbaa [[TBAA11]]
; CHECK-NEXT:    [[TMP33:%.*]] = load double, ptr [[TMP31]], align 8, !tbaa [[TBAA11]]
; CHECK-NEXT:    [[DIV55:%.*]] = fdiv double [[TMP32]], [[TMP33]]
; CHECK-NEXT:    [[CALL56:%.*]] = tail call double @log(double noundef [[DIV55]]) #[[ATTR8:[0-9]+]]
; CHECK-NEXT:    [[ADD57]] = fadd double [[GMEAN_RATIO_0102]], [[CALL56]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT115]] = add nuw nsw i64 [[INDVARS_IV114]], 1
; CHECK-NEXT:    [[TMP34:%.*]] = load i32, ptr @current_test, align 4, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP35:%.*]] = sext i32 [[TMP34]] to i64
; CHECK-NEXT:    [[CMP48:%.*]] = icmp slt i64 [[INDVARS_IV_NEXT115]], [[TMP35]]
; CHECK-NEXT:    br i1 [[CMP48]], label [[FOR_BODY49]], label [[FOR_END60:%.*]], !llvm.loop [[LOOP17:![0-9]+]]
; CHECK:       for.end60:
; CHECK-NEXT:    [[ADD57_LCSSA:%.*]] = phi double [ [[ADD57]], [[FOR_BODY49]] ]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi i32 [ [[TMP34]], [[FOR_BODY49]] ]
; CHECK-NEXT:    [[SUB61:%.*]] = add nsw i32 [[DOTLCSSA]], -1
; CHECK-NEXT:    [[CONV62:%.*]] = sitofp i32 [[SUB61]] to double
; CHECK-NEXT:    [[DIV63:%.*]] = fdiv double [[ADD57_LCSSA]], [[CONV62]]
; CHECK-NEXT:    [[CALL64:%.*]] = tail call double @exp(double noundef [[DIV63]]) #[[ATTR8]]
; CHECK-NEXT:    [[CALL65:%.*]] = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.7, ptr noundef [[NAME]], double noundef [[CALL64]])
; CHECK-NEXT:    br label [[IF_END66]]
; CHECK:       if.end66:
; CHECK-NEXT:    store i32 0, ptr @current_test, align 4, !tbaa [[TBAA0]]
; CHECK-NEXT:    ret void
;
entry:
  %conv = sitofp i32 %size to double
  %conv1 = sitofp i32 %iterations to double
  %mul = fmul double %conv, %conv1
  %div = fdiv double %mul, 1.000000e+06
  %0 = load i32, ptr @current_test, align 4, !tbaa !11
  %cmp91 = icmp sgt i32 %0, 0
  br i1 %cmp91, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %1 = load ptr, ptr @results, align 8, !tbaa !7
  %wide.trip.count = zext i32 %0 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %longest_label_len.092 = phi i32 [ 12, %for.body.lr.ph ], [ %spec.select, %for.body ]
  %label = getelementptr inbounds %struct.one_result, ptr %1, i64 %indvars.iv, i32 1
  %2 = load ptr, ptr %label, align 8, !tbaa !16
  %call = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #15
  %conv2 = trunc i64 %call to i32
  %spec.select = tail call i32 @llvm.smax.i32(i32 %longest_label_len.092, i32 %conv2)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body, !llvm.loop !17

for.end.loopexit:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %longest_label_len.0.lcssa = phi i32 [ 12, %entry ], [ %spec.select.lcssa, %for.end.loopexit ]
  %sub = add nsw i32 %longest_label_len.0.lcssa, -12
  %call4 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef signext %sub, ptr noundef nonnull @.str.2)
  %call5 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3, i32 noundef signext %longest_label_len.0.lcssa, ptr noundef nonnull @.str.2)
  %3 = load i32, ptr @current_test, align 4, !tbaa !11
  %cmp794 = icmp sgt i32 %3, 0
  br i1 %cmp794, label %for.body8.preheader, label %for.end43

for.body8.preheader:                              ; preds = %for.end
  br label %for.body8

for.cond35.preheader:                             ; preds = %for.body8
  %.lcssa119 = phi i32 [ %11, %for.body8 ]
  %cmp3697 = icmp sgt i32 %.lcssa119, 0
  br i1 %cmp3697, label %for.body37.lr.ph, label %for.end43

for.body37.lr.ph:                                 ; preds = %for.cond35.preheader
  %4 = load ptr, ptr @results, align 8, !tbaa !7
  %wide.trip.count112 = zext i32 %.lcssa119 to i64
  br label %for.body37

for.body8:                                        ; preds = %for.body8.preheader, %for.body8
  %indvars.iv108 = phi i64 [ %indvars.iv.next109, %for.body8 ], [ 0, %for.body8.preheader ]
  %5 = load ptr, ptr @results, align 8, !tbaa !7
  %arrayidx11 = getelementptr inbounds %struct.one_result, ptr %5, i64 %indvars.iv108
  %label12 = getelementptr inbounds %struct.one_result, ptr %5, i64 %indvars.iv108, i32 1
  %6 = load ptr, ptr %label12, align 8, !tbaa !16
  %call13 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %6) #15
  %7 = trunc i64 %call13 to i32
  %conv15 = sub i32 %longest_label_len.0.lcssa, %7
  %8 = load double, ptr %arrayidx11, align 8, !tbaa !13
  %div24 = fdiv double %div, %8
  %9 = load double, ptr %5, align 8, !tbaa !13
  %div30 = fdiv double %8, %9
  %10 = trunc i64 %indvars.iv108 to i32
  %call31 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4, i32 noundef signext %10, i32 noundef signext %conv15, ptr noundef nonnull @.str.5, ptr noundef %6, double noundef %8, double noundef %div24, double noundef %div30)
  %indvars.iv.next109 = add nuw nsw i64 %indvars.iv108, 1
  %11 = load i32, ptr @current_test, align 4, !tbaa !11
  %12 = sext i32 %11 to i64
  %cmp7 = icmp slt i64 %indvars.iv.next109, %12
  br i1 %cmp7, label %for.body8, label %for.cond35.preheader, !llvm.loop !19

for.body37:                                       ; preds = %for.body37.lr.ph, %for.body37
  %indvars.iv110 = phi i64 [ 0, %for.body37.lr.ph ], [ %indvars.iv.next111, %for.body37 ]
  %total_absolute_times.098 = phi double [ 0.000000e+00, %for.body37.lr.ph ], [ %add, %for.body37 ]
  %arrayidx39 = getelementptr inbounds %struct.one_result, ptr %4, i64 %indvars.iv110
  %13 = load double, ptr %arrayidx39, align 8, !tbaa !13
  %add = fadd double %total_absolute_times.098, %13
  %indvars.iv.next111 = add nuw nsw i64 %indvars.iv110, 1
  %exitcond113.not = icmp eq i64 %indvars.iv.next111, %wide.trip.count112
  br i1 %exitcond113.not, label %for.end43.loopexit, label %for.body37, !llvm.loop !20

for.end43.loopexit:                               ; preds = %for.body37
  %add.lcssa = phi double [ %add, %for.body37 ]
  br label %for.end43

for.end43:                                        ; preds = %for.end43.loopexit, %for.end, %for.cond35.preheader
  %total_absolute_times.0.lcssa = phi double [ 0.000000e+00, %for.cond35.preheader ], [ 0.000000e+00, %for.end ], [ %add.lcssa, %for.end43.loopexit ]
  %call44 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6, ptr noundef %name, double noundef %total_absolute_times.0.lcssa)
  %14 = load i32, ptr @current_test, align 4, !tbaa !11
  %cmp45 = icmp sgt i32 %14, 1
  %tobool = icmp ne i32 %show_penalty, 0
  %or.cond = and i1 %tobool, %cmp45
  br i1 %or.cond, label %for.body49.preheader, label %if.end66

for.body49.preheader:                             ; preds = %for.end43
  br label %for.body49

for.body49:                                       ; preds = %for.body49.preheader, %for.body49
  %indvars.iv114 = phi i64 [ %indvars.iv.next115, %for.body49 ], [ 1, %for.body49.preheader ]
  %gmean_ratio.0102 = phi double [ %add57, %for.body49 ], [ 0.000000e+00, %for.body49.preheader ]
  %15 = load ptr, ptr @results, align 8, !tbaa !7
  %arrayidx51 = getelementptr inbounds %struct.one_result, ptr %15, i64 %indvars.iv114
  %16 = load double, ptr %arrayidx51, align 8, !tbaa !13
  %17 = load double, ptr %15, align 8, !tbaa !13
  %div55 = fdiv double %16, %17
  %call56 = tail call double @log(double noundef %div55) #16
  %add57 = fadd double %gmean_ratio.0102, %call56
  %indvars.iv.next115 = add nuw nsw i64 %indvars.iv114, 1
  %18 = load i32, ptr @current_test, align 4, !tbaa !11
  %19 = sext i32 %18 to i64
  %cmp48 = icmp slt i64 %indvars.iv.next115, %19
  br i1 %cmp48, label %for.body49, label %for.end60, !llvm.loop !21

for.end60:                                        ; preds = %for.body49
  %add57.lcssa = phi double [ %add57, %for.body49 ]
  %.lcssa = phi i32 [ %18, %for.body49 ]
  %sub61 = add nsw i32 %.lcssa, -1
  %conv62 = sitofp i32 %sub61 to double
  %div63 = fdiv double %add57.lcssa, %conv62
  %call64 = tail call double @exp(double noundef %div63) #16
  %call65 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.7, ptr noundef %name, double noundef %call64)
  br label %if.end66

if.end66:                                         ; preds = %for.end60, %for.end43
  store i32 0, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare double @log(double noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare double @exp(double noundef) local_unnamed_addr #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #12

attributes #2 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+c,+d,+f,+m,+zepi,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl32b,+zvl64b,-e,-experimental-zca,-experimental-zcb,-experimental-zcd,-experimental-zcf,-experimental-zfa,-experimental-zihintntl,-experimental-ztso,-experimental-zvfh,-h,-relax,-save-restore,-svinval,-svnapot,-svpbmt,-v,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zdinx,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zicbom,-zicbop,-zicboz,-zicsr,-zifencei,-zihintpause,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b" }
attributes #4 = { mustprogress nofree nounwind uwtable vscale_range(1,1024) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+c,+d,+f,+m,+zepi,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl32b,+zvl64b,-e,-experimental-zca,-experimental-zcb,-experimental-zcd,-experimental-zcf,-experimental-zfa,-experimental-zihintntl,-experimental-ztso,-experimental-zvfh,-h,-relax,-save-restore,-svinval,-svnapot,-svpbmt,-v,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zdinx,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zicbom,-zicbop,-zicboz,-zicsr,-zifencei,-zihintpause,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b" }
attributes #5 = { mustprogress nofree nounwind willreturn memory(argmem: read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+c,+d,+f,+m,+zepi,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl32b,+zvl64b,-e,-experimental-zca,-experimental-zcb,-experimental-zcd,-experimental-zcf,-experimental-zfa,-experimental-zihintntl,-experimental-ztso,-experimental-zvfh,-h,-relax,-save-restore,-svinval,-svnapot,-svpbmt,-v,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zdinx,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zicbom,-zicbop,-zicboz,-zicsr,-zifencei,-zihintpause,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b" }
attributes #6 = { mustprogress nofree nounwind willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+c,+d,+f,+m,+zepi,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl32b,+zvl64b,-e,-experimental-zca,-experimental-zcb,-experimental-zcd,-experimental-zcf,-experimental-zfa,-experimental-zihintntl,-experimental-ztso,-experimental-zvfh,-h,-relax,-save-restore,-svinval,-svnapot,-svpbmt,-v,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zdinx,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zicbom,-zicbop,-zicboz,-zicsr,-zifencei,-zihintpause,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b" }
attributes #12 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #15 = { nounwind willreturn memory(read) }
attributes #16 = { nounwind }

!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C++ TBAA"}
!11 = !{!12, !12, i64 0}
!12 = !{!"int", !9, i64 0}
!13 = !{!14, !15, i64 0}
!14 = !{!"_ZTS10one_result", !15, i64 0, !8, i64 8}
!15 = !{!"double", !9, i64 0}
!16 = !{!14, !8, i64 8}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.mustprogress"}
!19 = distinct !{!19, !18}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !18}
