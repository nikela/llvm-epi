; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -O2 -vector-register-width-factor=8 < %s  -o - | FileCheck %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -O2 < %s  -o - | FileCheck %s --check-prefix=CHECK1
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 -interleave-no-scalar-epilogue=true \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -O2 < %s  -o - | FileCheck %s --check-prefix=INTERLEAVE
; ModuleID = './cast-float-trunc.c'
source_filename = "./cast-float-trunc.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128-v128:128:128-v256:128:128-v512:128:128-v1024:128:128"
target triple = "riscv64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind
define dso_local void @bar(i32 signext %N, float* noalias nocapture %c, double* noalias nocapture readonly %a, double* noalias nocapture readonly %b) local_unnamed_addr {
; CHECK-LABEL: @bar(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-NEXT:    [[TMP0:%.*]] = xor i64 [[WIDE_TRIP_COUNT]], -1
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP2:%.*]] = shl i64 [[TMP1]], 3
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ugt i64 [[TMP2]], [[TMP0]]
; CHECK-NEXT:    br i1 [[TMP3]], label [[FOR_BODY:%.*]], label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[TMP4:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; CHECK-NEXT:    [[TMP5:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 3, i64 3)
; CHECK-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds double, double* [[A:%.*]], i64 [[INDEX]]
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast double* [[TMP7]] to <vscale x 8 x double>*
; CHECK-NEXT:    [[VP_OP_LOAD:%.*]] = tail call <vscale x 8 x double> @llvm.vp.load.nxv8f64.p0nxv8f64(<vscale x 8 x double>* [[TMP8]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds double, double* [[B:%.*]], i64 [[INDEX]]
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast double* [[TMP9]] to <vscale x 8 x double>*
; CHECK-NEXT:    [[VP_OP_LOAD3:%.*]] = tail call <vscale x 8 x double> @llvm.vp.load.nxv8f64.p0nxv8f64(<vscale x 8 x double>* [[TMP10]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[VP_OP:%.*]] = tail call <vscale x 8 x double> @llvm.vp.fadd.nxv8f64(<vscale x 8 x double> [[VP_OP_LOAD]], <vscale x 8 x double> [[VP_OP_LOAD3]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[VP_CAST:%.*]] = tail call <vscale x 8 x float> @llvm.vp.fptrunc.nxv8f32.nxv8f64(<vscale x 8 x double> [[VP_OP]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds float, float* [[C:%.*]], i64 [[INDEX]]
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast float* [[TMP11]] to <vscale x 8 x float>*
; CHECK-NEXT:    tail call void @llvm.vp.store.nxv8f32.p0nxv8f32(<vscale x 8 x float> [[VP_CAST]], <vscale x 8 x float>* [[TMP12]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[TMP13:%.*]] = and i64 [[TMP5]], 4294967295
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP13]]
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[FOR_END]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, double* [[A]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP15:%.*]] = load double, double* [[ARRAYIDX]], align 8
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, double* [[B]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP16:%.*]] = load double, double* [[ARRAYIDX2]], align 8
; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[TMP15]], [[TMP16]]
; CHECK-NEXT:    [[CONV:%.*]] = fptrunc double [[ADD]] to float
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds float, float* [[C]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store float [[CONV]], float* [[ARRAYIDX4]], align 4
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
; CHECK1-LABEL: @bar(
; CHECK1-NEXT:  entry:
; CHECK1-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK1-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK1:       for.body.preheader:
; CHECK1-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK1-NEXT:    [[TMP0:%.*]] = xor i64 [[WIDE_TRIP_COUNT]], -1
; CHECK1-NEXT:    [[TMP1:%.*]] = tail call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP2:%.*]] = shl i64 [[TMP1]], 1
; CHECK1-NEXT:    [[TMP3:%.*]] = icmp ugt i64 [[TMP2]], [[TMP0]]
; CHECK1-NEXT:    br i1 [[TMP3]], label [[FOR_BODY:%.*]], label [[VECTOR_BODY:%.*]]
; CHECK1:       vector.body:
; CHECK1-NEXT:    [[INDEX:%.*]] = phi i64 [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    [[TMP4:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; CHECK1-NEXT:    [[TMP5:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 3, i64 1)
; CHECK1-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; CHECK1-NEXT:    [[TMP7:%.*]] = getelementptr inbounds double, double* [[A:%.*]], i64 [[INDEX]]
; CHECK1-NEXT:    [[TMP8:%.*]] = bitcast double* [[TMP7]] to <vscale x 2 x double>*
; CHECK1-NEXT:    [[VP_OP_LOAD:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP8]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[TMP9:%.*]] = getelementptr inbounds double, double* [[B:%.*]], i64 [[INDEX]]
; CHECK1-NEXT:    [[TMP10:%.*]] = bitcast double* [[TMP9]] to <vscale x 2 x double>*
; CHECK1-NEXT:    [[VP_OP_LOAD3:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP10]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[VP_OP:%.*]] = tail call <vscale x 2 x double> @llvm.vp.fadd.nxv2f64(<vscale x 2 x double> [[VP_OP_LOAD]], <vscale x 2 x double> [[VP_OP_LOAD3]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[VP_CAST:%.*]] = tail call <vscale x 2 x float> @llvm.vp.fptrunc.nxv2f32.nxv2f64(<vscale x 2 x double> [[VP_OP]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[TMP11:%.*]] = getelementptr inbounds float, float* [[C:%.*]], i64 [[INDEX]]
; CHECK1-NEXT:    [[TMP12:%.*]] = bitcast float* [[TMP11]] to <vscale x 2 x float>*
; CHECK1-NEXT:    tail call void @llvm.vp.store.nxv2f32.p0nxv2f32(<vscale x 2 x float> [[VP_CAST]], <vscale x 2 x float>* [[TMP12]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[TMP13:%.*]] = and i64 [[TMP5]], 4294967295
; CHECK1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP13]]
; CHECK1-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[TMP14]], label [[FOR_END]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK1:       for.body:
; CHECK1-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, double* [[A]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP15:%.*]] = load double, double* [[ARRAYIDX]], align 8
; CHECK1-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, double* [[B]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP16:%.*]] = load double, double* [[ARRAYIDX2]], align 8
; CHECK1-NEXT:    [[ADD:%.*]] = fadd double [[TMP15]], [[TMP16]]
; CHECK1-NEXT:    [[CONV:%.*]] = fptrunc double [[ADD]] to float
; CHECK1-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds float, float* [[C]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store float [[CONV]], float* [[ARRAYIDX4]], align 4
; CHECK1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK1-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
; CHECK1:       for.end:
; CHECK1-NEXT:    ret void
;
; INTERLEAVE-LABEL: @bar(
; INTERLEAVE-NEXT:  entry:
; INTERLEAVE-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[N:%.*]], 0
; INTERLEAVE-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; INTERLEAVE:       for.body.preheader:
; INTERLEAVE-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; INTERLEAVE-NEXT:    [[TMP0:%.*]] = xor i64 [[WIDE_TRIP_COUNT]], -1
; INTERLEAVE-NEXT:    [[TMP1:%.*]] = tail call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP2:%.*]] = shl i64 [[TMP1]], 4
; INTERLEAVE-NEXT:    [[TMP3:%.*]] = icmp ugt i64 [[TMP2]], [[TMP0]]
; INTERLEAVE-NEXT:    br i1 [[TMP3]], label [[FOR_BODY:%.*]], label [[VECTOR_BODY:%.*]]
; INTERLEAVE:       vector.body:
; INTERLEAVE-NEXT:    [[INDEX:%.*]] = phi i64 [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; INTERLEAVE-NEXT:    [[TMP4:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; INTERLEAVE-NEXT:    [[TMP5:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 3, i64 1)
; INTERLEAVE-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; INTERLEAVE-NEXT:    [[TMP7:%.*]] = sub i64 [[TMP4]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP8:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP7]], i64 3, i64 1)
; INTERLEAVE-NEXT:    [[TMP9:%.*]] = trunc i64 [[TMP8]] to i32
; INTERLEAVE-NEXT:    [[TMP10:%.*]] = sub i64 [[TMP7]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP11:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP10]], i64 3, i64 1)
; INTERLEAVE-NEXT:    [[TMP12:%.*]] = trunc i64 [[TMP11]] to i32
; INTERLEAVE-NEXT:    [[TMP13:%.*]] = sub i64 [[TMP10]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP14:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP13]], i64 3, i64 1)
; INTERLEAVE-NEXT:    [[TMP15:%.*]] = trunc i64 [[TMP14]] to i32
; INTERLEAVE-NEXT:    [[TMP16:%.*]] = sub i64 [[TMP13]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP17:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP16]], i64 3, i64 1)
; INTERLEAVE-NEXT:    [[TMP18:%.*]] = trunc i64 [[TMP17]] to i32
; INTERLEAVE-NEXT:    [[TMP19:%.*]] = sub i64 [[TMP16]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP20:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP19]], i64 3, i64 1)
; INTERLEAVE-NEXT:    [[TMP21:%.*]] = trunc i64 [[TMP20]] to i32
; INTERLEAVE-NEXT:    [[TMP22:%.*]] = sub i64 [[TMP19]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP23:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP22]], i64 3, i64 1)
; INTERLEAVE-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP23]] to i32
; INTERLEAVE-NEXT:    [[TMP25:%.*]] = sub i64 [[TMP22]], [[TMP23]]
; INTERLEAVE-NEXT:    [[TMP26:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP25]], i64 3, i64 1)
; INTERLEAVE-NEXT:    [[TMP27:%.*]] = trunc i64 [[TMP26]] to i32
; INTERLEAVE-NEXT:    [[TMP28:%.*]] = getelementptr inbounds double, double* [[A:%.*]], i64 [[INDEX]]
; INTERLEAVE-NEXT:    [[TMP29:%.*]] = bitcast double* [[TMP28]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP29]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[SEXT:%.*]] = shl i64 [[TMP5]], 32
; INTERLEAVE-NEXT:    [[TMP30:%.*]] = ashr exact i64 [[SEXT]], 32
; INTERLEAVE-NEXT:    [[TMP31:%.*]] = getelementptr inbounds double, double* [[TMP28]], i64 [[TMP30]]
; INTERLEAVE-NEXT:    [[TMP32:%.*]] = bitcast double* [[TMP31]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD22:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP32]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP33:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[SEXT51:%.*]] = shl i64 [[TMP33]], 32
; INTERLEAVE-NEXT:    [[TMP34:%.*]] = ashr exact i64 [[SEXT51]], 32
; INTERLEAVE-NEXT:    [[TMP35:%.*]] = getelementptr inbounds double, double* [[TMP28]], i64 [[TMP34]]
; INTERLEAVE-NEXT:    [[TMP36:%.*]] = bitcast double* [[TMP35]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD23:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP36]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP37:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP38:%.*]] = add i64 [[TMP37]], [[TMP11]]
; INTERLEAVE-NEXT:    [[SEXT52:%.*]] = shl i64 [[TMP38]], 32
; INTERLEAVE-NEXT:    [[TMP39:%.*]] = ashr exact i64 [[SEXT52]], 32
; INTERLEAVE-NEXT:    [[TMP40:%.*]] = getelementptr inbounds double, double* [[TMP28]], i64 [[TMP39]]
; INTERLEAVE-NEXT:    [[TMP41:%.*]] = bitcast double* [[TMP40]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD24:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP41]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP42:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP43:%.*]] = add i64 [[TMP42]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP44:%.*]] = add i64 [[TMP43]], [[TMP14]]
; INTERLEAVE-NEXT:    [[SEXT53:%.*]] = shl i64 [[TMP44]], 32
; INTERLEAVE-NEXT:    [[TMP45:%.*]] = ashr exact i64 [[SEXT53]], 32
; INTERLEAVE-NEXT:    [[TMP46:%.*]] = getelementptr inbounds double, double* [[TMP28]], i64 [[TMP45]]
; INTERLEAVE-NEXT:    [[TMP47:%.*]] = bitcast double* [[TMP46]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD25:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP47]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[TMP48:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP49:%.*]] = add i64 [[TMP48]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP50:%.*]] = add i64 [[TMP49]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP51:%.*]] = add i64 [[TMP50]], [[TMP17]]
; INTERLEAVE-NEXT:    [[SEXT54:%.*]] = shl i64 [[TMP51]], 32
; INTERLEAVE-NEXT:    [[TMP52:%.*]] = ashr exact i64 [[SEXT54]], 32
; INTERLEAVE-NEXT:    [[TMP53:%.*]] = getelementptr inbounds double, double* [[TMP28]], i64 [[TMP52]]
; INTERLEAVE-NEXT:    [[TMP54:%.*]] = bitcast double* [[TMP53]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD26:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP54]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[TMP55:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP56:%.*]] = add i64 [[TMP55]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP57:%.*]] = add i64 [[TMP56]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP58:%.*]] = add i64 [[TMP57]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP59:%.*]] = add i64 [[TMP58]], [[TMP20]]
; INTERLEAVE-NEXT:    [[SEXT55:%.*]] = shl i64 [[TMP59]], 32
; INTERLEAVE-NEXT:    [[TMP60:%.*]] = ashr exact i64 [[SEXT55]], 32
; INTERLEAVE-NEXT:    [[TMP61:%.*]] = getelementptr inbounds double, double* [[TMP28]], i64 [[TMP60]]
; INTERLEAVE-NEXT:    [[TMP62:%.*]] = bitcast double* [[TMP61]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD27:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP62]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[TMP63:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP64:%.*]] = add i64 [[TMP63]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP65:%.*]] = add i64 [[TMP64]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP66:%.*]] = add i64 [[TMP65]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP67:%.*]] = add i64 [[TMP66]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP68:%.*]] = add i64 [[TMP67]], [[TMP23]]
; INTERLEAVE-NEXT:    [[SEXT56:%.*]] = shl i64 [[TMP68]], 32
; INTERLEAVE-NEXT:    [[TMP69:%.*]] = ashr exact i64 [[SEXT56]], 32
; INTERLEAVE-NEXT:    [[TMP70:%.*]] = getelementptr inbounds double, double* [[TMP28]], i64 [[TMP69]]
; INTERLEAVE-NEXT:    [[TMP71:%.*]] = bitcast double* [[TMP70]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD28:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP71]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[TMP72:%.*]] = getelementptr inbounds double, double* [[B:%.*]], i64 [[INDEX]]
; INTERLEAVE-NEXT:    [[TMP73:%.*]] = bitcast double* [[TMP72]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD29:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP73]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[SEXT57:%.*]] = shl i64 [[TMP5]], 32
; INTERLEAVE-NEXT:    [[TMP74:%.*]] = ashr exact i64 [[SEXT57]], 32
; INTERLEAVE-NEXT:    [[TMP75:%.*]] = getelementptr inbounds double, double* [[TMP72]], i64 [[TMP74]]
; INTERLEAVE-NEXT:    [[TMP76:%.*]] = bitcast double* [[TMP75]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD30:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP76]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP77:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[SEXT58:%.*]] = shl i64 [[TMP77]], 32
; INTERLEAVE-NEXT:    [[TMP78:%.*]] = ashr exact i64 [[SEXT58]], 32
; INTERLEAVE-NEXT:    [[TMP79:%.*]] = getelementptr inbounds double, double* [[TMP72]], i64 [[TMP78]]
; INTERLEAVE-NEXT:    [[TMP80:%.*]] = bitcast double* [[TMP79]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD31:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP80]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP81:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP82:%.*]] = add i64 [[TMP81]], [[TMP11]]
; INTERLEAVE-NEXT:    [[SEXT59:%.*]] = shl i64 [[TMP82]], 32
; INTERLEAVE-NEXT:    [[TMP83:%.*]] = ashr exact i64 [[SEXT59]], 32
; INTERLEAVE-NEXT:    [[TMP84:%.*]] = getelementptr inbounds double, double* [[TMP72]], i64 [[TMP83]]
; INTERLEAVE-NEXT:    [[TMP85:%.*]] = bitcast double* [[TMP84]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD32:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP85]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP86:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP87:%.*]] = add i64 [[TMP86]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP88:%.*]] = add i64 [[TMP87]], [[TMP14]]
; INTERLEAVE-NEXT:    [[SEXT60:%.*]] = shl i64 [[TMP88]], 32
; INTERLEAVE-NEXT:    [[TMP89:%.*]] = ashr exact i64 [[SEXT60]], 32
; INTERLEAVE-NEXT:    [[TMP90:%.*]] = getelementptr inbounds double, double* [[TMP72]], i64 [[TMP89]]
; INTERLEAVE-NEXT:    [[TMP91:%.*]] = bitcast double* [[TMP90]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD33:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP91]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[TMP92:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP93:%.*]] = add i64 [[TMP92]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP94:%.*]] = add i64 [[TMP93]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP95:%.*]] = add i64 [[TMP94]], [[TMP17]]
; INTERLEAVE-NEXT:    [[SEXT61:%.*]] = shl i64 [[TMP95]], 32
; INTERLEAVE-NEXT:    [[TMP96:%.*]] = ashr exact i64 [[SEXT61]], 32
; INTERLEAVE-NEXT:    [[TMP97:%.*]] = getelementptr inbounds double, double* [[TMP72]], i64 [[TMP96]]
; INTERLEAVE-NEXT:    [[TMP98:%.*]] = bitcast double* [[TMP97]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD34:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP98]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[TMP99:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP100:%.*]] = add i64 [[TMP99]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP101:%.*]] = add i64 [[TMP100]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP102:%.*]] = add i64 [[TMP101]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP103:%.*]] = add i64 [[TMP102]], [[TMP20]]
; INTERLEAVE-NEXT:    [[SEXT62:%.*]] = shl i64 [[TMP103]], 32
; INTERLEAVE-NEXT:    [[TMP104:%.*]] = ashr exact i64 [[SEXT62]], 32
; INTERLEAVE-NEXT:    [[TMP105:%.*]] = getelementptr inbounds double, double* [[TMP72]], i64 [[TMP104]]
; INTERLEAVE-NEXT:    [[TMP106:%.*]] = bitcast double* [[TMP105]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD35:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP106]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[TMP107:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP108:%.*]] = add i64 [[TMP107]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP109:%.*]] = add i64 [[TMP108]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP110:%.*]] = add i64 [[TMP109]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP111:%.*]] = add i64 [[TMP110]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP112:%.*]] = add i64 [[TMP111]], [[TMP23]]
; INTERLEAVE-NEXT:    [[SEXT63:%.*]] = shl i64 [[TMP112]], 32
; INTERLEAVE-NEXT:    [[TMP113:%.*]] = ashr exact i64 [[SEXT63]], 32
; INTERLEAVE-NEXT:    [[TMP114:%.*]] = getelementptr inbounds double, double* [[TMP72]], i64 [[TMP113]]
; INTERLEAVE-NEXT:    [[TMP115:%.*]] = bitcast double* [[TMP114]] to <vscale x 2 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD36:%.*]] = tail call <vscale x 2 x double> @llvm.vp.load.nxv2f64.p0nxv2f64(<vscale x 2 x double>* [[TMP115]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[VP_OP:%.*]] = tail call <vscale x 2 x double> @llvm.vp.fadd.nxv2f64(<vscale x 2 x double> [[VP_OP_LOAD]], <vscale x 2 x double> [[VP_OP_LOAD29]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[VP_OP37:%.*]] = tail call <vscale x 2 x double> @llvm.vp.fadd.nxv2f64(<vscale x 2 x double> [[VP_OP_LOAD22]], <vscale x 2 x double> [[VP_OP_LOAD30]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[VP_OP38:%.*]] = tail call <vscale x 2 x double> @llvm.vp.fadd.nxv2f64(<vscale x 2 x double> [[VP_OP_LOAD23]], <vscale x 2 x double> [[VP_OP_LOAD31]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[VP_OP39:%.*]] = tail call <vscale x 2 x double> @llvm.vp.fadd.nxv2f64(<vscale x 2 x double> [[VP_OP_LOAD24]], <vscale x 2 x double> [[VP_OP_LOAD32]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[VP_OP40:%.*]] = tail call <vscale x 2 x double> @llvm.vp.fadd.nxv2f64(<vscale x 2 x double> [[VP_OP_LOAD25]], <vscale x 2 x double> [[VP_OP_LOAD33]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[VP_OP41:%.*]] = tail call <vscale x 2 x double> @llvm.vp.fadd.nxv2f64(<vscale x 2 x double> [[VP_OP_LOAD26]], <vscale x 2 x double> [[VP_OP_LOAD34]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[VP_OP42:%.*]] = tail call <vscale x 2 x double> @llvm.vp.fadd.nxv2f64(<vscale x 2 x double> [[VP_OP_LOAD27]], <vscale x 2 x double> [[VP_OP_LOAD35]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[VP_OP43:%.*]] = tail call <vscale x 2 x double> @llvm.vp.fadd.nxv2f64(<vscale x 2 x double> [[VP_OP_LOAD28]], <vscale x 2 x double> [[VP_OP_LOAD36]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[VP_CAST:%.*]] = tail call <vscale x 2 x float> @llvm.vp.fptrunc.nxv2f32.nxv2f64(<vscale x 2 x double> [[VP_OP]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[VP_CAST44:%.*]] = tail call <vscale x 2 x float> @llvm.vp.fptrunc.nxv2f32.nxv2f64(<vscale x 2 x double> [[VP_OP37]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[VP_CAST45:%.*]] = tail call <vscale x 2 x float> @llvm.vp.fptrunc.nxv2f32.nxv2f64(<vscale x 2 x double> [[VP_OP38]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[VP_CAST46:%.*]] = tail call <vscale x 2 x float> @llvm.vp.fptrunc.nxv2f32.nxv2f64(<vscale x 2 x double> [[VP_OP39]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[VP_CAST47:%.*]] = tail call <vscale x 2 x float> @llvm.vp.fptrunc.nxv2f32.nxv2f64(<vscale x 2 x double> [[VP_OP40]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[VP_CAST48:%.*]] = tail call <vscale x 2 x float> @llvm.vp.fptrunc.nxv2f32.nxv2f64(<vscale x 2 x double> [[VP_OP41]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[VP_CAST49:%.*]] = tail call <vscale x 2 x float> @llvm.vp.fptrunc.nxv2f32.nxv2f64(<vscale x 2 x double> [[VP_OP42]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[VP_CAST50:%.*]] = tail call <vscale x 2 x float> @llvm.vp.fptrunc.nxv2f32.nxv2f64(<vscale x 2 x double> [[VP_OP43]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[TMP116:%.*]] = getelementptr inbounds float, float* [[C:%.*]], i64 [[INDEX]]
; INTERLEAVE-NEXT:    [[TMP117:%.*]] = bitcast float* [[TMP116]] to <vscale x 2 x float>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2f32.p0nxv2f32(<vscale x 2 x float> [[VP_CAST]], <vscale x 2 x float>* [[TMP117]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[SEXT64:%.*]] = shl i64 [[TMP5]], 32
; INTERLEAVE-NEXT:    [[TMP118:%.*]] = ashr exact i64 [[SEXT64]], 32
; INTERLEAVE-NEXT:    [[TMP119:%.*]] = getelementptr inbounds float, float* [[TMP116]], i64 [[TMP118]]
; INTERLEAVE-NEXT:    [[TMP120:%.*]] = bitcast float* [[TMP119]] to <vscale x 2 x float>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2f32.p0nxv2f32(<vscale x 2 x float> [[VP_CAST44]], <vscale x 2 x float>* [[TMP120]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP121:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[SEXT65:%.*]] = shl i64 [[TMP121]], 32
; INTERLEAVE-NEXT:    [[TMP122:%.*]] = ashr exact i64 [[SEXT65]], 32
; INTERLEAVE-NEXT:    [[TMP123:%.*]] = getelementptr inbounds float, float* [[TMP116]], i64 [[TMP122]]
; INTERLEAVE-NEXT:    [[TMP124:%.*]] = bitcast float* [[TMP123]] to <vscale x 2 x float>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2f32.p0nxv2f32(<vscale x 2 x float> [[VP_CAST45]], <vscale x 2 x float>* [[TMP124]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP125:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP126:%.*]] = add i64 [[TMP125]], [[TMP11]]
; INTERLEAVE-NEXT:    [[SEXT66:%.*]] = shl i64 [[TMP126]], 32
; INTERLEAVE-NEXT:    [[TMP127:%.*]] = ashr exact i64 [[SEXT66]], 32
; INTERLEAVE-NEXT:    [[TMP128:%.*]] = getelementptr inbounds float, float* [[TMP116]], i64 [[TMP127]]
; INTERLEAVE-NEXT:    [[TMP129:%.*]] = bitcast float* [[TMP128]] to <vscale x 2 x float>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2f32.p0nxv2f32(<vscale x 2 x float> [[VP_CAST46]], <vscale x 2 x float>* [[TMP129]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP130:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP131:%.*]] = add i64 [[TMP130]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP132:%.*]] = add i64 [[TMP131]], [[TMP14]]
; INTERLEAVE-NEXT:    [[SEXT67:%.*]] = shl i64 [[TMP132]], 32
; INTERLEAVE-NEXT:    [[TMP133:%.*]] = ashr exact i64 [[SEXT67]], 32
; INTERLEAVE-NEXT:    [[TMP134:%.*]] = getelementptr inbounds float, float* [[TMP116]], i64 [[TMP133]]
; INTERLEAVE-NEXT:    [[TMP135:%.*]] = bitcast float* [[TMP134]] to <vscale x 2 x float>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2f32.p0nxv2f32(<vscale x 2 x float> [[VP_CAST47]], <vscale x 2 x float>* [[TMP135]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[TMP136:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP137:%.*]] = add i64 [[TMP136]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP138:%.*]] = add i64 [[TMP137]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP139:%.*]] = add i64 [[TMP138]], [[TMP17]]
; INTERLEAVE-NEXT:    [[SEXT68:%.*]] = shl i64 [[TMP139]], 32
; INTERLEAVE-NEXT:    [[TMP140:%.*]] = ashr exact i64 [[SEXT68]], 32
; INTERLEAVE-NEXT:    [[TMP141:%.*]] = getelementptr inbounds float, float* [[TMP116]], i64 [[TMP140]]
; INTERLEAVE-NEXT:    [[TMP142:%.*]] = bitcast float* [[TMP141]] to <vscale x 2 x float>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2f32.p0nxv2f32(<vscale x 2 x float> [[VP_CAST48]], <vscale x 2 x float>* [[TMP142]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[TMP143:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP144:%.*]] = add i64 [[TMP143]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP145:%.*]] = add i64 [[TMP144]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP146:%.*]] = add i64 [[TMP145]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP147:%.*]] = add i64 [[TMP146]], [[TMP20]]
; INTERLEAVE-NEXT:    [[SEXT69:%.*]] = shl i64 [[TMP147]], 32
; INTERLEAVE-NEXT:    [[TMP148:%.*]] = ashr exact i64 [[SEXT69]], 32
; INTERLEAVE-NEXT:    [[TMP149:%.*]] = getelementptr inbounds float, float* [[TMP116]], i64 [[TMP148]]
; INTERLEAVE-NEXT:    [[TMP150:%.*]] = bitcast float* [[TMP149]] to <vscale x 2 x float>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2f32.p0nxv2f32(<vscale x 2 x float> [[VP_CAST49]], <vscale x 2 x float>* [[TMP150]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[TMP151:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP152:%.*]] = add i64 [[TMP151]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP153:%.*]] = add i64 [[TMP152]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP154:%.*]] = add i64 [[TMP153]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP155:%.*]] = add i64 [[TMP154]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP156:%.*]] = add i64 [[TMP155]], [[TMP23]]
; INTERLEAVE-NEXT:    [[SEXT70:%.*]] = shl i64 [[TMP156]], 32
; INTERLEAVE-NEXT:    [[TMP157:%.*]] = ashr exact i64 [[SEXT70]], 32
; INTERLEAVE-NEXT:    [[TMP158:%.*]] = getelementptr inbounds float, float* [[TMP116]], i64 [[TMP157]]
; INTERLEAVE-NEXT:    [[TMP159:%.*]] = bitcast float* [[TMP158]] to <vscale x 2 x float>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2f32.p0nxv2f32(<vscale x 2 x float> [[VP_CAST50]], <vscale x 2 x float>* [[TMP159]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[TMP160:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP161:%.*]] = add i64 [[TMP160]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP162:%.*]] = add i64 [[TMP161]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP163:%.*]] = add i64 [[TMP162]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP164:%.*]] = add i64 [[TMP163]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP165:%.*]] = add i64 [[TMP164]], [[TMP23]]
; INTERLEAVE-NEXT:    [[TMP166:%.*]] = add i64 [[TMP165]], [[TMP26]]
; INTERLEAVE-NEXT:    [[TMP167:%.*]] = and i64 [[TMP166]], 4294967295
; INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP167]]
; INTERLEAVE-NEXT:    [[TMP168:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[TMP168]], label [[FOR_END]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; INTERLEAVE:       for.body:
; INTERLEAVE-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; INTERLEAVE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, double* [[A]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP169:%.*]] = load double, double* [[ARRAYIDX]], align 8
; INTERLEAVE-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, double* [[B]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP170:%.*]] = load double, double* [[ARRAYIDX2]], align 8
; INTERLEAVE-NEXT:    [[ADD:%.*]] = fadd double [[TMP169]], [[TMP170]]
; INTERLEAVE-NEXT:    [[CONV:%.*]] = fptrunc double [[ADD]] to float
; INTERLEAVE-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds float, float* [[C]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    store float [[CONV]], float* [[ARRAYIDX4]], align 4
; INTERLEAVE-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; INTERLEAVE-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
; INTERLEAVE:       for.end:
; INTERLEAVE-NEXT:    ret void
;
entry:
  %cmp10 = icmp sgt i32 %N, 0
  br i1 %cmp10, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %a, i64 %indvars.iv
  %0 = load double, double* %arrayidx
  %arrayidx2 = getelementptr inbounds double, double* %b, i64 %indvars.iv
  %1 = load double, double* %arrayidx2
  %add = fadd double %0, %1
  %conv = fptrunc double %add to float
  %arrayidx4 = getelementptr inbounds float, float* %c, i64 %indvars.iv
  store float %conv, float* %arrayidx4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
