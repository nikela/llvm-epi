; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+experimental-v -S -dce \
; RUN:    -loop-vectorize -vector-register-width-factor=8 -instcombine | FileCheck %s
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+experimental-v -S -dce \
; RUN:    -loop-vectorize -instcombine | FileCheck %s --check-prefix=CHECK1

target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128"
target triple = "riscv64-unknown-linux-gnu"

; void add_ref(int N, char *restrict a, char *restrict b, char *restrict c) {
;   for (int i=N; i>=0; i--)
;     c[i] = a[i] + b[i];
; }

define dso_local void @add_ref(i32 signext %N, i8* noalias nocapture readonly %a, i8* noalias nocapture readonly %b, i8* noalias nocapture %c) {
; CHECK-LABEL: @add_ref(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP13:%.*]] = icmp sgt i32 [[N:%.*]], -1
; CHECK-NEXT:    br i1 [[CMP13]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[TMP0:%.*]] = zext i32 [[N]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = add nuw nsw i64 [[TMP0]], 1
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[STEP_VSCALE:%.*]] = shl i64 [[TMP2]], 6
; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP1]], [[STEP_VSCALE]]
; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[STEP_VSCALE1:%.*]] = shl i64 [[TMP3]], 6
; CHECK-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP1]], [[STEP_VSCALE1]]
; CHECK-NEXT:    [[N_VEC:%.*]] = sub nsw i64 [[TMP1]], [[N_MOD_VF]]
; CHECK-NEXT:    [[IND_END:%.*]] = sub nsw i64 [[TMP0]], [[N_VEC]]
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[OFFSET_IDX:%.*]] = sub i64 [[TMP0]], [[INDEX]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds i8, i8* [[A:%.*]], i64 [[OFFSET_IDX]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[DOTNEG:%.*]] = mul i32 [[TMP5]], -64
; CHECK-NEXT:    [[TMP6:%.*]] = or i32 [[DOTNEG]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = sext i32 [[TMP6]] to i64
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, i8* [[TMP4]], i64 [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast i8* [[TMP8]] to <vscale x 64 x i8>*
; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 64 x i8>, <vscale x 64 x i8>* [[TMP9]], align 1
; CHECK-NEXT:    [[REVERSE:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[WIDE_LOAD]])
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i8, i8* [[B:%.*]], i64 [[OFFSET_IDX]]
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[DOTNEG5:%.*]] = mul i32 [[TMP11]], -64
; CHECK-NEXT:    [[TMP12:%.*]] = or i32 [[DOTNEG5]], 1
; CHECK-NEXT:    [[TMP13:%.*]] = sext i32 [[TMP12]] to i64
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i8, i8* [[TMP10]], i64 [[TMP13]]
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast i8* [[TMP14]] to <vscale x 64 x i8>*
; CHECK-NEXT:    [[WIDE_LOAD2:%.*]] = load <vscale x 64 x i8>, <vscale x 64 x i8>* [[TMP15]], align 1
; CHECK-NEXT:    [[REVERSE3:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[WIDE_LOAD2]])
; CHECK-NEXT:    [[TMP16:%.*]] = add <vscale x 64 x i8> [[REVERSE3]], [[REVERSE]]
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i8, i8* [[C:%.*]], i64 [[OFFSET_IDX]]
; CHECK-NEXT:    [[REVERSE4:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[TMP16]])
; CHECK-NEXT:    [[TMP18:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[DOTNEG6:%.*]] = mul i32 [[TMP18]], -64
; CHECK-NEXT:    [[TMP19:%.*]] = or i32 [[DOTNEG6]], 1
; CHECK-NEXT:    [[TMP20:%.*]] = sext i32 [[TMP19]] to i64
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr inbounds i8, i8* [[TMP17]], i64 [[TMP20]]
; CHECK-NEXT:    [[TMP22:%.*]] = bitcast i8* [[TMP21]] to <vscale x 64 x i8>*
; CHECK-NEXT:    store <vscale x 64 x i8> [[REVERSE4]], <vscale x 64 x i8>* [[TMP22]], align 1
; CHECK-NEXT:    [[TMP23:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[INDEX_VSCALE:%.*]] = shl i64 [[TMP23]], 6
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[INDEX_VSCALE]]
; CHECK-NEXT:    [[TMP24:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP24]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], [[LOOP0:!llvm.loop !.*]]
; CHECK:       middle.block:
; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ [[TMP0]], [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[A]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP25:%.*]] = load i8, i8* [[ARRAYIDX]], align 1
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, i8* [[B]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP26:%.*]] = load i8, i8* [[ARRAYIDX2]], align 1
; CHECK-NEXT:    [[ADD:%.*]] = add i8 [[TMP26]], [[TMP25]]
; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds i8, i8* [[C]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store i8 [[ADD]], i8* [[ARRAYIDX6]], align 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i64 [[INDVARS_IV]], 0
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nsw i64 [[INDVARS_IV]], -1
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY]], label [[FOR_COND_CLEANUP_LOOPEXIT]], [[LOOP2:!llvm.loop !.*]]
;
; CHECK1-LABEL: @add_ref(
; CHECK1-NEXT:  entry:
; CHECK1-NEXT:    [[CMP13:%.*]] = icmp sgt i32 [[N:%.*]], -1
; CHECK1-NEXT:    br i1 [[CMP13]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK1:       for.body.preheader:
; CHECK1-NEXT:    [[TMP0:%.*]] = zext i32 [[N]] to i64
; CHECK1-NEXT:    [[TMP1:%.*]] = add nuw nsw i64 [[TMP0]], 1
; CHECK1-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[STEP_VSCALE:%.*]] = shl i64 [[TMP2]], 3
; CHECK1-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP1]], [[STEP_VSCALE]]
; CHECK1-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK1:       vector.ph:
; CHECK1-NEXT:    [[TMP3:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[STEP_VSCALE1:%.*]] = shl i64 [[TMP3]], 3
; CHECK1-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP1]], [[STEP_VSCALE1]]
; CHECK1-NEXT:    [[N_VEC:%.*]] = sub nsw i64 [[TMP1]], [[N_MOD_VF]]
; CHECK1-NEXT:    [[IND_END:%.*]] = sub nsw i64 [[TMP0]], [[N_VEC]]
; CHECK1-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK1:       vector.body:
; CHECK1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK1-NEXT:    [[OFFSET_IDX:%.*]] = sub i64 [[TMP0]], [[INDEX]]
; CHECK1-NEXT:    [[TMP4:%.*]] = getelementptr inbounds i8, i8* [[A:%.*]], i64 [[OFFSET_IDX]]
; CHECK1-NEXT:    [[TMP5:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[DOTNEG:%.*]] = mul i32 [[TMP5]], -8
; CHECK1-NEXT:    [[TMP6:%.*]] = or i32 [[DOTNEG]], 1
; CHECK1-NEXT:    [[TMP7:%.*]] = sext i32 [[TMP6]] to i64
; CHECK1-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, i8* [[TMP4]], i64 [[TMP7]]
; CHECK1-NEXT:    [[TMP9:%.*]] = bitcast i8* [[TMP8]] to <vscale x 8 x i8>*
; CHECK1-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 8 x i8>, <vscale x 8 x i8>* [[TMP9]], align 1
; CHECK1-NEXT:    [[REVERSE:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD]])
; CHECK1-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i8, i8* [[B:%.*]], i64 [[OFFSET_IDX]]
; CHECK1-NEXT:    [[TMP11:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[DOTNEG5:%.*]] = mul i32 [[TMP11]], -8
; CHECK1-NEXT:    [[TMP12:%.*]] = or i32 [[DOTNEG5]], 1
; CHECK1-NEXT:    [[TMP13:%.*]] = sext i32 [[TMP12]] to i64
; CHECK1-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i8, i8* [[TMP10]], i64 [[TMP13]]
; CHECK1-NEXT:    [[TMP15:%.*]] = bitcast i8* [[TMP14]] to <vscale x 8 x i8>*
; CHECK1-NEXT:    [[WIDE_LOAD2:%.*]] = load <vscale x 8 x i8>, <vscale x 8 x i8>* [[TMP15]], align 1
; CHECK1-NEXT:    [[REVERSE3:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD2]])
; CHECK1-NEXT:    [[TMP16:%.*]] = add <vscale x 8 x i8> [[REVERSE3]], [[REVERSE]]
; CHECK1-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i8, i8* [[C:%.*]], i64 [[OFFSET_IDX]]
; CHECK1-NEXT:    [[REVERSE4:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[TMP16]])
; CHECK1-NEXT:    [[TMP18:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[DOTNEG6:%.*]] = mul i32 [[TMP18]], -8
; CHECK1-NEXT:    [[TMP19:%.*]] = or i32 [[DOTNEG6]], 1
; CHECK1-NEXT:    [[TMP20:%.*]] = sext i32 [[TMP19]] to i64
; CHECK1-NEXT:    [[TMP21:%.*]] = getelementptr inbounds i8, i8* [[TMP17]], i64 [[TMP20]]
; CHECK1-NEXT:    [[TMP22:%.*]] = bitcast i8* [[TMP21]] to <vscale x 8 x i8>*
; CHECK1-NEXT:    store <vscale x 8 x i8> [[REVERSE4]], <vscale x 8 x i8>* [[TMP22]], align 1
; CHECK1-NEXT:    [[TMP23:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[INDEX_VSCALE:%.*]] = shl i64 [[TMP23]], 3
; CHECK1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[INDEX_VSCALE]]
; CHECK1-NEXT:    [[TMP24:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK1-NEXT:    br i1 [[TMP24]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], [[LOOP0:!llvm.loop !.*]]
; CHECK1:       middle.block:
; CHECK1-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; CHECK1-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK1:       scalar.ph:
; CHECK1-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ [[TMP0]], [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK1:       for.cond.cleanup.loopexit:
; CHECK1-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK1:       for.cond.cleanup:
; CHECK1-NEXT:    ret void
; CHECK1:       for.body:
; CHECK1-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[A]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP25:%.*]] = load i8, i8* [[ARRAYIDX]], align 1
; CHECK1-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, i8* [[B]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP26:%.*]] = load i8, i8* [[ARRAYIDX2]], align 1
; CHECK1-NEXT:    [[ADD:%.*]] = add i8 [[TMP26]], [[TMP25]]
; CHECK1-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds i8, i8* [[C]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store i8 [[ADD]], i8* [[ARRAYIDX6]], align 1
; CHECK1-NEXT:    [[CMP:%.*]] = icmp sgt i64 [[INDVARS_IV]], 0
; CHECK1-NEXT:    [[INDVARS_IV_NEXT]] = add nsw i64 [[INDVARS_IV]], -1
; CHECK1-NEXT:    br i1 [[CMP]], label [[FOR_BODY]], label [[FOR_COND_CLEANUP_LOOPEXIT]], [[LOOP2:!llvm.loop !.*]]
;
entry:
  %cmp13 = icmp sgt i32 %N, -1
  br i1 %cmp13, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %0 = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i8, i8* %a, i64 %indvars.iv
  %1 = load i8, i8* %arrayidx, align 1
  %arrayidx2 = getelementptr inbounds i8, i8* %b, i64 %indvars.iv
  %2 = load i8, i8* %arrayidx2, align 1
  %add = add i8 %2, %1
  %arrayidx6 = getelementptr inbounds i8, i8* %c, i64 %indvars.iv
  store i8 %add, i8* %arrayidx6, align 1
  %cmp = icmp sgt i64 %indvars.iv, 0
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  br i1 %cmp, label %for.body, label %for.cond.cleanup.loopexit
}
