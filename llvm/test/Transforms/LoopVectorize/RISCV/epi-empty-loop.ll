; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -loop-vectorize -vector-register-width-factor=8 -riscv-v-vector-bits-min=64 < %s -o - \
; RUN:    | FileCheck %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -loop-vectorize -riscv-v-vector-bits-min=64 < %s -o - \
; RUN:    | FileCheck %s --check-prefix=CHECK1

; We used to crash with silly loops like the one in %for.body below
source_filename = "test.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128-v128:128:128-v256:128:128-v512:128:128-v1024:128:128"
target triple = "riscv64-unknown-linux-gnu"

@__const.xerbla_array.srname = private unnamed_addr constant [33 x i8] c"                                \00", align 1

; Function Attrs: nounwind
define dso_local signext i32 @xerbla_array(i8* nocapture readonly %srname_array, i32 signext %srname_len, i32* %info) local_unnamed_addr #0 {
; CHECK-LABEL: @xerbla_array(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SRNAME:%.*]] = alloca [33 x i8], align 1
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [33 x i8], [33 x i8]* [[SRNAME]], i64 0, i64 0
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 33, i8* nonnull [[TMP0]]) #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(33) [[TMP0]], i8* noundef nonnull align 1 dereferenceable(33) getelementptr inbounds ([33 x i8], [33 x i8]* @__const.xerbla_array.srname, i64 0, i64 0), i64 33, i1 false)
; CHECK-NEXT:    [[CMP114:%.*]] = icmp sgt i32 [[SRNAME_LEN:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP114]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[SRNAME_LEN]], 32
; CHECK-NEXT:    [[COND:%.*]] = select i1 [[CMP]], i32 [[SRNAME_LEN]], i32 32
; CHECK-NEXT:    [[SRNAME16:%.*]] = getelementptr inbounds [33 x i8], [33 x i8]* [[SRNAME]], i64 0, i64 0
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[COND]] to i64
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 [[SRNAME16]], i8* align 1 [[SRNAME_ARRAY:%.*]], i64 [[TMP1]], i1 false)
; CHECK-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP2:%.*]] = sub i64 [[TMP1]], [[INDEX]]
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP2]], i64 0, i64 0)
; CHECK-NEXT:    [[TMP4:%.*]] = trunc i64 [[TMP3]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 8
; CHECK-NEXT:    [[TMP7:%.*]] = zext i32 [[TMP4]] to i64
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP7]]
; CHECK-NEXT:    [[TMP8:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[TMP1]]
; CHECK-NEXT:    br i1 [[TMP8]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    br i1 true, label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[TMP1]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[TMP1]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]
; CHECK:       for.end.loopexit:
; CHECK-NEXT:    [[PHI_CAST:%.*]] = zext i32 [[COND]] to i64
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end:
; CHECK-NEXT:    [[I_0_LCSSA:%.*]] = phi i64 [ [[PHI_CAST]], [[FOR_END_LOOPEXIT]] ], [ 0, [[ENTRY:%.*]] ]
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds [33 x i8], [33 x i8]* [[SRNAME]], i64 0, i64 [[I_0_LCSSA]]
; CHECK-NEXT:    store i8 0, i8* [[ARRAYIDX5]], align 1, !tbaa [[TBAA9:![0-9]+]]
; CHECK-NEXT:    [[CALL:%.*]] = call signext i32 @xerbla(i8* nonnull [[TMP0]], i32* [[INFO:%.*]], i32 signext [[SRNAME_LEN]]) #[[ATTR6]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 33, i8* nonnull [[TMP0]]) #[[ATTR6]]
; CHECK-NEXT:    ret i32 0
;
; CHECK1-LABEL: @xerbla_array(
; CHECK1-NEXT:  entry:
; CHECK1-NEXT:    [[SRNAME:%.*]] = alloca [33 x i8], align 1
; CHECK1-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [33 x i8], [33 x i8]* [[SRNAME]], i64 0, i64 0
; CHECK1-NEXT:    call void @llvm.lifetime.start.p0i8(i64 33, i8* nonnull [[TMP0]]) #[[ATTR6:[0-9]+]]
; CHECK1-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(33) [[TMP0]], i8* noundef nonnull align 1 dereferenceable(33) getelementptr inbounds ([33 x i8], [33 x i8]* @__const.xerbla_array.srname, i64 0, i64 0), i64 33, i1 false)
; CHECK1-NEXT:    [[CMP114:%.*]] = icmp sgt i32 [[SRNAME_LEN:%.*]], 0
; CHECK1-NEXT:    br i1 [[CMP114]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK1:       for.body.preheader:
; CHECK1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[SRNAME_LEN]], 32
; CHECK1-NEXT:    [[COND:%.*]] = select i1 [[CMP]], i32 [[SRNAME_LEN]], i32 32
; CHECK1-NEXT:    [[SRNAME16:%.*]] = getelementptr inbounds [33 x i8], [33 x i8]* [[SRNAME]], i64 0, i64 0
; CHECK1-NEXT:    [[TMP1:%.*]] = zext i32 [[COND]] to i64
; CHECK1-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 [[SRNAME16]], i8* align 1 [[SRNAME_ARRAY:%.*]], i64 [[TMP1]], i1 false)
; CHECK1-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK1:       vector.ph:
; CHECK1-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK1:       vector.body:
; CHECK1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK1-NEXT:    [[TMP2:%.*]] = sub i64 [[TMP1]], [[INDEX]]
; CHECK1-NEXT:    [[TMP3:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP2]], i64 0, i64 0)
; CHECK1-NEXT:    [[TMP4:%.*]] = trunc i64 [[TMP3]] to i32
; CHECK1-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 8
; CHECK1-NEXT:    [[TMP7:%.*]] = zext i32 [[TMP4]] to i64
; CHECK1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP7]]
; CHECK1-NEXT:    [[TMP8:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[TMP1]]
; CHECK1-NEXT:    br i1 [[TMP8]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; CHECK1:       middle.block:
; CHECK1-NEXT:    br i1 true, label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK1:       scalar.ph:
; CHECK1-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[TMP1]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK1:       for.body:
; CHECK1-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK1-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[TMP1]]
; CHECK1-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]
; CHECK1:       for.end.loopexit:
; CHECK1-NEXT:    [[PHI_CAST:%.*]] = zext i32 [[COND]] to i64
; CHECK1-NEXT:    br label [[FOR_END]]
; CHECK1:       for.end:
; CHECK1-NEXT:    [[I_0_LCSSA:%.*]] = phi i64 [ [[PHI_CAST]], [[FOR_END_LOOPEXIT]] ], [ 0, [[ENTRY:%.*]] ]
; CHECK1-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds [33 x i8], [33 x i8]* [[SRNAME]], i64 0, i64 [[I_0_LCSSA]]
; CHECK1-NEXT:    store i8 0, i8* [[ARRAYIDX5]], align 1, !tbaa [[TBAA9:![0-9]+]]
; CHECK1-NEXT:    [[CALL:%.*]] = call signext i32 @xerbla(i8* nonnull [[TMP0]], i32* [[INFO:%.*]], i32 signext [[SRNAME_LEN]]) #[[ATTR6]]
; CHECK1-NEXT:    call void @llvm.lifetime.end.p0i8(i64 33, i8* nonnull [[TMP0]]) #[[ATTR6]]
; CHECK1-NEXT:    ret i32 0
;
entry:
  %srname = alloca [33 x i8], align 1
  %0 = getelementptr inbounds [33 x i8], [33 x i8]* %srname, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 33, i8* nonnull %0) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(33) %0, i8* noundef nonnull align 1 dereferenceable(33) getelementptr inbounds ([33 x i8], [33 x i8]* @__const.xerbla_array.srname, i64 0, i64 0), i64 33, i1 false)
  %cmp114 = icmp sgt i32 %srname_len, 0
  br i1 %cmp114, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %cmp = icmp slt i32 %srname_len, 32
  %cond = select i1 %cmp, i32 %srname_len, i32 32
  %srname16 = getelementptr inbounds [33 x i8], [33 x i8]* %srname, i64 0, i64 0
  %1 = zext i32 %cond to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %srname16, i8* align 1 %srname_array, i64 %1, i1 false)
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %1
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body, !llvm.loop !4

for.end.loopexit:                                 ; preds = %for.body
  %phi.cast = zext i32 %cond to i64
  br label %for.end

for.end:                                          ; preds = %entry, %for.end.loopexit
  %i.0.lcssa = phi i64 [ %phi.cast, %for.end.loopexit ], [ 0, %entry ]
  %arrayidx5 = getelementptr inbounds [33 x i8], [33 x i8]* %srname, i64 0, i64 %i.0.lcssa
  store i8 0, i8* %arrayidx5, align 1, !tbaa !6
  %call = call signext i32 @xerbla(i8* nonnull %0, i32* %info, i32 signext %srname_len) #4
  call void @llvm.lifetime.end.p0i8(i64 33, i8* nonnull %0) #4
  ret i32 0
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local signext i32 @xerbla(i8*, i32*, i32 signext) local_unnamed_addr #3

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+64bit,+a,+c,+d,+zepi,+f,+m,-relax,-save-restore" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #3 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+64bit,+a,+c,+d,+zepi,+f,+m,-relax,-save-restore" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"lp64d"}
!2 = !{i32 1, !"SmallDataLimit", i32 8}
!3 = !{!"clang version 14.0.0"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.mustprogress"}
!6 = !{!7, !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}

