; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes=loop-vectorize,simplifycfg,instcombine,simplifycfg %s | FileCheck %s
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128"
target triple = "riscv64-unknown-linux-gnu"

define <vscale x 2 x i32> @_ZGVEMk2vvv_simple_control_flow(<vscale x 2 x i32> %X, <vscale x 2 x i32> %Y, <vscale x 2 x i32> %W, <vscale x 2 x i1> %mask, i32 zeroext %vl) #0 {
; CHECK-LABEL: @_ZGVEMk2vvv_simple_control_flow(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VSCALE:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP0:%.*]] = shl i32 [[VSCALE]], 1
; CHECK-NEXT:    [[ASSUME_COND:%.*]] = icmp uge i32 [[TMP0]], [[VL:%.*]]
; CHECK-NEXT:    call void @llvm.assume(i1 [[ASSUME_COND]])
; CHECK-NEXT:    [[ZEXT_MASK:%.*]] = zext <vscale x 2 x i1> [[MASK:%.*]] to <vscale x 2 x i32>
; CHECK-NEXT:    [[VEC_MASK:%.*]] = alloca <vscale x 2 x i32>, align 8
; CHECK-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[ZEXT_MASK]], ptr [[VEC_MASK]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VEC_X:%.*]] = alloca <vscale x 2 x i32>, align 8
; CHECK-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[X:%.*]], ptr [[VEC_X]], <vscale x 2 x i1> [[MASK]], i32 [[VL]])
; CHECK-NEXT:    [[VEC_Y:%.*]] = alloca <vscale x 2 x i32>, align 8
; CHECK-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[Y:%.*]], ptr [[VEC_Y]], <vscale x 2 x i1> [[MASK]], i32 [[VL]])
; CHECK-NEXT:    [[VEC_W:%.*]] = alloca <vscale x 2 x i32>, align 8
; CHECK-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[W:%.*]], ptr [[VEC_W]], <vscale x 2 x i1> [[MASK]], i32 [[VL]])
; CHECK-NEXT:    [[VEC_RET:%.*]] = alloca <vscale x 2 x i32>, align 8
; CHECK-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = add i32 [[VL]], -1
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TRIP_COUNT_MINUS_1]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-NEXT:    [[VP_STEPVECTOR:%.*]] = call <vscale x 2 x i32> @llvm.experimental.vp.stepvector.nxv2i32(<vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_ICMP_ULE:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i32(<vscale x 2 x i32> [[VP_STEPVECTOR]], <vscale x 2 x i32> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_MASK]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_ICMP:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i32> zeroinitializer, metadata !"ne", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_SELECT:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[VP_ICMP_ULE]], <vscale x 2 x i1> [[VP_OP_ICMP]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD4:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_X]], <vscale x 2 x i1> [[VP_MASK_SELECT]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_ICMP5:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD4]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 4, i64 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), metadata !"sgt", <vscale x 2 x i1> [[VP_MASK_SELECT]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_SELECT:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[VP_MASK_SELECT]], <vscale x 2 x i1> [[VP_OP_ICMP5]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_NOT:%.*]] = call <vscale x 2 x i1> @llvm.vp.xor.nxv2i1(<vscale x 2 x i1> [[VP_OP_SELECT]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_SELECT6:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[VP_MASK_SELECT]], <vscale x 2 x i1> [[VP_MASK_NOT]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD7:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_Y]], <vscale x 2 x i1> [[VP_MASK_SELECT6]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_ICMP8:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD7]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 7, i64 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), metadata !"sgt", <vscale x 2 x i1> [[VP_MASK_SELECT6]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_SELECT9:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[VP_MASK_SELECT6]], <vscale x 2 x i1> [[VP_OP_ICMP8]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD10:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_X]], <vscale x 2 x i1> [[VP_MASK_SELECT6]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD11:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_Y]], <vscale x 2 x i1> [[VP_MASK_SELECT6]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD12:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_W]], <vscale x 2 x i1> [[VP_MASK_SELECT6]], i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_SELECT13:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[VP_MASK_SELECT6]], <vscale x 2 x i1> [[VP_OP_SELECT9]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD14:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_X]], <vscale x 2 x i1> [[VP_MASK_SELECT13]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD14]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 5, i64 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> [[VP_MASK_SELECT13]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD15:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_W]], <vscale x 2 x i1> [[VP_MASK_SELECT13]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP16:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD15]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 5, i64 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> [[VP_MASK_SELECT13]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD17:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_Y]], <vscale x 2 x i1> [[VP_MASK_SELECT13]], i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_SELECT18:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[VP_MASK_SELECT]], <vscale x 2 x i1> [[VP_OP_SELECT]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD19:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_X]], <vscale x 2 x i1> [[VP_MASK_SELECT18]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP20:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD19]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 4, i64 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> [[VP_MASK_SELECT18]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD21:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_Y]], <vscale x 2 x i1> [[VP_MASK_SELECT18]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP22:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD21]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 5, i64 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> [[VP_MASK_SELECT18]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD23:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_W]], <vscale x 2 x i1> [[VP_MASK_SELECT18]], i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_NOT24:%.*]] = call <vscale x 2 x i1> @llvm.vp.xor.nxv2i1(<vscale x 2 x i1> [[VP_OP_SELECT9]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_SELECT25:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[VP_MASK_SELECT6]], <vscale x 2 x i1> [[VP_MASK_NOT24]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_PREDPHI:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[VP_MASK_SELECT13]], <vscale x 2 x i32> [[VP_OP]], <vscale x 2 x i32> [[VP_OP20]], i32 [[VL]])
; CHECK-NEXT:    [[VP_PREDPHI26:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[VP_MASK_SELECT25]], <vscale x 2 x i32> [[VP_OP_LOAD10]], <vscale x 2 x i32> [[VP_PREDPHI]], i32 [[VL]])
; CHECK-NEXT:    [[VP_PREDPHI27:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[VP_MASK_SELECT13]], <vscale x 2 x i32> [[VP_OP_LOAD17]], <vscale x 2 x i32> [[VP_OP22]], i32 [[VL]])
; CHECK-NEXT:    [[VP_PREDPHI28:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[VP_MASK_SELECT25]], <vscale x 2 x i32> [[VP_OP_LOAD11]], <vscale x 2 x i32> [[VP_PREDPHI27]], i32 [[VL]])
; CHECK-NEXT:    [[VP_PREDPHI29:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[VP_MASK_SELECT13]], <vscale x 2 x i32> [[VP_OP16]], <vscale x 2 x i32> [[VP_OP_LOAD23]], i32 [[VL]])
; CHECK-NEXT:    [[VP_PREDPHI30:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[VP_MASK_SELECT25]], <vscale x 2 x i32> [[VP_OP_LOAD12]], <vscale x 2 x i32> [[VP_PREDPHI29]], i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_OR:%.*]] = call <vscale x 2 x i1> @llvm.vp.or.nxv2i1(<vscale x 2 x i1> [[VP_MASK_SELECT13]], <vscale x 2 x i1> [[VP_MASK_SELECT25]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_OR31:%.*]] = call <vscale x 2 x i1> @llvm.vp.or.nxv2i1(<vscale x 2 x i1> [[VP_MASK_OR]], <vscale x 2 x i1> [[VP_MASK_SELECT18]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP32:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_PREDPHI28]], <vscale x 2 x i32> [[VP_PREDPHI26]], <vscale x 2 x i1> [[VP_MASK_OR31]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP33:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP32]], <vscale x 2 x i32> [[VP_PREDPHI30]], <vscale x 2 x i1> [[VP_MASK_OR31]], i32 [[VL]])
; CHECK-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP33]], ptr [[VEC_RET]], <vscale x 2 x i1> [[VP_MASK_OR31]], i32 [[VL]])
; CHECK-NEXT:    [[VEC_RET17:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_RET]], <vscale x 2 x i1> [[MASK]], i32 [[VL]])
; CHECK-NEXT:    ret <vscale x 2 x i32> [[VEC_RET17]]
;
entry:
  %vscale = call i32 @llvm.vscale.i32()
  %0 = mul i32 %vscale, 2
  %assume.cond = icmp ule i32 %vl, %0
  call void @llvm.assume(i1 %assume.cond)
  %zext.mask = zext <vscale x 2 x i1> %mask to <vscale x 2 x i32>
  %vec.mask = alloca <vscale x 2 x i32>, align 8
  call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> %zext.mask, ptr %vec.mask, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 %vl)
  %vec.X = alloca <vscale x 2 x i32>, align 8
  call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> %X, ptr %vec.X, <vscale x 2 x i1> %mask, i32 %vl)
  %vec.Y = alloca <vscale x 2 x i32>, align 8
  call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> %Y, ptr %vec.Y, <vscale x 2 x i1> %mask, i32 %vl)
  %vec.W = alloca <vscale x 2 x i32>, align 8
  call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> %W, ptr %vec.W, <vscale x 2 x i1> %mask, i32 %vl)
  %vec.ret = alloca <vscale x 2 x i32>, align 8
  %vl.check = icmp uge i32 %vl, 0
  br i1 %vl.check, label %simd.loop.preheader, label %return

simd.loop.preheader:                              ; preds = %entry
  br label %simd.loop

simd.loop:                                        ; preds = %simd.loop.preheader, %simd.loop.exit
  %index = phi i32 [ %indvar, %simd.loop.exit ], [ 0, %simd.loop.preheader ]
  %vec.mask.gep = getelementptr i32, ptr %vec.mask, i32 %index
  %mask.parm = load i32, ptr %vec.mask.gep, align 4
  %mask.value = icmp ne i32 %mask.parm, 0
  br i1 %mask.value, label %simd.loop.then, label %simd.loop.exit

simd.loop.then:                                   ; preds = %simd.loop
  %vec.X.gep5 = getelementptr i32, ptr %vec.X, i32 %index
  %vec.X.elem6 = load i32, ptr %vec.X.gep5, align 4
  %cmp = icmp sgt i32 %vec.X.elem6, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %simd.loop.then
  %vec.X.gep3 = getelementptr i32, ptr %vec.X, i32 %index
  %vec.X.elem4 = load i32, ptr %vec.X.gep3, align 4
  %add = add nuw nsw i32 %vec.X.elem4, 4
  %vec.Y.gep11 = getelementptr i32, ptr %vec.Y, i32 %index
  %vec.Y.elem12 = load i32, ptr %vec.Y.gep11, align 4
  %add1 = add nsw i32 %vec.Y.elem12, 5
  %vec.W.gep13 = getelementptr i32, ptr %vec.W, i32 %index
  %vec.W.elem14 = load i32, ptr %vec.W.gep13, align 4
  br label %if.end6

if.else:                                          ; preds = %simd.loop.then
  %vec.Y.gep9 = getelementptr i32, ptr %vec.Y, i32 %index
  %vec.Y.elem10 = load i32, ptr %vec.Y.gep9, align 4
  %cmp2 = icmp sgt i32 %vec.Y.elem10, 7
  %vec.X.gep = getelementptr i32, ptr %vec.X, i32 %index
  %vec.X.elem = load i32, ptr %vec.X.gep, align 4
  %vec.Y.gep = getelementptr i32, ptr %vec.Y, i32 %index
  %vec.Y.elem = load i32, ptr %vec.Y.gep, align 4
  %vec.W.gep = getelementptr i32, ptr %vec.W, i32 %index
  %vec.W.elem = load i32, ptr %vec.W.gep, align 4
  br i1 %cmp2, label %if.then3, label %if.end6

if.then3:                                         ; preds = %if.else
  %vec.X.gep1 = getelementptr i32, ptr %vec.X, i32 %index
  %vec.X.elem2 = load i32, ptr %vec.X.gep1, align 4
  %add4 = add nsw i32 %vec.X.elem2, 5
  %vec.W.gep15 = getelementptr i32, ptr %vec.W, i32 %index
  %vec.W.elem16 = load i32, ptr %vec.W.gep15, align 4
  %add5 = add nsw i32 %vec.W.elem16, 5
  %vec.Y.gep7 = getelementptr i32, ptr %vec.Y, i32 %index
  %vec.Y.elem8 = load i32, ptr %vec.Y.gep7, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then3, %if.else, %if.then
  %X.addr.0 = phi i32 [ %add, %if.then ], [ %add4, %if.then3 ], [ %vec.X.elem, %if.else ]
  %Y.addr.0 = phi i32 [ %add1, %if.then ], [ %vec.Y.elem8, %if.then3 ], [ %vec.Y.elem, %if.else ]
  %W.addr.0 = phi i32 [ %vec.W.elem14, %if.then ], [ %add5, %if.then3 ], [ %vec.W.elem, %if.else ]
  %add7 = add nsw i32 %Y.addr.0, %X.addr.0
  %add8 = add nsw i32 %add7, %W.addr.0
  %vec.ret.gep = getelementptr i32, ptr %vec.ret, i32 %index
  store i32 %add8, ptr %vec.ret.gep, align 4
  br label %simd.loop.exit

simd.loop.exit:                                   ; preds = %simd.loop, %if.end6
  %indvar = add nsw i32 %index, 1
  %exit.cond = icmp eq i32 %indvar, %vl
  br i1 %exit.cond, label %return.loopexit, label %simd.loop, !llvm.loop !5

return.loopexit:                                  ; preds = %simd.loop.exit
  br label %return

return:                                           ; preds = %return.loopexit, %entry
  %vec.ret17 = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr %vec.ret, <vscale x 2 x i1> %mask, i32 %vl)
  ret <vscale x 2 x i32> %vec.ret17
}

define <vscale x 2 x i32> @_ZGVENk2vvv_simple_control_flow(<vscale x 2 x i32> %X, <vscale x 2 x i32> %Y, <vscale x 2 x i32> %W, i32 zeroext %vl) #0 {
; CHECK-LABEL: @_ZGVENk2vvv_simple_control_flow(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VSCALE:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP0:%.*]] = shl i32 [[VSCALE]], 1
; CHECK-NEXT:    [[ASSUME_COND:%.*]] = icmp uge i32 [[TMP0]], [[VL:%.*]]
; CHECK-NEXT:    call void @llvm.assume(i1 [[ASSUME_COND]])
; CHECK-NEXT:    [[VEC_X:%.*]] = alloca <vscale x 2 x i32>, align 8
; CHECK-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[X:%.*]], ptr [[VEC_X]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VEC_Y:%.*]] = alloca <vscale x 2 x i32>, align 8
; CHECK-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[Y:%.*]], ptr [[VEC_Y]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VEC_W:%.*]] = alloca <vscale x 2 x i32>, align 8
; CHECK-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[W:%.*]], ptr [[VEC_W]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VEC_RET:%.*]] = alloca <vscale x 2 x i32>, align 8
; CHECK-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = add i32 [[VL]], -1
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TRIP_COUNT_MINUS_1]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-NEXT:    [[VP_STEPVECTOR:%.*]] = call <vscale x 2 x i32> @llvm.experimental.vp.stepvector.nxv2i32(<vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_ICMP_ULE:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i32(<vscale x 2 x i32> [[VP_STEPVECTOR]], <vscale x 2 x i32> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_X]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_ICMP:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 4, i64 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), metadata !"sgt", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_NOT:%.*]] = call <vscale x 2 x i1> @llvm.vp.xor.nxv2i1(<vscale x 2 x i1> [[VP_OP_ICMP]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_SELECT:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[VP_ICMP_ULE]], <vscale x 2 x i1> [[VP_MASK_NOT]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD4:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_Y]], <vscale x 2 x i1> [[VP_MASK_SELECT]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_ICMP5:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD4]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 7, i64 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), metadata !"sgt", <vscale x 2 x i1> [[VP_MASK_SELECT]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_SELECT:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[VP_MASK_SELECT]], <vscale x 2 x i1> [[VP_OP_ICMP5]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD6:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_X]], <vscale x 2 x i1> [[VP_MASK_SELECT]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD7:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_Y]], <vscale x 2 x i1> [[VP_MASK_SELECT]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD8:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_W]], <vscale x 2 x i1> [[VP_MASK_SELECT]], i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_SELECT9:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[VP_MASK_SELECT]], <vscale x 2 x i1> [[VP_OP_SELECT]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD10:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_X]], <vscale x 2 x i1> [[VP_MASK_SELECT9]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD10]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 5, i64 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> [[VP_MASK_SELECT9]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD11:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_W]], <vscale x 2 x i1> [[VP_MASK_SELECT9]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP12:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD11]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 5, i64 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> [[VP_MASK_SELECT9]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD13:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_Y]], <vscale x 2 x i1> [[VP_MASK_SELECT9]], i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_SELECT14:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[VP_ICMP_ULE]], <vscale x 2 x i1> [[VP_OP_ICMP]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD15:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_X]], <vscale x 2 x i1> [[VP_MASK_SELECT14]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP16:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD15]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 4, i64 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> [[VP_MASK_SELECT14]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD17:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_Y]], <vscale x 2 x i1> [[VP_MASK_SELECT14]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP18:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD17]], <vscale x 2 x i32> shufflevector (<vscale x 2 x i32> insertelement (<vscale x 2 x i32> poison, i32 5, i64 0), <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> [[VP_MASK_SELECT14]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP_LOAD19:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_W]], <vscale x 2 x i1> [[VP_MASK_SELECT14]], i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_NOT20:%.*]] = call <vscale x 2 x i1> @llvm.vp.xor.nxv2i1(<vscale x 2 x i1> [[VP_OP_SELECT]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_SELECT21:%.*]] = call <vscale x 2 x i1> @llvm.vp.and.nxv2i1(<vscale x 2 x i1> [[VP_MASK_SELECT]], <vscale x 2 x i1> [[VP_MASK_NOT20]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_PREDPHI:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[VP_MASK_SELECT9]], <vscale x 2 x i32> [[VP_OP]], <vscale x 2 x i32> [[VP_OP16]], i32 [[VL]])
; CHECK-NEXT:    [[VP_PREDPHI22:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[VP_MASK_SELECT21]], <vscale x 2 x i32> [[VP_OP_LOAD6]], <vscale x 2 x i32> [[VP_PREDPHI]], i32 [[VL]])
; CHECK-NEXT:    [[VP_PREDPHI23:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[VP_MASK_SELECT9]], <vscale x 2 x i32> [[VP_OP_LOAD13]], <vscale x 2 x i32> [[VP_OP18]], i32 [[VL]])
; CHECK-NEXT:    [[VP_PREDPHI24:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[VP_MASK_SELECT21]], <vscale x 2 x i32> [[VP_OP_LOAD7]], <vscale x 2 x i32> [[VP_PREDPHI23]], i32 [[VL]])
; CHECK-NEXT:    [[VP_PREDPHI25:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[VP_MASK_SELECT9]], <vscale x 2 x i32> [[VP_OP12]], <vscale x 2 x i32> [[VP_OP_LOAD19]], i32 [[VL]])
; CHECK-NEXT:    [[VP_PREDPHI26:%.*]] = call <vscale x 2 x i32> @llvm.vp.select.nxv2i32(<vscale x 2 x i1> [[VP_MASK_SELECT21]], <vscale x 2 x i32> [[VP_OP_LOAD8]], <vscale x 2 x i32> [[VP_PREDPHI25]], i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_OR:%.*]] = call <vscale x 2 x i1> @llvm.vp.or.nxv2i1(<vscale x 2 x i1> [[VP_MASK_SELECT9]], <vscale x 2 x i1> [[VP_MASK_SELECT21]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_MASK_OR27:%.*]] = call <vscale x 2 x i1> @llvm.vp.or.nxv2i1(<vscale x 2 x i1> [[VP_MASK_OR]], <vscale x 2 x i1> [[VP_MASK_SELECT14]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    [[VP_OP28:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_PREDPHI24]], <vscale x 2 x i32> [[VP_PREDPHI22]], <vscale x 2 x i1> [[VP_MASK_OR27]], i32 [[VL]])
; CHECK-NEXT:    [[VP_OP29:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP28]], <vscale x 2 x i32> [[VP_PREDPHI26]], <vscale x 2 x i1> [[VP_MASK_OR27]], i32 [[VL]])
; CHECK-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP29]], ptr [[VEC_RET]], <vscale x 2 x i1> [[VP_MASK_OR27]], i32 [[VL]])
; CHECK-NEXT:    [[VEC_RET17:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[VEC_RET]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[VL]])
; CHECK-NEXT:    ret <vscale x 2 x i32> [[VEC_RET17]]
;
entry:
  %vscale = call i32 @llvm.vscale.i32()
  %0 = mul i32 %vscale, 2
  %assume.cond = icmp ule i32 %vl, %0
  call void @llvm.assume(i1 %assume.cond)
  %vec.X = alloca <vscale x 2 x i32>, align 8
  call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> %X, ptr %vec.X, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 %vl)
  %vec.Y = alloca <vscale x 2 x i32>, align 8
  call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> %Y, ptr %vec.Y, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 %vl)
  %vec.W = alloca <vscale x 2 x i32>, align 8
  call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> %W, ptr %vec.W, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 %vl)
  %vec.ret = alloca <vscale x 2 x i32>, align 8
  %vl.check = icmp uge i32 %vl, 0
  br i1 %vl.check, label %simd.loop, label %return

simd.loop:                                        ; preds = %simd.loop.exit, %entry
  %index = phi i32 [ 0, %entry ], [ %indvar, %simd.loop.exit ]
  %vec.X.gep5 = getelementptr i32, ptr %vec.X, i32 %index
  %vec.X.elem6 = load i32, ptr %vec.X.gep5, align 4
  %cmp = icmp sgt i32 %vec.X.elem6, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %simd.loop
  %vec.X.gep3 = getelementptr i32, ptr %vec.X, i32 %index
  %vec.X.elem4 = load i32, ptr %vec.X.gep3, align 4
  %add = add nuw nsw i32 %vec.X.elem4, 4
  %vec.Y.gep11 = getelementptr i32, ptr %vec.Y, i32 %index
  %vec.Y.elem12 = load i32, ptr %vec.Y.gep11, align 4
  %add1 = add nsw i32 %vec.Y.elem12, 5
  %vec.W.gep13 = getelementptr i32, ptr %vec.W, i32 %index
  %vec.W.elem14 = load i32, ptr %vec.W.gep13, align 4
  br label %if.end6

if.else:                                          ; preds = %simd.loop
  %vec.Y.gep9 = getelementptr i32, ptr %vec.Y, i32 %index
  %vec.Y.elem10 = load i32, ptr %vec.Y.gep9, align 4
  %cmp2 = icmp sgt i32 %vec.Y.elem10, 7
  %vec.X.gep = getelementptr i32, ptr %vec.X, i32 %index
  %vec.X.elem = load i32, ptr %vec.X.gep, align 4
  %vec.Y.gep = getelementptr i32, ptr %vec.Y, i32 %index
  %vec.Y.elem = load i32, ptr %vec.Y.gep, align 4
  %vec.W.gep = getelementptr i32, ptr %vec.W, i32 %index
  %vec.W.elem = load i32, ptr %vec.W.gep, align 4
  br i1 %cmp2, label %if.then3, label %if.end6

if.then3:                                         ; preds = %if.else
  %vec.X.gep1 = getelementptr i32, ptr %vec.X, i32 %index
  %vec.X.elem2 = load i32, ptr %vec.X.gep1, align 4
  %add4 = add nsw i32 %vec.X.elem2, 5
  %vec.W.gep15 = getelementptr i32, ptr %vec.W, i32 %index
  %vec.W.elem16 = load i32, ptr %vec.W.gep15, align 4
  %add5 = add nsw i32 %vec.W.elem16, 5
  %vec.Y.gep7 = getelementptr i32, ptr %vec.Y, i32 %index
  %vec.Y.elem8 = load i32, ptr %vec.Y.gep7, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then3, %if.else, %if.then
  %X.addr.0 = phi i32 [ %add, %if.then ], [ %add4, %if.then3 ], [ %vec.X.elem, %if.else ]
  %Y.addr.0 = phi i32 [ %add1, %if.then ], [ %vec.Y.elem8, %if.then3 ], [ %vec.Y.elem, %if.else ]
  %W.addr.0 = phi i32 [ %vec.W.elem14, %if.then ], [ %add5, %if.then3 ], [ %vec.W.elem, %if.else ]
  %add7 = add nsw i32 %Y.addr.0, %X.addr.0
  %add8 = add nsw i32 %add7, %W.addr.0
  %vec.ret.gep = getelementptr i32, ptr %vec.ret, i32 %index
  store i32 %add8, ptr %vec.ret.gep, align 4
  br label %simd.loop.exit

simd.loop.exit:                                   ; preds = %if.end6
  %indvar = add nsw i32 %index, 1
  %exit.cond = icmp eq i32 %indvar, %vl
  br i1 %exit.cond, label %return, label %simd.loop, !llvm.loop !13

return:                                           ; preds = %simd.loop.exit, %entry
  %vec.ret17 = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr %vec.ret, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 %vl)
  ret <vscale x 2 x i32> %vec.ret17
}

declare void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32>, ptr nocapture, <vscale x 2 x i1>, i32)
declare <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr nocapture, <vscale x 2 x i1>, i32)
declare i32 @llvm.vscale.i32()
declare void @llvm.assume(i1 noundef)

attributes #0 = { mustprogress nofree norecurse nosync nounwind readnone willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+64bit,+a,+c,+d,+f,+m,+zepi,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl32b,+zvl64b,-relax,-save-restore" }

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"lp64d"}
!2 = !{i32 7, !"openmp", i32 50}
!3 = !{i32 1, !"SmallDataLimit", i32 8}
!4 = !{!"clang version 15.0.0"}
!5 = distinct !{!5, !6, !7, !8, !9, !10, !11, !12}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = !{!"llvm.loop.vectorize.enable"}
!8 = !{!"llvm.loop.vectorize.width", i32 2}
!9 = !{!"llvm.loop.vectorize.scalable.enable", i1 true}
!10 = !{!"llvm.loop.vectorize.predicate.enable", i1 true}
!11 = !{!"llvm.loop.single.iteration"}
!12 = !{!"llvm.loop.epilogue.forbid"}
!13 = distinct !{!13, !6, !7, !8, !9, !10, !11, !12}
