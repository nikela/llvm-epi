; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -S -riscv-v-vector-bits-min=64 \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -passes='dce,loop-vectorize,instcombine' -force-vector-interleave=1 < %s -o - | FileCheck %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -S -riscv-v-vector-bits-min=64 \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -passes='dce,loop-vectorize,instcombine' -force-vector-interleave=1 -vector-register-width-factor=8 \
; RUN:    < %s -o - | FileCheck %s --check-prefix=CHECKWF8
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -S -riscv-v-vector-bits-min=64 \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -passes='dce,loop-vectorize,instcombine' -force-vector-interleave=1 -interleave-no-scalar-epilogue=true \
; RUN:    < %s -o - | FileCheck %s --check-prefix=INTERLEAVE

define void @test_bitcast_widening(i64 %N, i8* %c, i8* %a, i8* %b, i8* %m) {
; CHECK-LABEL: @test_bitcast_widening(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A:%.*]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[B:%.*]] to i64
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[C:%.*]] to i64
; CHECK-NEXT:    [[TMP3:%.*]] = ptrtoint ptr [[M:%.*]] to i64
; CHECK-NEXT:    [[CMP17:%.*]] = icmp sgt i64 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP17]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[TMP4:%.*]] = xor i64 [[N]], -1
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP6:%.*]] = icmp ugt i64 [[TMP5]], [[TMP4]]
; CHECK-NEXT:    br i1 [[TMP6]], label [[SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; CHECK:       vector.memcheck:
; CHECK-NEXT:    [[TMP7:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP8:%.*]] = shl i64 [[TMP7]], 3
; CHECK-NEXT:    [[TMP9:%.*]] = sub i64 [[TMP3]], [[TMP2]]
; CHECK-NEXT:    [[DIFF_CHECK:%.*]] = icmp ult i64 [[TMP9]], [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = shl i64 [[TMP7]], 3
; CHECK-NEXT:    [[TMP11:%.*]] = sub i64 [[TMP2]], [[TMP0]]
; CHECK-NEXT:    [[DIFF_CHECK1:%.*]] = icmp ult i64 [[TMP11]], [[TMP10]]
; CHECK-NEXT:    [[CONFLICT_RDX:%.*]] = or i1 [[DIFF_CHECK]], [[DIFF_CHECK1]]
; CHECK-NEXT:    [[TMP12:%.*]] = shl i64 [[TMP7]], 3
; CHECK-NEXT:    [[TMP13:%.*]] = sub i64 [[TMP2]], [[TMP1]]
; CHECK-NEXT:    [[DIFF_CHECK2:%.*]] = icmp ult i64 [[TMP13]], [[TMP12]]
; CHECK-NEXT:    [[CONFLICT_RDX3:%.*]] = or i1 [[CONFLICT_RDX]], [[DIFF_CHECK2]]
; CHECK-NEXT:    [[TMP14:%.*]] = shl i64 [[TMP7]], 3
; CHECK-NEXT:    [[TMP15:%.*]] = sub i64 [[TMP3]], [[TMP0]]
; CHECK-NEXT:    [[DIFF_CHECK4:%.*]] = icmp ult i64 [[TMP15]], [[TMP14]]
; CHECK-NEXT:    [[CONFLICT_RDX5:%.*]] = or i1 [[CONFLICT_RDX3]], [[DIFF_CHECK4]]
; CHECK-NEXT:    [[TMP16:%.*]] = shl i64 [[TMP7]], 3
; CHECK-NEXT:    [[TMP17:%.*]] = sub i64 [[TMP3]], [[TMP1]]
; CHECK-NEXT:    [[DIFF_CHECK6:%.*]] = icmp ult i64 [[TMP17]], [[TMP16]]
; CHECK-NEXT:    [[CONFLICT_RDX7:%.*]] = or i1 [[CONFLICT_RDX5]], [[DIFF_CHECK6]]
; CHECK-NEXT:    br i1 [[CONFLICT_RDX7]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = sub i64 [[N]], [[INDEX]]
; CHECK-NEXT:    [[TMP19:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP18]], i64 3, i64 0)
; CHECK-NEXT:    [[TMP20:%.*]] = trunc i64 [[TMP19]] to i32
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[INDEX]]
; CHECK-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP21]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP20]])
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[INDEX]]
; CHECK-NEXT:    [[VP_OP_LOAD10:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP22]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP20]])
; CHECK-NEXT:    [[VP_OP:%.*]] = call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD]], <vscale x 1 x double> [[VP_OP_LOAD10]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP20]])
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[INDEX]]
; CHECK-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP]], ptr [[TMP23]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP20]])
; CHECK-NEXT:    [[TMP24:%.*]] = bitcast <vscale x 1 x double> [[VP_OP_LOAD]] to <vscale x 1 x i64>
; CHECK-NEXT:    [[TMP25:%.*]] = bitcast <vscale x 1 x double> [[VP_OP_LOAD10]] to <vscale x 1 x i64>
; CHECK-NEXT:    [[VP_OP11:%.*]] = call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> [[TMP25]], <vscale x 1 x i64> [[TMP24]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP20]])
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr inbounds i64, ptr [[M]], i64 [[INDEX]]
; CHECK-NEXT:    call void @llvm.vp.store.nxv1i64.p0(<vscale x 1 x i64> [[VP_OP11]], ptr [[TMP26]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP20]])
; CHECK-NEXT:    [[TMP27:%.*]] = and i64 [[TMP19]], 4294967295
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP27]]
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    br i1 true, label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ], [ 0, [[VECTOR_MEMCHECK]] ]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[I_018:%.*]] = phi i64 [ [[INC:%.*]], [[FOR_BODY]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[I_018]]
; CHECK-NEXT:    [[TMP29:%.*]] = load double, ptr [[ARRAYIDX]], align 8
; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[I_018]]
; CHECK-NEXT:    [[TMP30:%.*]] = load double, ptr [[ARRAYIDX1]], align 8
; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[TMP29]], [[TMP30]]
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[I_018]]
; CHECK-NEXT:    store double [[ADD]], ptr [[ARRAYIDX2]], align 8
; CHECK-NEXT:    [[TMP31:%.*]] = bitcast double [[TMP29]] to i64
; CHECK-NEXT:    [[TMP32:%.*]] = bitcast double [[TMP30]] to i64
; CHECK-NEXT:    [[ADD5:%.*]] = add nsw i64 [[TMP32]], [[TMP31]]
; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds i64, ptr [[M]], i64 [[I_018]]
; CHECK-NEXT:    store i64 [[ADD5]], ptr [[ARRAYIDX6]], align 8
; CHECK-NEXT:    [[INC]] = add nuw nsw i64 [[I_018]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INC]], [[N]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
; CHECK:       for.end.loopexit:
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
; CHECKWF8-LABEL: @test_bitcast_widening(
; CHECKWF8-NEXT:  entry:
; CHECKWF8-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A:%.*]] to i64
; CHECKWF8-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[B:%.*]] to i64
; CHECKWF8-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[C:%.*]] to i64
; CHECKWF8-NEXT:    [[TMP3:%.*]] = ptrtoint ptr [[M:%.*]] to i64
; CHECKWF8-NEXT:    [[CMP17:%.*]] = icmp sgt i64 [[N:%.*]], 0
; CHECKWF8-NEXT:    br i1 [[CMP17]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECKWF8:       for.body.preheader:
; CHECKWF8-NEXT:    [[TMP4:%.*]] = xor i64 [[N]], -1
; CHECKWF8-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECKWF8-NEXT:    [[TMP6:%.*]] = shl i64 [[TMP5]], 3
; CHECKWF8-NEXT:    [[TMP7:%.*]] = icmp ugt i64 [[TMP6]], [[TMP4]]
; CHECKWF8-NEXT:    br i1 [[TMP7]], label [[SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; CHECKWF8:       vector.memcheck:
; CHECKWF8-NEXT:    [[TMP8:%.*]] = call i64 @llvm.vscale.i64()
; CHECKWF8-NEXT:    [[TMP9:%.*]] = shl i64 [[TMP8]], 6
; CHECKWF8-NEXT:    [[TMP10:%.*]] = sub i64 [[TMP3]], [[TMP2]]
; CHECKWF8-NEXT:    [[DIFF_CHECK:%.*]] = icmp ult i64 [[TMP10]], [[TMP9]]
; CHECKWF8-NEXT:    [[TMP11:%.*]] = shl i64 [[TMP8]], 6
; CHECKWF8-NEXT:    [[TMP12:%.*]] = sub i64 [[TMP2]], [[TMP0]]
; CHECKWF8-NEXT:    [[DIFF_CHECK1:%.*]] = icmp ult i64 [[TMP12]], [[TMP11]]
; CHECKWF8-NEXT:    [[CONFLICT_RDX:%.*]] = or i1 [[DIFF_CHECK]], [[DIFF_CHECK1]]
; CHECKWF8-NEXT:    [[TMP13:%.*]] = shl i64 [[TMP8]], 6
; CHECKWF8-NEXT:    [[TMP14:%.*]] = sub i64 [[TMP2]], [[TMP1]]
; CHECKWF8-NEXT:    [[DIFF_CHECK2:%.*]] = icmp ult i64 [[TMP14]], [[TMP13]]
; CHECKWF8-NEXT:    [[CONFLICT_RDX3:%.*]] = or i1 [[CONFLICT_RDX]], [[DIFF_CHECK2]]
; CHECKWF8-NEXT:    [[TMP15:%.*]] = shl i64 [[TMP8]], 6
; CHECKWF8-NEXT:    [[TMP16:%.*]] = sub i64 [[TMP3]], [[TMP0]]
; CHECKWF8-NEXT:    [[DIFF_CHECK4:%.*]] = icmp ult i64 [[TMP16]], [[TMP15]]
; CHECKWF8-NEXT:    [[CONFLICT_RDX5:%.*]] = or i1 [[CONFLICT_RDX3]], [[DIFF_CHECK4]]
; CHECKWF8-NEXT:    [[TMP17:%.*]] = shl i64 [[TMP8]], 6
; CHECKWF8-NEXT:    [[TMP18:%.*]] = sub i64 [[TMP3]], [[TMP1]]
; CHECKWF8-NEXT:    [[DIFF_CHECK6:%.*]] = icmp ult i64 [[TMP18]], [[TMP17]]
; CHECKWF8-NEXT:    [[CONFLICT_RDX7:%.*]] = or i1 [[CONFLICT_RDX5]], [[DIFF_CHECK6]]
; CHECKWF8-NEXT:    br i1 [[CONFLICT_RDX7]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; CHECKWF8:       vector.ph:
; CHECKWF8-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECKWF8:       vector.body:
; CHECKWF8-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECKWF8-NEXT:    [[TMP19:%.*]] = sub i64 [[N]], [[INDEX]]
; CHECKWF8-NEXT:    [[TMP20:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP19]], i64 3, i64 3)
; CHECKWF8-NEXT:    [[TMP21:%.*]] = trunc i64 [[TMP20]] to i32
; CHECKWF8-NEXT:    [[TMP22:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[INDEX]]
; CHECKWF8-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 8 x double> @llvm.vp.load.nxv8f64.p0(ptr [[TMP22]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP21]])
; CHECKWF8-NEXT:    [[TMP23:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[INDEX]]
; CHECKWF8-NEXT:    [[VP_OP_LOAD10:%.*]] = call <vscale x 8 x double> @llvm.vp.load.nxv8f64.p0(ptr [[TMP23]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP21]])
; CHECKWF8-NEXT:    [[VP_OP:%.*]] = call <vscale x 8 x double> @llvm.vp.fadd.nxv8f64(<vscale x 8 x double> [[VP_OP_LOAD]], <vscale x 8 x double> [[VP_OP_LOAD10]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP21]])
; CHECKWF8-NEXT:    [[TMP24:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[INDEX]]
; CHECKWF8-NEXT:    call void @llvm.vp.store.nxv8f64.p0(<vscale x 8 x double> [[VP_OP]], ptr [[TMP24]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP21]])
; CHECKWF8-NEXT:    [[TMP25:%.*]] = bitcast <vscale x 8 x double> [[VP_OP_LOAD]] to <vscale x 8 x i64>
; CHECKWF8-NEXT:    [[TMP26:%.*]] = bitcast <vscale x 8 x double> [[VP_OP_LOAD10]] to <vscale x 8 x i64>
; CHECKWF8-NEXT:    [[VP_OP11:%.*]] = call <vscale x 8 x i64> @llvm.vp.add.nxv8i64(<vscale x 8 x i64> [[TMP26]], <vscale x 8 x i64> [[TMP25]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP21]])
; CHECKWF8-NEXT:    [[TMP27:%.*]] = getelementptr inbounds i64, ptr [[M]], i64 [[INDEX]]
; CHECKWF8-NEXT:    call void @llvm.vp.store.nxv8i64.p0(<vscale x 8 x i64> [[VP_OP11]], ptr [[TMP27]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP21]])
; CHECKWF8-NEXT:    [[TMP28:%.*]] = and i64 [[TMP20]], 4294967295
; CHECKWF8-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP28]]
; CHECKWF8-NEXT:    [[TMP29:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N]]
; CHECKWF8-NEXT:    br i1 [[TMP29]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECKWF8:       middle.block:
; CHECKWF8-NEXT:    br i1 true, label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECKWF8:       scalar.ph:
; CHECKWF8-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ], [ 0, [[VECTOR_MEMCHECK]] ]
; CHECKWF8-NEXT:    br label [[FOR_BODY:%.*]]
; CHECKWF8:       for.body:
; CHECKWF8-NEXT:    [[I_018:%.*]] = phi i64 [ [[INC:%.*]], [[FOR_BODY]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; CHECKWF8-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[I_018]]
; CHECKWF8-NEXT:    [[TMP30:%.*]] = load double, ptr [[ARRAYIDX]], align 8
; CHECKWF8-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[I_018]]
; CHECKWF8-NEXT:    [[TMP31:%.*]] = load double, ptr [[ARRAYIDX1]], align 8
; CHECKWF8-NEXT:    [[ADD:%.*]] = fadd double [[TMP30]], [[TMP31]]
; CHECKWF8-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[I_018]]
; CHECKWF8-NEXT:    store double [[ADD]], ptr [[ARRAYIDX2]], align 8
; CHECKWF8-NEXT:    [[TMP32:%.*]] = bitcast double [[TMP30]] to i64
; CHECKWF8-NEXT:    [[TMP33:%.*]] = bitcast double [[TMP31]] to i64
; CHECKWF8-NEXT:    [[ADD5:%.*]] = add nsw i64 [[TMP33]], [[TMP32]]
; CHECKWF8-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds i64, ptr [[M]], i64 [[I_018]]
; CHECKWF8-NEXT:    store i64 [[ADD5]], ptr [[ARRAYIDX6]], align 8
; CHECKWF8-NEXT:    [[INC]] = add nuw nsw i64 [[I_018]], 1
; CHECKWF8-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INC]], [[N]]
; CHECKWF8-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
; CHECKWF8:       for.end.loopexit:
; CHECKWF8-NEXT:    br label [[FOR_END]]
; CHECKWF8:       for.end:
; CHECKWF8-NEXT:    ret void
;
; INTERLEAVE-LABEL: @test_bitcast_widening(
; INTERLEAVE-NEXT:  entry:
; INTERLEAVE-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A:%.*]] to i64
; INTERLEAVE-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[B:%.*]] to i64
; INTERLEAVE-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[C:%.*]] to i64
; INTERLEAVE-NEXT:    [[TMP3:%.*]] = ptrtoint ptr [[M:%.*]] to i64
; INTERLEAVE-NEXT:    [[CMP17:%.*]] = icmp sgt i64 [[N:%.*]], 0
; INTERLEAVE-NEXT:    br i1 [[CMP17]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; INTERLEAVE:       for.body.preheader:
; INTERLEAVE-NEXT:    [[TMP4:%.*]] = xor i64 [[N]], -1
; INTERLEAVE-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP6:%.*]] = icmp ugt i64 [[TMP5]], [[TMP4]]
; INTERLEAVE-NEXT:    br i1 [[TMP6]], label [[SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; INTERLEAVE:       vector.memcheck:
; INTERLEAVE-NEXT:    [[TMP7:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP8:%.*]] = shl i64 [[TMP7]], 5
; INTERLEAVE-NEXT:    [[TMP9:%.*]] = sub i64 [[TMP3]], [[TMP2]]
; INTERLEAVE-NEXT:    [[DIFF_CHECK:%.*]] = icmp ult i64 [[TMP9]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP10:%.*]] = shl i64 [[TMP7]], 5
; INTERLEAVE-NEXT:    [[TMP11:%.*]] = sub i64 [[TMP2]], [[TMP0]]
; INTERLEAVE-NEXT:    [[DIFF_CHECK1:%.*]] = icmp ult i64 [[TMP11]], [[TMP10]]
; INTERLEAVE-NEXT:    [[CONFLICT_RDX:%.*]] = or i1 [[DIFF_CHECK]], [[DIFF_CHECK1]]
; INTERLEAVE-NEXT:    [[TMP12:%.*]] = shl i64 [[TMP7]], 5
; INTERLEAVE-NEXT:    [[TMP13:%.*]] = sub i64 [[TMP2]], [[TMP1]]
; INTERLEAVE-NEXT:    [[DIFF_CHECK2:%.*]] = icmp ult i64 [[TMP13]], [[TMP12]]
; INTERLEAVE-NEXT:    [[CONFLICT_RDX3:%.*]] = or i1 [[CONFLICT_RDX]], [[DIFF_CHECK2]]
; INTERLEAVE-NEXT:    [[TMP14:%.*]] = shl i64 [[TMP7]], 5
; INTERLEAVE-NEXT:    [[TMP15:%.*]] = sub i64 [[TMP3]], [[TMP0]]
; INTERLEAVE-NEXT:    [[DIFF_CHECK4:%.*]] = icmp ult i64 [[TMP15]], [[TMP14]]
; INTERLEAVE-NEXT:    [[CONFLICT_RDX5:%.*]] = or i1 [[CONFLICT_RDX3]], [[DIFF_CHECK4]]
; INTERLEAVE-NEXT:    [[TMP16:%.*]] = shl i64 [[TMP7]], 5
; INTERLEAVE-NEXT:    [[TMP17:%.*]] = sub i64 [[TMP3]], [[TMP1]]
; INTERLEAVE-NEXT:    [[DIFF_CHECK6:%.*]] = icmp ult i64 [[TMP17]], [[TMP16]]
; INTERLEAVE-NEXT:    [[CONFLICT_RDX7:%.*]] = or i1 [[CONFLICT_RDX5]], [[DIFF_CHECK6]]
; INTERLEAVE-NEXT:    br i1 [[CONFLICT_RDX7]], label [[SCALAR_PH]], label [[VECTOR_PH:%.*]]
; INTERLEAVE:       vector.ph:
; INTERLEAVE-NEXT:    br label [[VECTOR_BODY:%.*]]
; INTERLEAVE:       vector.body:
; INTERLEAVE-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; INTERLEAVE-NEXT:    [[TMP18:%.*]] = sub i64 [[N]], [[INDEX]]
; INTERLEAVE-NEXT:    [[TMP19:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP18]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP20:%.*]] = trunc i64 [[TMP19]] to i32
; INTERLEAVE-NEXT:    [[TMP21:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[INDEX]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP21]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP22:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[INDEX]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD10:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP22]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[VP_OP:%.*]] = call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD]], <vscale x 1 x double> [[VP_OP_LOAD10]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP23:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[INDEX]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP]], ptr [[TMP23]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP24:%.*]] = bitcast <vscale x 1 x double> [[VP_OP_LOAD]] to <vscale x 1 x i64>
; INTERLEAVE-NEXT:    [[TMP25:%.*]] = bitcast <vscale x 1 x double> [[VP_OP_LOAD10]] to <vscale x 1 x i64>
; INTERLEAVE-NEXT:    [[VP_OP11:%.*]] = call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> [[TMP25]], <vscale x 1 x i64> [[TMP24]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP26:%.*]] = getelementptr inbounds i64, ptr [[M]], i64 [[INDEX]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv1i64.p0(<vscale x 1 x i64> [[VP_OP11]], ptr [[TMP26]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP27:%.*]] = and i64 [[TMP19]], 4294967295
; INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP27]]
; INTERLEAVE-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N]]
; INTERLEAVE-NEXT:    br i1 [[TMP28]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; INTERLEAVE:       middle.block:
; INTERLEAVE-NEXT:    br i1 true, label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; INTERLEAVE:       scalar.ph:
; INTERLEAVE-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ], [ 0, [[VECTOR_MEMCHECK]] ]
; INTERLEAVE-NEXT:    br label [[FOR_BODY:%.*]]
; INTERLEAVE:       for.body:
; INTERLEAVE-NEXT:    [[I_018:%.*]] = phi i64 [ [[INC:%.*]], [[FOR_BODY]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; INTERLEAVE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[I_018]]
; INTERLEAVE-NEXT:    [[TMP29:%.*]] = load double, ptr [[ARRAYIDX]], align 8
; INTERLEAVE-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[I_018]]
; INTERLEAVE-NEXT:    [[TMP30:%.*]] = load double, ptr [[ARRAYIDX1]], align 8
; INTERLEAVE-NEXT:    [[ADD:%.*]] = fadd double [[TMP29]], [[TMP30]]
; INTERLEAVE-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[I_018]]
; INTERLEAVE-NEXT:    store double [[ADD]], ptr [[ARRAYIDX2]], align 8
; INTERLEAVE-NEXT:    [[TMP31:%.*]] = bitcast double [[TMP29]] to i64
; INTERLEAVE-NEXT:    [[TMP32:%.*]] = bitcast double [[TMP30]] to i64
; INTERLEAVE-NEXT:    [[ADD5:%.*]] = add nsw i64 [[TMP32]], [[TMP31]]
; INTERLEAVE-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds i64, ptr [[M]], i64 [[I_018]]
; INTERLEAVE-NEXT:    store i64 [[ADD5]], ptr [[ARRAYIDX6]], align 8
; INTERLEAVE-NEXT:    [[INC]] = add nuw nsw i64 [[I_018]], 1
; INTERLEAVE-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INC]], [[N]]
; INTERLEAVE-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
; INTERLEAVE:       for.end.loopexit:
; INTERLEAVE-NEXT:    br label [[FOR_END]]
; INTERLEAVE:       for.end:
; INTERLEAVE-NEXT:    ret void
;
entry:
  %0 = bitcast i8* %a to double*
  %1 = bitcast i8* %b to double*
  %2 = bitcast i8* %c to double*
  %3 = bitcast i8* %m to i64*
  %cmp17 = icmp sgt i64 %N, 0
  br i1 %cmp17, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.018 = phi i64 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds double, double* %0, i64 %i.018
  %4 = load double, double* %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds double, double* %1, i64 %i.018
  %5 = load double, double* %arrayidx1, align 8
  %add = fadd double %4, %5
  %arrayidx2 = getelementptr inbounds double, double* %2, i64 %i.018
  store double %add, double* %arrayidx2, align 8
  %6 = bitcast double %4 to i64
  %7 = bitcast double %5 to i64
  %add5 = add nsw i64 %7, %6
  %arrayidx6 = getelementptr inbounds i64, i64* %3, i64 %i.018
  store i64 %add5, i64* %arrayidx6, align 8
  %inc = add nuw nsw i64 %i.018, 1
  %exitcond.not = icmp eq i64 %inc, %N
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
