; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -S -loop-vectorize -riscv-v-vector-bits-min=64 -instcombine -simplifycfg < %s -o - \
; RUN:    | FileCheck --check-prefix=GATHER %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -S -loop-vectorize -riscv-v-vector-bits-min=64 -instcombine -simplifycfg < %s -o - \
; RUN:    -interleave-no-scalar-epilogue=true \
; RUN:    | FileCheck --check-prefix=GATHER-INTERLEAVE %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -vectorizer-use-vp-strided-load-store \
; RUN:    -S -loop-vectorize -riscv-v-vector-bits-min=64 -instcombine -simplifycfg < %s -o - \
; RUN:    | FileCheck --check-prefix=STRIDED %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -vectorizer-use-vp-strided-load-store \
; RUN:    -interleave-no-scalar-epilogue=true \
; RUN:    -S -loop-vectorize -riscv-v-vector-bits-min=64 -instcombine -simplifycfg < %s -o - \
; RUN:    | FileCheck --check-prefix=STRIDED-INTERLEAVE %s

; Tests from https://reviews.llvm.org/D107790
;
; void gather(signed char * __restrict  A, signed char * __restrict B) {
;   for (int i = 0; i != 1024; ++i)
;       A[i] += B[i * 5];
; }

define dso_local void @gather(i8* noalias nocapture %A, i8* noalias nocapture readonly %B) {
; GATHER-LABEL: @gather(
; GATHER-NEXT:  entry:
; GATHER-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; GATHER-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 3
; GATHER-NEXT:    [[TMP2:%.*]] = icmp ugt i64 [[TMP1]], -1025
; GATHER-NEXT:    br i1 [[TMP2]], label [[FOR_BODY:%.*]], label [[VECTOR_PH:%.*]]
; GATHER:       vector.ph:
; GATHER-NEXT:    [[TMP3:%.*]] = call <vscale x 8 x i64> @llvm.experimental.stepvector.nxv8i64()
; GATHER-NEXT:    br label [[VECTOR_BODY:%.*]]
; GATHER:       vector.body:
; GATHER-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; GATHER-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 8 x i64> [ [[TMP3]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; GATHER-NEXT:    [[TMP4:%.*]] = sub i64 1024, [[INDEX]]
; GATHER-NEXT:    [[TMP5:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 0, i64 0)
; GATHER-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; GATHER-NEXT:    [[TMP7:%.*]] = and i64 [[TMP5]], 4294967295
; GATHER-NEXT:    [[DOTSPLATINSERT1:%.*]] = insertelement <vscale x 8 x i64> poison, i64 [[TMP7]], i64 0
; GATHER-NEXT:    [[DOTSPLAT2:%.*]] = shufflevector <vscale x 8 x i64> [[DOTSPLATINSERT1]], <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer
; GATHER-NEXT:    [[VP_OP:%.*]] = call <vscale x 8 x i64> @llvm.vp.mul.nxv8i64(<vscale x 8 x i64> [[VEC_IND]], <vscale x 8 x i64> shufflevector (<vscale x 8 x i64> insertelement (<vscale x 8 x i64> poison, i64 5, i32 0), <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer), <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; GATHER-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, i8* [[B:%.*]], <vscale x 8 x i64> [[VP_OP]]
; GATHER-NEXT:    [[VP_GATHER:%.*]] = call <vscale x 8 x i8> @llvm.vp.gather.nxv8i8.nxv8p0i8(<vscale x 8 x i8*> [[TMP8]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; GATHER-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i8, i8* [[A:%.*]], i64 [[INDEX]]
; GATHER-NEXT:    [[TMP10:%.*]] = bitcast i8* [[TMP9]] to <vscale x 8 x i8>*
; GATHER-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0nxv8i8(<vscale x 8 x i8>* [[TMP10]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; GATHER-NEXT:    [[VP_OP3:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD]], <vscale x 8 x i8> [[VP_GATHER]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; GATHER-NEXT:    [[TMP11:%.*]] = bitcast i8* [[TMP9]] to <vscale x 8 x i8>*
; GATHER-NEXT:    call void @llvm.vp.store.nxv8i8.p0nxv8i8(<vscale x 8 x i8> [[VP_OP3]], <vscale x 8 x i8>* [[TMP11]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; GATHER-NEXT:    [[TMP12:%.*]] = and i64 [[TMP5]], 4294967295
; GATHER-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP12]]
; GATHER-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 8 x i64> [[VEC_IND]], [[DOTSPLAT2]]
; GATHER-NEXT:    [[TMP13:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; GATHER-NEXT:    br i1 [[TMP13]], label [[FOR_COND_CLEANUP:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; GATHER:       for.cond.cleanup:
; GATHER-NEXT:    ret void
; GATHER:       for.body:
; GATHER-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY:%.*]] ]
; GATHER-NEXT:    [[TMP14:%.*]] = mul nuw nsw i64 [[INDVARS_IV]], 5
; GATHER-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[B]], i64 [[TMP14]]
; GATHER-NEXT:    [[TMP15:%.*]] = load i8, i8* [[ARRAYIDX]], align 1
; GATHER-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, i8* [[A]], i64 [[INDVARS_IV]]
; GATHER-NEXT:    [[TMP16:%.*]] = load i8, i8* [[ARRAYIDX2]], align 1
; GATHER-NEXT:    [[ADD:%.*]] = add i8 [[TMP16]], [[TMP15]]
; GATHER-NEXT:    store i8 [[ADD]], i8* [[ARRAYIDX2]], align 1
; GATHER-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; GATHER-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 1024
; GATHER-NEXT:    br i1 [[CMP_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
;
; GATHER-INTERLEAVE-LABEL: @gather(
; GATHER-INTERLEAVE-NEXT:  entry:
; GATHER-INTERLEAVE-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; GATHER-INTERLEAVE-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 4
; GATHER-INTERLEAVE-NEXT:    [[TMP2:%.*]] = icmp ugt i64 [[TMP1]], -1025
; GATHER-INTERLEAVE-NEXT:    br i1 [[TMP2]], label [[FOR_BODY:%.*]], label [[VECTOR_PH:%.*]]
; GATHER-INTERLEAVE:       vector.ph:
; GATHER-INTERLEAVE-NEXT:    [[TMP3:%.*]] = call <vscale x 8 x i64> @llvm.experimental.stepvector.nxv8i64()
; GATHER-INTERLEAVE-NEXT:    br label [[VECTOR_BODY:%.*]]
; GATHER-INTERLEAVE:       vector.body:
; GATHER-INTERLEAVE-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; GATHER-INTERLEAVE-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 8 x i64> [ [[TMP3]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; GATHER-INTERLEAVE-NEXT:    [[TMP4:%.*]] = sub i64 1024, [[INDEX]]
; GATHER-INTERLEAVE-NEXT:    [[TMP5:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 0, i64 0)
; GATHER-INTERLEAVE-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; GATHER-INTERLEAVE-NEXT:    [[TMP7:%.*]] = sub i64 [[TMP4]], [[TMP5]]
; GATHER-INTERLEAVE-NEXT:    [[TMP8:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP7]], i64 0, i64 0)
; GATHER-INTERLEAVE-NEXT:    [[TMP9:%.*]] = trunc i64 [[TMP8]] to i32
; GATHER-INTERLEAVE-NEXT:    [[TMP10:%.*]] = and i64 [[TMP5]], 4294967295
; GATHER-INTERLEAVE-NEXT:    [[DOTSPLATINSERT1:%.*]] = insertelement <vscale x 8 x i64> poison, i64 [[TMP10]], i64 0
; GATHER-INTERLEAVE-NEXT:    [[DOTSPLAT2:%.*]] = shufflevector <vscale x 8 x i64> [[DOTSPLATINSERT1]], <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer
; GATHER-INTERLEAVE-NEXT:    [[STEP_ADD:%.*]] = add <vscale x 8 x i64> [[VEC_IND]], [[DOTSPLAT2]]
; GATHER-INTERLEAVE-NEXT:    [[TMP11:%.*]] = and i64 [[TMP8]], 4294967295
; GATHER-INTERLEAVE-NEXT:    [[DOTSPLATINSERT3:%.*]] = insertelement <vscale x 8 x i64> poison, i64 [[TMP11]], i64 0
; GATHER-INTERLEAVE-NEXT:    [[DOTSPLAT4:%.*]] = shufflevector <vscale x 8 x i64> [[DOTSPLATINSERT3]], <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer
; GATHER-INTERLEAVE-NEXT:    [[VP_OP:%.*]] = call <vscale x 8 x i64> @llvm.vp.mul.nxv8i64(<vscale x 8 x i64> [[VEC_IND]], <vscale x 8 x i64> shufflevector (<vscale x 8 x i64> insertelement (<vscale x 8 x i64> poison, i64 5, i32 0), <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer), <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; GATHER-INTERLEAVE-NEXT:    [[VP_OP6:%.*]] = call <vscale x 8 x i64> @llvm.vp.mul.nxv8i64(<vscale x 8 x i64> [[STEP_ADD]], <vscale x 8 x i64> shufflevector (<vscale x 8 x i64> insertelement (<vscale x 8 x i64> poison, i64 5, i32 0), <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer), <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP9]])
; GATHER-INTERLEAVE-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i8, i8* [[B:%.*]], <vscale x 8 x i64> [[VP_OP]]
; GATHER-INTERLEAVE-NEXT:    [[TMP13:%.*]] = getelementptr inbounds i8, i8* [[B]], <vscale x 8 x i64> [[VP_OP6]]
; GATHER-INTERLEAVE-NEXT:    [[VP_GATHER:%.*]] = call <vscale x 8 x i8> @llvm.vp.gather.nxv8i8.nxv8p0i8(<vscale x 8 x i8*> [[TMP12]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; GATHER-INTERLEAVE-NEXT:    [[VP_GATHER7:%.*]] = call <vscale x 8 x i8> @llvm.vp.gather.nxv8i8.nxv8p0i8(<vscale x 8 x i8*> [[TMP13]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP9]])
; GATHER-INTERLEAVE-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i8, i8* [[A:%.*]], i64 [[INDEX]]
; GATHER-INTERLEAVE-NEXT:    [[TMP15:%.*]] = bitcast i8* [[TMP14]] to <vscale x 8 x i8>*
; GATHER-INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0nxv8i8(<vscale x 8 x i8>* [[TMP15]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; GATHER-INTERLEAVE-NEXT:    [[TMP16:%.*]] = sext i32 [[TMP6]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i8, i8* [[TMP14]], i64 [[TMP16]]
; GATHER-INTERLEAVE-NEXT:    [[TMP18:%.*]] = bitcast i8* [[TMP17]] to <vscale x 8 x i8>*
; GATHER-INTERLEAVE-NEXT:    [[VP_OP_LOAD8:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0nxv8i8(<vscale x 8 x i8>* [[TMP18]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP9]])
; GATHER-INTERLEAVE-NEXT:    [[VP_OP9:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD]], <vscale x 8 x i8> [[VP_GATHER]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; GATHER-INTERLEAVE-NEXT:    [[VP_OP10:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD8]], <vscale x 8 x i8> [[VP_GATHER7]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP9]])
; GATHER-INTERLEAVE-NEXT:    [[TMP19:%.*]] = bitcast i8* [[TMP14]] to <vscale x 8 x i8>*
; GATHER-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0nxv8i8(<vscale x 8 x i8> [[VP_OP9]], <vscale x 8 x i8>* [[TMP19]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; GATHER-INTERLEAVE-NEXT:    [[TMP20:%.*]] = sext i32 [[TMP6]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP21:%.*]] = getelementptr inbounds i8, i8* [[TMP14]], i64 [[TMP20]]
; GATHER-INTERLEAVE-NEXT:    [[TMP22:%.*]] = bitcast i8* [[TMP21]] to <vscale x 8 x i8>*
; GATHER-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0nxv8i8(<vscale x 8 x i8> [[VP_OP10]], <vscale x 8 x i8>* [[TMP22]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP9]])
; GATHER-INTERLEAVE-NEXT:    [[TMP23:%.*]] = add i32 [[TMP6]], [[TMP9]]
; GATHER-INTERLEAVE-NEXT:    [[TMP24:%.*]] = zext i32 [[TMP23]] to i64
; GATHER-INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP24]]
; GATHER-INTERLEAVE-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 8 x i64> [[STEP_ADD]], [[DOTSPLAT4]]
; GATHER-INTERLEAVE-NEXT:    [[TMP25:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; GATHER-INTERLEAVE-NEXT:    br i1 [[TMP25]], label [[FOR_COND_CLEANUP:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; GATHER-INTERLEAVE:       for.cond.cleanup:
; GATHER-INTERLEAVE-NEXT:    ret void
; GATHER-INTERLEAVE:       for.body:
; GATHER-INTERLEAVE-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY:%.*]] ]
; GATHER-INTERLEAVE-NEXT:    [[TMP26:%.*]] = mul nuw nsw i64 [[INDVARS_IV]], 5
; GATHER-INTERLEAVE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[B]], i64 [[TMP26]]
; GATHER-INTERLEAVE-NEXT:    [[TMP27:%.*]] = load i8, i8* [[ARRAYIDX]], align 1
; GATHER-INTERLEAVE-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, i8* [[A]], i64 [[INDVARS_IV]]
; GATHER-INTERLEAVE-NEXT:    [[TMP28:%.*]] = load i8, i8* [[ARRAYIDX2]], align 1
; GATHER-INTERLEAVE-NEXT:    [[ADD:%.*]] = add i8 [[TMP28]], [[TMP27]]
; GATHER-INTERLEAVE-NEXT:    store i8 [[ADD]], i8* [[ARRAYIDX2]], align 1
; GATHER-INTERLEAVE-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; GATHER-INTERLEAVE-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 1024
; GATHER-INTERLEAVE-NEXT:    br i1 [[CMP_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
;
; STRIDED-LABEL: @gather(
; STRIDED-NEXT:  entry:
; STRIDED-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; STRIDED-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 3
; STRIDED-NEXT:    [[TMP2:%.*]] = icmp ugt i64 [[TMP1]], -1025
; STRIDED-NEXT:    br i1 [[TMP2]], label [[FOR_BODY:%.*]], label [[VECTOR_BODY:%.*]]
; STRIDED:       vector.body:
; STRIDED-NEXT:    [[INDEX:%.*]] = phi i64 [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ], [ 0, [[ENTRY:%.*]] ]
; STRIDED-NEXT:    [[TMP3:%.*]] = sub i64 1024, [[INDEX]]
; STRIDED-NEXT:    [[TMP4:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP3]], i64 0, i64 0)
; STRIDED-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP4]] to i32
; STRIDED-NEXT:    [[TMP6:%.*]] = mul i64 [[INDEX]], 5
; STRIDED-NEXT:    [[TMP7:%.*]] = getelementptr i8, i8* [[B:%.*]], i64 [[TMP6]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.strided.load.nxv8i8.p0i8.i64(i8* [[TMP7]], i64 5, <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; STRIDED-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, i8* [[A:%.*]], i64 [[INDEX]]
; STRIDED-NEXT:    [[TMP9:%.*]] = bitcast i8* [[TMP8]] to <vscale x 8 x i8>*
; STRIDED-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0nxv8i8(<vscale x 8 x i8>* [[TMP9]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; STRIDED-NEXT:    [[VP_OP3:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD]], <vscale x 8 x i8> [[VP_STRIDED_LOAD]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; STRIDED-NEXT:    [[TMP10:%.*]] = bitcast i8* [[TMP8]] to <vscale x 8 x i8>*
; STRIDED-NEXT:    call void @llvm.vp.store.nxv8i8.p0nxv8i8(<vscale x 8 x i8> [[VP_OP3]], <vscale x 8 x i8>* [[TMP10]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; STRIDED-NEXT:    [[TMP11:%.*]] = and i64 [[TMP4]], 4294967295
; STRIDED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP11]]
; STRIDED-NEXT:    [[TMP12:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; STRIDED-NEXT:    br i1 [[TMP12]], label [[FOR_COND_CLEANUP:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; STRIDED:       for.cond.cleanup:
; STRIDED-NEXT:    ret void
; STRIDED:       for.body:
; STRIDED-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY]] ]
; STRIDED-NEXT:    [[TMP13:%.*]] = mul nuw nsw i64 [[INDVARS_IV]], 5
; STRIDED-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[B]], i64 [[TMP13]]
; STRIDED-NEXT:    [[TMP14:%.*]] = load i8, i8* [[ARRAYIDX]], align 1
; STRIDED-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, i8* [[A]], i64 [[INDVARS_IV]]
; STRIDED-NEXT:    [[TMP15:%.*]] = load i8, i8* [[ARRAYIDX2]], align 1
; STRIDED-NEXT:    [[ADD:%.*]] = add i8 [[TMP15]], [[TMP14]]
; STRIDED-NEXT:    store i8 [[ADD]], i8* [[ARRAYIDX2]], align 1
; STRIDED-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; STRIDED-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 1024
; STRIDED-NEXT:    br i1 [[CMP_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
;
; STRIDED-INTERLEAVE-LABEL: @gather(
; STRIDED-INTERLEAVE-NEXT:  entry:
; STRIDED-INTERLEAVE-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; STRIDED-INTERLEAVE-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 4
; STRIDED-INTERLEAVE-NEXT:    [[TMP2:%.*]] = icmp ugt i64 [[TMP1]], -1025
; STRIDED-INTERLEAVE-NEXT:    br i1 [[TMP2]], label [[FOR_BODY:%.*]], label [[VECTOR_BODY:%.*]]
; STRIDED-INTERLEAVE:       vector.body:
; STRIDED-INTERLEAVE-NEXT:    [[INDEX:%.*]] = phi i64 [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ], [ 0, [[ENTRY:%.*]] ]
; STRIDED-INTERLEAVE-NEXT:    [[TMP3:%.*]] = sub i64 1024, [[INDEX]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP4:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP3]], i64 0, i64 0)
; STRIDED-INTERLEAVE-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP4]] to i32
; STRIDED-INTERLEAVE-NEXT:    [[TMP6:%.*]] = sub i64 [[TMP3]], [[TMP4]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP7:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP6]], i64 0, i64 0)
; STRIDED-INTERLEAVE-NEXT:    [[TMP8:%.*]] = trunc i64 [[TMP7]] to i32
; STRIDED-INTERLEAVE-NEXT:    [[TMP9:%.*]] = mul i64 [[INDEX]], 5
; STRIDED-INTERLEAVE-NEXT:    [[TMP10:%.*]] = getelementptr i8, i8* [[B:%.*]], i64 [[TMP9]]
; STRIDED-INTERLEAVE-NEXT:    [[VP_STRIDED_LOAD:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.strided.load.nxv8i8.p0i8.i64(i8* [[TMP10]], i64 5, <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP11:%.*]] = and i64 [[TMP4]], 4294967295
; STRIDED-INTERLEAVE-NEXT:    [[TMP12:%.*]] = mul nuw nsw i64 [[TMP11]], 5
; STRIDED-INTERLEAVE-NEXT:    [[TMP13:%.*]] = mul i64 [[INDEX]], [[TMP12]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP14:%.*]] = getelementptr i8, i8* [[B]], i64 [[TMP13]]
; STRIDED-INTERLEAVE-NEXT:    [[VP_STRIDED_LOAD7:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.strided.load.nxv8i8.p0i8.i64(i8* [[TMP14]], i64 5, <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP8]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i8, i8* [[A:%.*]], i64 [[INDEX]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP16:%.*]] = bitcast i8* [[TMP15]] to <vscale x 8 x i8>*
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0nxv8i8(<vscale x 8 x i8>* [[TMP16]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP17:%.*]] = sext i32 [[TMP5]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i8, i8* [[TMP15]], i64 [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP19:%.*]] = bitcast i8* [[TMP18]] to <vscale x 8 x i8>*
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP_LOAD8:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0nxv8i8(<vscale x 8 x i8>* [[TMP19]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP8]])
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP9:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD]], <vscale x 8 x i8> [[VP_STRIDED_LOAD]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP10:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD8]], <vscale x 8 x i8> [[VP_STRIDED_LOAD7]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP8]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP20:%.*]] = bitcast i8* [[TMP15]] to <vscale x 8 x i8>*
; STRIDED-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0nxv8i8(<vscale x 8 x i8> [[VP_OP9]], <vscale x 8 x i8>* [[TMP20]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP21:%.*]] = sext i32 [[TMP5]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP22:%.*]] = getelementptr inbounds i8, i8* [[TMP15]], i64 [[TMP21]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP23:%.*]] = bitcast i8* [[TMP22]] to <vscale x 8 x i8>*
; STRIDED-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0nxv8i8(<vscale x 8 x i8> [[VP_OP10]], <vscale x 8 x i8>* [[TMP23]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP8]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP24:%.*]] = add i32 [[TMP5]], [[TMP8]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP25:%.*]] = zext i32 [[TMP24]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP25]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP26:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; STRIDED-INTERLEAVE-NEXT:    br i1 [[TMP26]], label [[FOR_COND_CLEANUP:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; STRIDED-INTERLEAVE:       for.cond.cleanup:
; STRIDED-INTERLEAVE-NEXT:    ret void
; STRIDED-INTERLEAVE:       for.body:
; STRIDED-INTERLEAVE-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY]] ]
; STRIDED-INTERLEAVE-NEXT:    [[TMP27:%.*]] = mul nuw nsw i64 [[INDVARS_IV]], 5
; STRIDED-INTERLEAVE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[B]], i64 [[TMP27]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP28:%.*]] = load i8, i8* [[ARRAYIDX]], align 1
; STRIDED-INTERLEAVE-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, i8* [[A]], i64 [[INDVARS_IV]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP29:%.*]] = load i8, i8* [[ARRAYIDX2]], align 1
; STRIDED-INTERLEAVE-NEXT:    [[ADD:%.*]] = add i8 [[TMP29]], [[TMP28]]
; STRIDED-INTERLEAVE-NEXT:    store i8 [[ADD]], i8* [[ARRAYIDX2]], align 1
; STRIDED-INTERLEAVE-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; STRIDED-INTERLEAVE-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 1024
; STRIDED-INTERLEAVE-NEXT:    br i1 [[CMP_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %0 = mul nuw nsw i64 %indvars.iv, 5
  %arrayidx = getelementptr inbounds i8, i8* %B, i64 %0
  %1 = load i8, i8* %arrayidx, align 1
  %arrayidx2 = getelementptr inbounds i8, i8* %A, i64 %indvars.iv
  %2 = load i8, i8* %arrayidx2, align 1
  %add = add i8 %2, %1
  store i8 %add, i8* %arrayidx2, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp.not = icmp eq i64 %indvars.iv.next, 1024
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}
