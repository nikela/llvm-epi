; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+experimental-v -S -riscv-v-vector-bits-min=64 \
; RUN:   -loop-vectorize -debug-only=loop-vectorize < %s -o - | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

define i64 @foo(i64 %t7, i64 %b) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  t1:
; CHECK-NEXT:    [[A:%.*]] = add i64 1, [[B:%.*]]
; CHECK-NEXT:    [[TMP0:%.*]] = add i64 [[T7:%.*]], -1
; CHECK-NEXT:    [[TMP1:%.*]] = sub i64 [[TMP0]], [[B]]
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 8
; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP1]], [[TMP3]]
; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP4]], 8
; CHECK-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP1]], [[TMP5]]
; CHECK-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP1]], [[N_MOD_VF]]
; CHECK-NEXT:    [[IND_END:%.*]] = add i64 [[A]], [[N_VEC]]
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[OFFSET_IDX:%.*]] = add i64 [[A]], [[INDEX]]
; CHECK-NEXT:    [[TMP6:%.*]] = add i64 [[OFFSET_IDX]], 0
; CHECK-NEXT:    [[TMP7:%.*]] = add nuw nsw i64 [[TMP6]], 1
; CHECK-NEXT:    [[TMP8:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP9:%.*]] = mul i64 [[TMP8]], 8
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP9]]
; CHECK-NEXT:    [[TMP10:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP10]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP1]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[CMP_N]], label [[T9:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ [[A]], [[T1:%.*]] ]
; CHECK-NEXT:    br label [[T0:%.*]]
; CHECK:       t0:
; CHECK-NEXT:    [[T12:%.*]] = phi i64 [ [[T11:%.*]], [[T0]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; CHECK-NEXT:    [[T11]] = add nuw nsw i64 [[T12]], 1
; CHECK-NEXT:    [[EXIT:%.*]] = icmp eq i64 [[T11]], [[T7]]
; CHECK-NEXT:    br i1 [[EXIT]], label [[T9]], label [[T0]], !llvm.loop [[LOOP2:![0-9]+]]
; CHECK:       t9:
; CHECK-NEXT:    [[T11_LCSSA:%.*]] = phi i64 [ [[T11]], [[T0]] ], [ [[IND_END]], [[MIDDLE_BLOCK]] ]
; CHECK-NEXT:    ret i64 [[T11_LCSSA]]
;
t1:
  %a = add i64 1, %b
  br label %t0

t0:                         ; preds = %t1, %t0
  %t12 = phi i64 [ %t11, %t0 ], [ %a, %t1 ]
  %t11 = add nuw nsw i64 %t12, 1
  %exit = icmp eq i64 %t11, %t7
  br i1 %exit, label %t9, label %t0

  t9:
  ret i64 %t11
}
