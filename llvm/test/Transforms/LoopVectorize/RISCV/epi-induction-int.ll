; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -O3 < %s -o - \
; RUN:    | FileCheck %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 -interleave-no-scalar-epilogue=true \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -O3 < %s -o - \
; RUN:    | FileCheck %s --check-prefix=INTERLEAVE
; ModuleID = 'induction-int.c'
source_filename = "induction-int.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128-v128:128:128-v256:128:128-v512:128:128-v1024:128:128"
target triple = "riscv64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind
define dso_local void @induction_float(i32 signext %N, i32* noalias nocapture %a, i32 signext %x) local_unnamed_addr {
; CHECK-LABEL: @induction_float(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP6]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-NEXT:    [[TMP0:%.*]] = tail call <vscale x 2 x i32> @llvm.experimental.stepvector.nxv2i32()
; CHECK-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X:%.*]], i64 0
; CHECK-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP1:%.*]] = mul <vscale x 2 x i32> [[TMP0]], [[DOTSPLAT]]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT8:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT9:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT8]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 2 x i32> [ [[TMP1]], [[FOR_BODY_PREHEADER]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP2:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; CHECK-NEXT:    [[TMP3:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP2]], i64 2, i64 0)
; CHECK-NEXT:    [[TMP4:%.*]] = trunc i64 [[TMP3]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = mul i32 [[TMP4]], [[X]]
; CHECK-NEXT:    [[DOTSPLATINSERT4:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TMP5]], i64 0
; CHECK-NEXT:    [[DOTSPLAT5:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT4]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-NEXT:    [[VP_OP:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VEC_IND]], <vscale x 2 x i32> [[BROADCAST_SPLAT9]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP4]])
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds i32, ptr [[A:%.*]], i64 [[INDEX]]
; CHECK-NEXT:    [[VP_OP_LOAD:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP6]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP4]])
; CHECK-NEXT:    [[VP_OP10:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i32> [[VP_OP]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP4]])
; CHECK-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP10]], ptr [[TMP6]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = and i64 [[TMP3]], 4294967295
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP7]]
; CHECK-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 2 x i32> [[VEC_IND]], [[DOTSPLAT5]]
; CHECK-NEXT:    [[TMP8:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[TMP8]], label [[FOR_END]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
; INTERLEAVE-LABEL: @induction_float(
; INTERLEAVE-NEXT:  entry:
; INTERLEAVE-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[N:%.*]], 0
; INTERLEAVE-NEXT:    br i1 [[CMP6]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; INTERLEAVE:       for.body.preheader:
; INTERLEAVE-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; INTERLEAVE-NEXT:    [[TMP0:%.*]] = tail call <vscale x 2 x i32> @llvm.experimental.stepvector.nxv2i32()
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X:%.*]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP1:%.*]] = mul <vscale x 2 x i32> [[TMP0]], [[DOTSPLAT]]
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT57:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT58:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT57]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT59:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT60:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT59]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT62:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT63:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT62]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT65:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT66:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT65]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT68:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT69:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT68]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT71:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT72:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT71]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT74:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT75:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT74]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT77:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT78:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT77]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    br label [[VECTOR_BODY:%.*]]
; INTERLEAVE:       vector.body:
; INTERLEAVE-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; INTERLEAVE-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 2 x i32> [ [[TMP1]], [[FOR_BODY_PREHEADER]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; INTERLEAVE-NEXT:    [[TMP2:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; INTERLEAVE-NEXT:    [[TMP3:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP2]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP4:%.*]] = trunc i64 [[TMP3]] to i32
; INTERLEAVE-NEXT:    [[TMP5:%.*]] = sub i64 [[TMP2]], [[TMP3]]
; INTERLEAVE-NEXT:    [[TMP6:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP5]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP7:%.*]] = trunc i64 [[TMP6]] to i32
; INTERLEAVE-NEXT:    [[TMP8:%.*]] = sub i64 [[TMP5]], [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP9:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP8]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP10:%.*]] = trunc i64 [[TMP9]] to i32
; INTERLEAVE-NEXT:    [[TMP11:%.*]] = sub i64 [[TMP8]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP12:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP11]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP13:%.*]] = trunc i64 [[TMP12]] to i32
; INTERLEAVE-NEXT:    [[TMP14:%.*]] = sub i64 [[TMP11]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP15:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP14]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP16:%.*]] = trunc i64 [[TMP15]] to i32
; INTERLEAVE-NEXT:    [[TMP17:%.*]] = sub i64 [[TMP14]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP18:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP17]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP19:%.*]] = trunc i64 [[TMP18]] to i32
; INTERLEAVE-NEXT:    [[TMP20:%.*]] = sub i64 [[TMP17]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP21:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP20]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP22:%.*]] = trunc i64 [[TMP21]] to i32
; INTERLEAVE-NEXT:    [[TMP23:%.*]] = sub i64 [[TMP20]], [[TMP21]]
; INTERLEAVE-NEXT:    [[TMP24:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP23]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP25:%.*]] = trunc i64 [[TMP24]] to i32
; INTERLEAVE-NEXT:    [[TMP26:%.*]] = mul i32 [[TMP4]], [[X]]
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT4:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TMP26]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT5:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT4]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[STEP_ADD:%.*]] = add <vscale x 2 x i32> [[VEC_IND]], [[DOTSPLAT5]]
; INTERLEAVE-NEXT:    [[TMP27:%.*]] = mul i32 [[TMP7]], [[X]]
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT6:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TMP27]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT7:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT6]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[STEP_ADD8:%.*]] = add <vscale x 2 x i32> [[STEP_ADD]], [[DOTSPLAT7]]
; INTERLEAVE-NEXT:    [[TMP28:%.*]] = mul i32 [[TMP10]], [[X]]
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT9:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TMP28]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT10:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT9]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[STEP_ADD11:%.*]] = add <vscale x 2 x i32> [[STEP_ADD8]], [[DOTSPLAT10]]
; INTERLEAVE-NEXT:    [[TMP29:%.*]] = mul i32 [[TMP13]], [[X]]
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT12:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TMP29]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT13:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT12]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[STEP_ADD14:%.*]] = add <vscale x 2 x i32> [[STEP_ADD11]], [[DOTSPLAT13]]
; INTERLEAVE-NEXT:    [[TMP30:%.*]] = mul i32 [[TMP16]], [[X]]
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT15:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TMP30]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT16:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT15]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[STEP_ADD17:%.*]] = add <vscale x 2 x i32> [[STEP_ADD14]], [[DOTSPLAT16]]
; INTERLEAVE-NEXT:    [[TMP31:%.*]] = mul i32 [[TMP19]], [[X]]
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT18:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TMP31]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT19:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT18]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[STEP_ADD20:%.*]] = add <vscale x 2 x i32> [[STEP_ADD17]], [[DOTSPLAT19]]
; INTERLEAVE-NEXT:    [[TMP32:%.*]] = mul i32 [[TMP22]], [[X]]
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT21:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TMP32]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT22:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT21]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[STEP_ADD23:%.*]] = add <vscale x 2 x i32> [[STEP_ADD20]], [[DOTSPLAT22]]
; INTERLEAVE-NEXT:    [[TMP33:%.*]] = mul i32 [[TMP25]], [[X]]
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT24:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TMP33]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT25:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT24]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[VP_OP:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VEC_IND]], <vscale x 2 x i32> [[BROADCAST_SPLAT58]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP4]])
; INTERLEAVE-NEXT:    [[VP_OP61:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD]], <vscale x 2 x i32> [[BROADCAST_SPLAT60]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]])
; INTERLEAVE-NEXT:    [[VP_OP64:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD8]], <vscale x 2 x i32> [[BROADCAST_SPLAT63]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP10]])
; INTERLEAVE-NEXT:    [[VP_OP67:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD11]], <vscale x 2 x i32> [[BROADCAST_SPLAT66]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP13]])
; INTERLEAVE-NEXT:    [[VP_OP70:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD14]], <vscale x 2 x i32> [[BROADCAST_SPLAT69]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP16]])
; INTERLEAVE-NEXT:    [[VP_OP73:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD17]], <vscale x 2 x i32> [[BROADCAST_SPLAT72]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP19]])
; INTERLEAVE-NEXT:    [[VP_OP76:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD20]], <vscale x 2 x i32> [[BROADCAST_SPLAT75]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP22]])
; INTERLEAVE-NEXT:    [[VP_OP79:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD23]], <vscale x 2 x i32> [[BROADCAST_SPLAT78]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP25]])
; INTERLEAVE-NEXT:    [[TMP34:%.*]] = getelementptr inbounds i32, ptr [[A:%.*]], i64 [[INDEX]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP34]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP4]])
; INTERLEAVE-NEXT:    [[SEXT:%.*]] = shl i64 [[TMP3]], 32
; INTERLEAVE-NEXT:    [[TMP35:%.*]] = ashr exact i64 [[SEXT]], 32
; INTERLEAVE-NEXT:    [[TMP36:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP35]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD80:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP36]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]])
; INTERLEAVE-NEXT:    [[TMP37:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[SEXT95:%.*]] = shl i64 [[TMP37]], 32
; INTERLEAVE-NEXT:    [[TMP38:%.*]] = ashr exact i64 [[SEXT95]], 32
; INTERLEAVE-NEXT:    [[TMP39:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP38]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD81:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP39]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP10]])
; INTERLEAVE-NEXT:    [[TMP40:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP41:%.*]] = add i64 [[TMP40]], [[TMP9]]
; INTERLEAVE-NEXT:    [[SEXT96:%.*]] = shl i64 [[TMP41]], 32
; INTERLEAVE-NEXT:    [[TMP42:%.*]] = ashr exact i64 [[SEXT96]], 32
; INTERLEAVE-NEXT:    [[TMP43:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP42]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD82:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP43]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP13]])
; INTERLEAVE-NEXT:    [[TMP44:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP45:%.*]] = add i64 [[TMP44]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP46:%.*]] = add i64 [[TMP45]], [[TMP12]]
; INTERLEAVE-NEXT:    [[SEXT97:%.*]] = shl i64 [[TMP46]], 32
; INTERLEAVE-NEXT:    [[TMP47:%.*]] = ashr exact i64 [[SEXT97]], 32
; INTERLEAVE-NEXT:    [[TMP48:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP47]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD83:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP48]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP16]])
; INTERLEAVE-NEXT:    [[TMP49:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP50:%.*]] = add i64 [[TMP49]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP51:%.*]] = add i64 [[TMP50]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP52:%.*]] = add i64 [[TMP51]], [[TMP15]]
; INTERLEAVE-NEXT:    [[SEXT98:%.*]] = shl i64 [[TMP52]], 32
; INTERLEAVE-NEXT:    [[TMP53:%.*]] = ashr exact i64 [[SEXT98]], 32
; INTERLEAVE-NEXT:    [[TMP54:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP53]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD84:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP54]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP19]])
; INTERLEAVE-NEXT:    [[TMP55:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP56:%.*]] = add i64 [[TMP55]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP57:%.*]] = add i64 [[TMP56]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP58:%.*]] = add i64 [[TMP57]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP59:%.*]] = add i64 [[TMP58]], [[TMP18]]
; INTERLEAVE-NEXT:    [[SEXT99:%.*]] = shl i64 [[TMP59]], 32
; INTERLEAVE-NEXT:    [[TMP60:%.*]] = ashr exact i64 [[SEXT99]], 32
; INTERLEAVE-NEXT:    [[TMP61:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP60]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD85:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP61]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP22]])
; INTERLEAVE-NEXT:    [[TMP62:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP63:%.*]] = add i64 [[TMP62]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP64:%.*]] = add i64 [[TMP63]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP65:%.*]] = add i64 [[TMP64]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP66:%.*]] = add i64 [[TMP65]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP67:%.*]] = add i64 [[TMP66]], [[TMP21]]
; INTERLEAVE-NEXT:    [[SEXT100:%.*]] = shl i64 [[TMP67]], 32
; INTERLEAVE-NEXT:    [[TMP68:%.*]] = ashr exact i64 [[SEXT100]], 32
; INTERLEAVE-NEXT:    [[TMP69:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP68]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD86:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP69]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP25]])
; INTERLEAVE-NEXT:    [[VP_OP87:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i32> [[VP_OP]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP4]])
; INTERLEAVE-NEXT:    [[VP_OP88:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD80]], <vscale x 2 x i32> [[VP_OP61]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]])
; INTERLEAVE-NEXT:    [[VP_OP89:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD81]], <vscale x 2 x i32> [[VP_OP64]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP10]])
; INTERLEAVE-NEXT:    [[VP_OP90:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD82]], <vscale x 2 x i32> [[VP_OP67]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP13]])
; INTERLEAVE-NEXT:    [[VP_OP91:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD83]], <vscale x 2 x i32> [[VP_OP70]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP16]])
; INTERLEAVE-NEXT:    [[VP_OP92:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD84]], <vscale x 2 x i32> [[VP_OP73]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP19]])
; INTERLEAVE-NEXT:    [[VP_OP93:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD85]], <vscale x 2 x i32> [[VP_OP76]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP22]])
; INTERLEAVE-NEXT:    [[VP_OP94:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD86]], <vscale x 2 x i32> [[VP_OP79]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP25]])
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP87]], ptr [[TMP34]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP4]])
; INTERLEAVE-NEXT:    [[SEXT101:%.*]] = shl i64 [[TMP3]], 32
; INTERLEAVE-NEXT:    [[TMP70:%.*]] = ashr exact i64 [[SEXT101]], 32
; INTERLEAVE-NEXT:    [[TMP71:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP70]]
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP88]], ptr [[TMP71]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP7]])
; INTERLEAVE-NEXT:    [[TMP72:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[SEXT102:%.*]] = shl i64 [[TMP72]], 32
; INTERLEAVE-NEXT:    [[TMP73:%.*]] = ashr exact i64 [[SEXT102]], 32
; INTERLEAVE-NEXT:    [[TMP74:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP73]]
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP89]], ptr [[TMP74]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP10]])
; INTERLEAVE-NEXT:    [[TMP75:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP76:%.*]] = add i64 [[TMP75]], [[TMP9]]
; INTERLEAVE-NEXT:    [[SEXT103:%.*]] = shl i64 [[TMP76]], 32
; INTERLEAVE-NEXT:    [[TMP77:%.*]] = ashr exact i64 [[SEXT103]], 32
; INTERLEAVE-NEXT:    [[TMP78:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP77]]
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP90]], ptr [[TMP78]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP13]])
; INTERLEAVE-NEXT:    [[TMP79:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP80:%.*]] = add i64 [[TMP79]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP81:%.*]] = add i64 [[TMP80]], [[TMP12]]
; INTERLEAVE-NEXT:    [[SEXT104:%.*]] = shl i64 [[TMP81]], 32
; INTERLEAVE-NEXT:    [[TMP82:%.*]] = ashr exact i64 [[SEXT104]], 32
; INTERLEAVE-NEXT:    [[TMP83:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP82]]
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP91]], ptr [[TMP83]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP16]])
; INTERLEAVE-NEXT:    [[TMP84:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP85:%.*]] = add i64 [[TMP84]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP86:%.*]] = add i64 [[TMP85]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP87:%.*]] = add i64 [[TMP86]], [[TMP15]]
; INTERLEAVE-NEXT:    [[SEXT105:%.*]] = shl i64 [[TMP87]], 32
; INTERLEAVE-NEXT:    [[TMP88:%.*]] = ashr exact i64 [[SEXT105]], 32
; INTERLEAVE-NEXT:    [[TMP89:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP88]]
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP92]], ptr [[TMP89]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP19]])
; INTERLEAVE-NEXT:    [[TMP90:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP91:%.*]] = add i64 [[TMP90]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP92:%.*]] = add i64 [[TMP91]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP93:%.*]] = add i64 [[TMP92]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP94:%.*]] = add i64 [[TMP93]], [[TMP18]]
; INTERLEAVE-NEXT:    [[SEXT106:%.*]] = shl i64 [[TMP94]], 32
; INTERLEAVE-NEXT:    [[TMP95:%.*]] = ashr exact i64 [[SEXT106]], 32
; INTERLEAVE-NEXT:    [[TMP96:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP95]]
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP93]], ptr [[TMP96]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP22]])
; INTERLEAVE-NEXT:    [[TMP97:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP98:%.*]] = add i64 [[TMP97]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP99:%.*]] = add i64 [[TMP98]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP100:%.*]] = add i64 [[TMP99]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP101:%.*]] = add i64 [[TMP100]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP102:%.*]] = add i64 [[TMP101]], [[TMP21]]
; INTERLEAVE-NEXT:    [[SEXT107:%.*]] = shl i64 [[TMP102]], 32
; INTERLEAVE-NEXT:    [[TMP103:%.*]] = ashr exact i64 [[SEXT107]], 32
; INTERLEAVE-NEXT:    [[TMP104:%.*]] = getelementptr inbounds i32, ptr [[TMP34]], i64 [[TMP103]]
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP94]], ptr [[TMP104]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP25]])
; INTERLEAVE-NEXT:    [[TMP105:%.*]] = add i64 [[TMP3]], [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP106:%.*]] = add i64 [[TMP105]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP107:%.*]] = add i64 [[TMP106]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP108:%.*]] = add i64 [[TMP107]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP109:%.*]] = add i64 [[TMP108]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP110:%.*]] = add i64 [[TMP109]], [[TMP21]]
; INTERLEAVE-NEXT:    [[TMP111:%.*]] = add i64 [[TMP110]], [[TMP24]]
; INTERLEAVE-NEXT:    [[TMP112:%.*]] = and i64 [[TMP111]], 4294967295
; INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP112]]
; INTERLEAVE-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 2 x i32> [[STEP_ADD23]], [[DOTSPLAT25]]
; INTERLEAVE-NEXT:    [[TMP113:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[TMP113]], label [[FOR_END]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; INTERLEAVE:       for.end:
; INTERLEAVE-NEXT:    ret void
;
entry:
  %cmp6 = icmp sgt i32 %N, 0
  br i1 %cmp6, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %s.08 = phi i32 [ 0, %for.body.preheader ], [ %add, %for.body ]
  %add = add nsw i32 %s.08, %x
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4
  %mul = mul nsw i32 %0, %add
  store i32 %mul, i32* %arrayidx, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
