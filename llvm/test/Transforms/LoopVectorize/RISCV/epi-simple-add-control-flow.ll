; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -passes=loop-vectorize -vector-register-width-factor=8 -riscv-v-vector-bits-min=64 < %s -o - \
; RUN:    | FileCheck %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -passes=loop-vectorize -riscv-v-vector-bits-min=64 < %s -o - \
; RUN:    | FileCheck %s --check-prefix=CHECK1
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -interleave-no-scalar-epilogue=true \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -passes=loop-vectorize -riscv-v-vector-bits-min=64 < %s -o - \
; RUN:    | FileCheck %s --check-prefix=INTERLEAVE
; ModuleID = './simple-add-control-flow.c'
source_filename = "./simple-add-control-flow.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128-v128:128:128-v256:128:128-v512:128:128-v1024:128:128"
target triple = "riscv64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind
define dso_local void @vec_add(i32 signext %N, double* noalias nocapture %c, double* noalias nocapture readonly %a, double* noalias nocapture readonly %b, double* noalias nocapture %d) local_unnamed_addr {
; CHECK-LABEL: @vec_add(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP22:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP22]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-NEXT:    [[TMP0:%.*]] = sub i64 -1, [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 8
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ult i64 [[TMP0]], [[TMP2]]
; CHECK-NEXT:    br i1 [[TMP3]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], 1
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 8 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 8 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP4:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 3, i64 3)
; CHECK-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; CHECK-NEXT:    [[TMP7:%.*]] = add i64 [[INDEX]], 0
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <vscale x 8 x i64> poison, i64 [[INDEX]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <vscale x 8 x i64> [[BROADCAST_SPLATINSERT1]], <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP8:%.*]] = call <vscale x 8 x i64> @llvm.experimental.stepvector.nxv8i64()
; CHECK-NEXT:    [[TMP9:%.*]] = add <vscale x 8 x i64> zeroinitializer, [[TMP8]]
; CHECK-NEXT:    [[VEC_IV:%.*]] = add <vscale x 8 x i64> [[BROADCAST_SPLAT2]], [[TMP9]]
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ule <vscale x 8 x i64> [[VEC_IV]], [[BROADCAST_SPLAT]]
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds double, ptr [[C:%.*]], i64 [[TMP7]]
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds double, ptr [[TMP11]], i32 0
; CHECK-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 8 x double> @llvm.vp.load.nxv8f64.p0(ptr [[TMP12]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[VP_OP_FCMP:%.*]] = call <vscale x 8 x i1> @llvm.vp.fcmp.nxv8f64(<vscale x 8 x double> [[VP_OP_LOAD]], <vscale x 8 x double> shufflevector (<vscale x 8 x double> insertelement (<vscale x 8 x double> poison, double 3.000000e+00, i64 0), <vscale x 8 x double> poison, <vscale x 8 x i32> zeroinitializer), metadata !"olt", <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds double, ptr [[A:%.*]], i64 [[TMP7]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds double, ptr [[TMP13]], i32 0
; CHECK-NEXT:    [[VP_OP_LOAD3:%.*]] = call <vscale x 8 x double> @llvm.vp.load.nxv8f64.p0(ptr [[TMP14]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds double, ptr [[B:%.*]], i64 [[TMP7]]
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds double, ptr [[TMP15]], i32 0
; CHECK-NEXT:    [[VP_OP_LOAD4:%.*]] = call <vscale x 8 x double> @llvm.vp.load.nxv8f64.p0(ptr [[TMP16]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[VP_MASK_NOT:%.*]] = call <vscale x 8 x i1> @llvm.vp.xor.nxv8i1(<vscale x 8 x i1> [[VP_OP_FCMP]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[VP_MASK_SELECT:%.*]] = call <vscale x 8 x i1> @llvm.vp.and.nxv8i1(<vscale x 8 x i1> [[TMP10]], <vscale x 8 x i1> [[VP_MASK_NOT]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[VP_OP:%.*]] = call <vscale x 8 x double> @llvm.vp.fmul.nxv8f64(<vscale x 8 x double> [[VP_OP_LOAD3]], <vscale x 8 x double> [[VP_OP_LOAD4]], <vscale x 8 x i1> [[VP_MASK_SELECT]], i32 [[TMP6]])
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr inbounds double, ptr [[D:%.*]], i64 [[TMP7]]
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr inbounds double, ptr [[TMP17]], i32 0
; CHECK-NEXT:    call void @llvm.vp.store.nxv8f64.p0(<vscale x 8 x double> [[VP_OP]], ptr [[TMP18]], <vscale x 8 x i1> [[VP_MASK_SELECT]], i32 [[TMP6]])
; CHECK-NEXT:    [[VP_MASK_SELECT5:%.*]] = call <vscale x 8 x i1> @llvm.vp.and.nxv8i1(<vscale x 8 x i1> [[TMP10]], <vscale x 8 x i1> [[VP_OP_FCMP]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[VP_OP6:%.*]] = call <vscale x 8 x double> @llvm.vp.fadd.nxv8f64(<vscale x 8 x double> [[VP_OP_LOAD3]], <vscale x 8 x double> [[VP_OP_LOAD4]], <vscale x 8 x i1> [[VP_MASK_SELECT5]], i32 [[TMP6]])
; CHECK-NEXT:    call void @llvm.vp.store.nxv8f64.p0(<vscale x 8 x double> [[VP_OP6]], ptr [[TMP12]], <vscale x 8 x i1> [[VP_MASK_SELECT5]], i32 [[TMP6]])
; CHECK-NEXT:    [[TMP19:%.*]] = zext i32 [[TMP6]] to i64
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP19]]
; CHECK-NEXT:    [[TMP20:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[TMP20]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    br i1 true, label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC:%.*]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP21:%.*]] = load double, ptr [[ARRAYIDX]], align 8
; CHECK-NEXT:    [[CMP1:%.*]] = fcmp olt double [[TMP21]], 3.000000e+00
; CHECK-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP22:%.*]] = load double, ptr [[ARRAYIDX3]], align 8
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP23:%.*]] = load double, ptr [[ARRAYIDX5]], align 8
; CHECK-NEXT:    br i1 [[CMP1]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[TMP22]], [[TMP23]]
; CHECK-NEXT:    store double [[ADD]], ptr [[ARRAYIDX]], align 8
; CHECK-NEXT:    br label [[FOR_INC]]
; CHECK:       if.else:
; CHECK-NEXT:    [[MUL:%.*]] = fmul double [[TMP22]], [[TMP23]]
; CHECK-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds double, ptr [[D]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store double [[MUL]], ptr [[ARRAYIDX13]], align 8
; CHECK-NEXT:    br label [[FOR_INC]]
; CHECK:       for.inc:
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
; CHECK1-LABEL: @vec_add(
; CHECK1-NEXT:  entry:
; CHECK1-NEXT:    [[CMP22:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK1-NEXT:    br i1 [[CMP22]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK1:       for.body.preheader:
; CHECK1-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK1-NEXT:    [[TMP0:%.*]] = sub i64 -1, [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP2:%.*]] = icmp ult i64 [[TMP0]], [[TMP1]]
; CHECK1-NEXT:    br i1 [[TMP2]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK1:       vector.ph:
; CHECK1-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], 1
; CHECK1-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; CHECK1-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 1 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; CHECK1-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK1:       vector.body:
; CHECK1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK1-NEXT:    [[TMP3:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; CHECK1-NEXT:    [[TMP4:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP3]], i64 3, i64 0)
; CHECK1-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP4]] to i32
; CHECK1-NEXT:    [[TMP6:%.*]] = add i64 [[INDEX]], 0
; CHECK1-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[INDEX]], i64 0
; CHECK1-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <vscale x 1 x i64> [[BROADCAST_SPLATINSERT1]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; CHECK1-NEXT:    [[TMP7:%.*]] = call <vscale x 1 x i64> @llvm.experimental.stepvector.nxv1i64()
; CHECK1-NEXT:    [[TMP8:%.*]] = add <vscale x 1 x i64> zeroinitializer, [[TMP7]]
; CHECK1-NEXT:    [[VEC_IV:%.*]] = add <vscale x 1 x i64> [[BROADCAST_SPLAT2]], [[TMP8]]
; CHECK1-NEXT:    [[TMP9:%.*]] = icmp ule <vscale x 1 x i64> [[VEC_IV]], [[BROADCAST_SPLAT]]
; CHECK1-NEXT:    [[TMP10:%.*]] = getelementptr inbounds double, ptr [[C:%.*]], i64 [[TMP6]]
; CHECK1-NEXT:    [[TMP11:%.*]] = getelementptr inbounds double, ptr [[TMP10]], i32 0
; CHECK1-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP11]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP5]])
; CHECK1-NEXT:    [[VP_OP_FCMP:%.*]] = call <vscale x 1 x i1> @llvm.vp.fcmp.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD]], <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 3.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), metadata !"olt", <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP5]])
; CHECK1-NEXT:    [[TMP12:%.*]] = getelementptr inbounds double, ptr [[A:%.*]], i64 [[TMP6]]
; CHECK1-NEXT:    [[TMP13:%.*]] = getelementptr inbounds double, ptr [[TMP12]], i32 0
; CHECK1-NEXT:    [[VP_OP_LOAD3:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP13]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP5]])
; CHECK1-NEXT:    [[TMP14:%.*]] = getelementptr inbounds double, ptr [[B:%.*]], i64 [[TMP6]]
; CHECK1-NEXT:    [[TMP15:%.*]] = getelementptr inbounds double, ptr [[TMP14]], i32 0
; CHECK1-NEXT:    [[VP_OP_LOAD4:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP5]])
; CHECK1-NEXT:    [[VP_MASK_NOT:%.*]] = call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> [[VP_OP_FCMP]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP5]])
; CHECK1-NEXT:    [[VP_MASK_SELECT:%.*]] = call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> [[TMP9]], <vscale x 1 x i1> [[VP_MASK_NOT]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP5]])
; CHECK1-NEXT:    [[VP_OP:%.*]] = call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD3]], <vscale x 1 x double> [[VP_OP_LOAD4]], <vscale x 1 x i1> [[VP_MASK_SELECT]], i32 [[TMP5]])
; CHECK1-NEXT:    [[TMP16:%.*]] = getelementptr inbounds double, ptr [[D:%.*]], i64 [[TMP6]]
; CHECK1-NEXT:    [[TMP17:%.*]] = getelementptr inbounds double, ptr [[TMP16]], i32 0
; CHECK1-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP]], ptr [[TMP17]], <vscale x 1 x i1> [[VP_MASK_SELECT]], i32 [[TMP5]])
; CHECK1-NEXT:    [[VP_MASK_SELECT5:%.*]] = call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> [[TMP9]], <vscale x 1 x i1> [[VP_OP_FCMP]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP5]])
; CHECK1-NEXT:    [[VP_OP6:%.*]] = call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD3]], <vscale x 1 x double> [[VP_OP_LOAD4]], <vscale x 1 x i1> [[VP_MASK_SELECT5]], i32 [[TMP5]])
; CHECK1-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP6]], ptr [[TMP11]], <vscale x 1 x i1> [[VP_MASK_SELECT5]], i32 [[TMP5]])
; CHECK1-NEXT:    [[TMP18:%.*]] = zext i32 [[TMP5]] to i64
; CHECK1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP18]]
; CHECK1-NEXT:    [[TMP19:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[TMP19]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK1:       middle.block:
; CHECK1-NEXT:    br i1 true, label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK1:       scalar.ph:
; CHECK1-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK1:       for.cond.cleanup.loopexit:
; CHECK1-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK1:       for.cond.cleanup:
; CHECK1-NEXT:    ret void
; CHECK1:       for.body:
; CHECK1-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC:%.*]] ]
; CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP20:%.*]] = load double, ptr [[ARRAYIDX]], align 8
; CHECK1-NEXT:    [[CMP1:%.*]] = fcmp olt double [[TMP20]], 3.000000e+00
; CHECK1-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP21:%.*]] = load double, ptr [[ARRAYIDX3]], align 8
; CHECK1-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP22:%.*]] = load double, ptr [[ARRAYIDX5]], align 8
; CHECK1-NEXT:    br i1 [[CMP1]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
; CHECK1:       if.then:
; CHECK1-NEXT:    [[ADD:%.*]] = fadd double [[TMP21]], [[TMP22]]
; CHECK1-NEXT:    store double [[ADD]], ptr [[ARRAYIDX]], align 8
; CHECK1-NEXT:    br label [[FOR_INC]]
; CHECK1:       if.else:
; CHECK1-NEXT:    [[MUL:%.*]] = fmul double [[TMP21]], [[TMP22]]
; CHECK1-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds double, ptr [[D]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store double [[MUL]], ptr [[ARRAYIDX13]], align 8
; CHECK1-NEXT:    br label [[FOR_INC]]
; CHECK1:       for.inc:
; CHECK1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK1-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
; INTERLEAVE-LABEL: @vec_add(
; INTERLEAVE-NEXT:  entry:
; INTERLEAVE-NEXT:    [[CMP22:%.*]] = icmp sgt i32 [[N:%.*]], 0
; INTERLEAVE-NEXT:    br i1 [[CMP22]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; INTERLEAVE:       for.body.preheader:
; INTERLEAVE-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; INTERLEAVE-NEXT:    [[TMP0:%.*]] = sub i64 -1, [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 4
; INTERLEAVE-NEXT:    [[TMP3:%.*]] = icmp ult i64 [[TMP0]], [[TMP2]]
; INTERLEAVE-NEXT:    br i1 [[TMP3]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; INTERLEAVE:       vector.ph:
; INTERLEAVE-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], 1
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 1 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; INTERLEAVE-NEXT:    br label [[VECTOR_BODY:%.*]]
; INTERLEAVE:       vector.body:
; INTERLEAVE-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; INTERLEAVE-NEXT:    [[TMP4:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; INTERLEAVE-NEXT:    [[TMP5:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; INTERLEAVE-NEXT:    [[TMP7:%.*]] = sub i64 [[TMP4]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP8:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP7]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP9:%.*]] = trunc i64 [[TMP8]] to i32
; INTERLEAVE-NEXT:    [[TMP10:%.*]] = sub i64 [[TMP7]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP11:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP10]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP12:%.*]] = trunc i64 [[TMP11]] to i32
; INTERLEAVE-NEXT:    [[TMP13:%.*]] = sub i64 [[TMP10]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP14:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP13]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP15:%.*]] = trunc i64 [[TMP14]] to i32
; INTERLEAVE-NEXT:    [[TMP16:%.*]] = add i64 [[INDEX]], 0
; INTERLEAVE-NEXT:    [[TMP17:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP18:%.*]] = add i64 [[TMP17]], 0
; INTERLEAVE-NEXT:    [[TMP19:%.*]] = mul i64 [[TMP18]], 1
; INTERLEAVE-NEXT:    [[TMP20:%.*]] = add i64 [[INDEX]], [[TMP19]]
; INTERLEAVE-NEXT:    [[TMP21:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP22:%.*]] = mul i64 [[TMP21]], 2
; INTERLEAVE-NEXT:    [[TMP23:%.*]] = add i64 [[TMP22]], 0
; INTERLEAVE-NEXT:    [[TMP24:%.*]] = mul i64 [[TMP23]], 1
; INTERLEAVE-NEXT:    [[TMP25:%.*]] = add i64 [[INDEX]], [[TMP24]]
; INTERLEAVE-NEXT:    [[TMP26:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP27:%.*]] = mul i64 [[TMP26]], 3
; INTERLEAVE-NEXT:    [[TMP28:%.*]] = add i64 [[TMP27]], 0
; INTERLEAVE-NEXT:    [[TMP29:%.*]] = mul i64 [[TMP28]], 1
; INTERLEAVE-NEXT:    [[TMP30:%.*]] = add i64 [[INDEX]], [[TMP29]]
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[INDEX]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <vscale x 1 x i64> [[BROADCAST_SPLATINSERT1]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP31:%.*]] = call <vscale x 1 x i64> @llvm.experimental.stepvector.nxv1i64()
; INTERLEAVE-NEXT:    [[TMP32:%.*]] = add <vscale x 1 x i64> zeroinitializer, [[TMP31]]
; INTERLEAVE-NEXT:    [[VEC_IV:%.*]] = add <vscale x 1 x i64> [[BROADCAST_SPLAT2]], [[TMP32]]
; INTERLEAVE-NEXT:    [[TMP33:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[TMP33]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 1 x i64> [[DOTSPLATINSERT]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP34:%.*]] = call <vscale x 1 x i64> @llvm.experimental.stepvector.nxv1i64()
; INTERLEAVE-NEXT:    [[TMP35:%.*]] = add <vscale x 1 x i64> [[DOTSPLAT]], [[TMP34]]
; INTERLEAVE-NEXT:    [[VEC_IV3:%.*]] = add <vscale x 1 x i64> [[BROADCAST_SPLAT2]], [[TMP35]]
; INTERLEAVE-NEXT:    [[TMP36:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP37:%.*]] = mul i64 [[TMP36]], 2
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT4:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[TMP37]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT5:%.*]] = shufflevector <vscale x 1 x i64> [[DOTSPLATINSERT4]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP38:%.*]] = call <vscale x 1 x i64> @llvm.experimental.stepvector.nxv1i64()
; INTERLEAVE-NEXT:    [[TMP39:%.*]] = add <vscale x 1 x i64> [[DOTSPLAT5]], [[TMP38]]
; INTERLEAVE-NEXT:    [[VEC_IV6:%.*]] = add <vscale x 1 x i64> [[BROADCAST_SPLAT2]], [[TMP39]]
; INTERLEAVE-NEXT:    [[TMP40:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP41:%.*]] = mul i64 [[TMP40]], 3
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT7:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[TMP41]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT8:%.*]] = shufflevector <vscale x 1 x i64> [[DOTSPLATINSERT7]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP42:%.*]] = call <vscale x 1 x i64> @llvm.experimental.stepvector.nxv1i64()
; INTERLEAVE-NEXT:    [[TMP43:%.*]] = add <vscale x 1 x i64> [[DOTSPLAT8]], [[TMP42]]
; INTERLEAVE-NEXT:    [[VEC_IV9:%.*]] = add <vscale x 1 x i64> [[BROADCAST_SPLAT2]], [[TMP43]]
; INTERLEAVE-NEXT:    [[TMP44:%.*]] = icmp ule <vscale x 1 x i64> [[VEC_IV]], [[BROADCAST_SPLAT]]
; INTERLEAVE-NEXT:    [[TMP45:%.*]] = icmp ule <vscale x 1 x i64> [[VEC_IV3]], [[BROADCAST_SPLAT]]
; INTERLEAVE-NEXT:    [[TMP46:%.*]] = icmp ule <vscale x 1 x i64> [[VEC_IV6]], [[BROADCAST_SPLAT]]
; INTERLEAVE-NEXT:    [[TMP47:%.*]] = icmp ule <vscale x 1 x i64> [[VEC_IV9]], [[BROADCAST_SPLAT]]
; INTERLEAVE-NEXT:    [[TMP48:%.*]] = getelementptr inbounds double, ptr [[C:%.*]], i64 [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP49:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP50:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[TMP25]]
; INTERLEAVE-NEXT:    [[TMP51:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[TMP30]]
; INTERLEAVE-NEXT:    [[TMP52:%.*]] = getelementptr inbounds double, ptr [[TMP48]], i32 0
; INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP52]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[TMP53:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP54:%.*]] = getelementptr inbounds double, ptr [[TMP48]], i32 [[TMP53]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD10:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP54]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP55:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP56:%.*]] = add i32 [[TMP55]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP57:%.*]] = getelementptr inbounds double, ptr [[TMP48]], i32 [[TMP56]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD11:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP57]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP58:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP59:%.*]] = add i32 [[TMP58]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP60:%.*]] = add i32 [[TMP59]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP61:%.*]] = getelementptr inbounds double, ptr [[TMP48]], i32 [[TMP60]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD12:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP61]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[VP_OP_FCMP:%.*]] = call <vscale x 1 x i1> @llvm.vp.fcmp.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD]], <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 3.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), metadata !"olt", <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[VP_OP_FCMP13:%.*]] = call <vscale x 1 x i1> @llvm.vp.fcmp.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD10]], <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 3.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), metadata !"olt", <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[VP_OP_FCMP14:%.*]] = call <vscale x 1 x i1> @llvm.vp.fcmp.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD11]], <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 3.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), metadata !"olt", <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[VP_OP_FCMP15:%.*]] = call <vscale x 1 x i1> @llvm.vp.fcmp.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD12]], <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 3.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), metadata !"olt", <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP62:%.*]] = getelementptr inbounds double, ptr [[A:%.*]], i64 [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP63:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP64:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[TMP25]]
; INTERLEAVE-NEXT:    [[TMP65:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[TMP30]]
; INTERLEAVE-NEXT:    [[TMP66:%.*]] = getelementptr inbounds double, ptr [[TMP62]], i32 0
; INTERLEAVE-NEXT:    [[VP_OP_LOAD16:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP66]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[TMP67:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP68:%.*]] = getelementptr inbounds double, ptr [[TMP62]], i32 [[TMP67]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD17:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP68]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP69:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP70:%.*]] = add i32 [[TMP69]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP71:%.*]] = getelementptr inbounds double, ptr [[TMP62]], i32 [[TMP70]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD18:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP71]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP72:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP73:%.*]] = add i32 [[TMP72]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP74:%.*]] = add i32 [[TMP73]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP75:%.*]] = getelementptr inbounds double, ptr [[TMP62]], i32 [[TMP74]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD19:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP75]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP76:%.*]] = getelementptr inbounds double, ptr [[B:%.*]], i64 [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP77:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP78:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[TMP25]]
; INTERLEAVE-NEXT:    [[TMP79:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[TMP30]]
; INTERLEAVE-NEXT:    [[TMP80:%.*]] = getelementptr inbounds double, ptr [[TMP76]], i32 0
; INTERLEAVE-NEXT:    [[VP_OP_LOAD20:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP80]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[TMP81:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP82:%.*]] = getelementptr inbounds double, ptr [[TMP76]], i32 [[TMP81]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD21:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP82]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP83:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP84:%.*]] = add i32 [[TMP83]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP85:%.*]] = getelementptr inbounds double, ptr [[TMP76]], i32 [[TMP84]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD22:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP85]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP86:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP87:%.*]] = add i32 [[TMP86]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP88:%.*]] = add i32 [[TMP87]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP89:%.*]] = getelementptr inbounds double, ptr [[TMP76]], i32 [[TMP88]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD23:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP89]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[VP_MASK_NOT:%.*]] = call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> [[VP_OP_FCMP]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[VP_MASK_NOT24:%.*]] = call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> [[VP_OP_FCMP13]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[VP_MASK_NOT25:%.*]] = call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> [[VP_OP_FCMP14]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[VP_MASK_NOT26:%.*]] = call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> [[VP_OP_FCMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[VP_MASK_SELECT:%.*]] = call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> [[TMP44]], <vscale x 1 x i1> [[VP_MASK_NOT]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[VP_MASK_SELECT27:%.*]] = call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> [[TMP45]], <vscale x 1 x i1> [[VP_MASK_NOT24]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[VP_MASK_SELECT28:%.*]] = call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> [[TMP46]], <vscale x 1 x i1> [[VP_MASK_NOT25]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[VP_MASK_SELECT29:%.*]] = call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> [[TMP47]], <vscale x 1 x i1> [[VP_MASK_NOT26]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[VP_OP:%.*]] = call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD16]], <vscale x 1 x double> [[VP_OP_LOAD20]], <vscale x 1 x i1> [[VP_MASK_SELECT]], i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[VP_OP30:%.*]] = call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD17]], <vscale x 1 x double> [[VP_OP_LOAD21]], <vscale x 1 x i1> [[VP_MASK_SELECT27]], i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[VP_OP31:%.*]] = call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD18]], <vscale x 1 x double> [[VP_OP_LOAD22]], <vscale x 1 x i1> [[VP_MASK_SELECT28]], i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[VP_OP32:%.*]] = call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD19]], <vscale x 1 x double> [[VP_OP_LOAD23]], <vscale x 1 x i1> [[VP_MASK_SELECT29]], i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP90:%.*]] = getelementptr inbounds double, ptr [[D:%.*]], i64 [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP91:%.*]] = getelementptr inbounds double, ptr [[D]], i64 [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP92:%.*]] = getelementptr inbounds double, ptr [[D]], i64 [[TMP25]]
; INTERLEAVE-NEXT:    [[TMP93:%.*]] = getelementptr inbounds double, ptr [[D]], i64 [[TMP30]]
; INTERLEAVE-NEXT:    [[TMP94:%.*]] = getelementptr inbounds double, ptr [[TMP90]], i32 0
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP]], ptr [[TMP94]], <vscale x 1 x i1> [[VP_MASK_SELECT]], i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[TMP95:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP96:%.*]] = getelementptr inbounds double, ptr [[TMP90]], i32 [[TMP95]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP30]], ptr [[TMP96]], <vscale x 1 x i1> [[VP_MASK_SELECT27]], i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP97:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP98:%.*]] = add i32 [[TMP97]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP99:%.*]] = getelementptr inbounds double, ptr [[TMP90]], i32 [[TMP98]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP31]], ptr [[TMP99]], <vscale x 1 x i1> [[VP_MASK_SELECT28]], i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP100:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP101:%.*]] = add i32 [[TMP100]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP102:%.*]] = add i32 [[TMP101]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP103:%.*]] = getelementptr inbounds double, ptr [[TMP90]], i32 [[TMP102]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP32]], ptr [[TMP103]], <vscale x 1 x i1> [[VP_MASK_SELECT29]], i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[VP_MASK_SELECT33:%.*]] = call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> [[TMP44]], <vscale x 1 x i1> [[VP_OP_FCMP]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[VP_MASK_SELECT34:%.*]] = call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> [[TMP45]], <vscale x 1 x i1> [[VP_OP_FCMP13]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[VP_MASK_SELECT35:%.*]] = call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> [[TMP46]], <vscale x 1 x i1> [[VP_OP_FCMP14]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[VP_MASK_SELECT36:%.*]] = call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> [[TMP47]], <vscale x 1 x i1> [[VP_OP_FCMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[VP_OP37:%.*]] = call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD16]], <vscale x 1 x double> [[VP_OP_LOAD20]], <vscale x 1 x i1> [[VP_MASK_SELECT33]], i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[VP_OP38:%.*]] = call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD17]], <vscale x 1 x double> [[VP_OP_LOAD21]], <vscale x 1 x i1> [[VP_MASK_SELECT34]], i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[VP_OP39:%.*]] = call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD18]], <vscale x 1 x double> [[VP_OP_LOAD22]], <vscale x 1 x i1> [[VP_MASK_SELECT35]], i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[VP_OP40:%.*]] = call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD19]], <vscale x 1 x double> [[VP_OP_LOAD23]], <vscale x 1 x i1> [[VP_MASK_SELECT36]], i32 [[TMP15]])
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP37]], ptr [[TMP52]], <vscale x 1 x i1> [[VP_MASK_SELECT33]], i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[TMP104:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP105:%.*]] = getelementptr inbounds double, ptr [[TMP48]], i32 [[TMP104]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP38]], ptr [[TMP105]], <vscale x 1 x i1> [[VP_MASK_SELECT34]], i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP106:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP107:%.*]] = add i32 [[TMP106]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP108:%.*]] = getelementptr inbounds double, ptr [[TMP48]], i32 [[TMP107]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP39]], ptr [[TMP108]], <vscale x 1 x i1> [[VP_MASK_SELECT35]], i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP109:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP110:%.*]] = add i32 [[TMP109]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP111:%.*]] = add i32 [[TMP110]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP112:%.*]] = getelementptr inbounds double, ptr [[TMP48]], i32 [[TMP111]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP40]], ptr [[TMP112]], <vscale x 1 x i1> [[VP_MASK_SELECT36]], i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP113:%.*]] = add i32 [[TMP6]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP114:%.*]] = add i32 [[TMP113]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP115:%.*]] = add i32 [[TMP114]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP116:%.*]] = zext i32 [[TMP115]] to i64
; INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP116]]
; INTERLEAVE-NEXT:    [[TMP117:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[TMP117]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; INTERLEAVE:       middle.block:
; INTERLEAVE-NEXT:    br i1 true, label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; INTERLEAVE:       scalar.ph:
; INTERLEAVE-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; INTERLEAVE-NEXT:    br label [[FOR_BODY:%.*]]
; INTERLEAVE:       for.cond.cleanup.loopexit:
; INTERLEAVE-NEXT:    br label [[FOR_COND_CLEANUP]]
; INTERLEAVE:       for.cond.cleanup:
; INTERLEAVE-NEXT:    ret void
; INTERLEAVE:       for.body:
; INTERLEAVE-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_INC:%.*]] ]
; INTERLEAVE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP118:%.*]] = load double, ptr [[ARRAYIDX]], align 8
; INTERLEAVE-NEXT:    [[CMP1:%.*]] = fcmp olt double [[TMP118]], 3.000000e+00
; INTERLEAVE-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP119:%.*]] = load double, ptr [[ARRAYIDX3]], align 8
; INTERLEAVE-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP120:%.*]] = load double, ptr [[ARRAYIDX5]], align 8
; INTERLEAVE-NEXT:    br i1 [[CMP1]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
; INTERLEAVE:       if.then:
; INTERLEAVE-NEXT:    [[ADD:%.*]] = fadd double [[TMP119]], [[TMP120]]
; INTERLEAVE-NEXT:    store double [[ADD]], ptr [[ARRAYIDX]], align 8
; INTERLEAVE-NEXT:    br label [[FOR_INC]]
; INTERLEAVE:       if.else:
; INTERLEAVE-NEXT:    [[MUL:%.*]] = fmul double [[TMP119]], [[TMP120]]
; INTERLEAVE-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds double, ptr [[D]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    store double [[MUL]], ptr [[ARRAYIDX13]], align 8
; INTERLEAVE-NEXT:    br label [[FOR_INC]]
; INTERLEAVE:       for.inc:
; INTERLEAVE-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; INTERLEAVE-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
entry:
  %cmp22 = icmp sgt i32 %N, 0
  br i1 %cmp22, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds double, double* %c, i64 %indvars.iv
  %0 = load double, double* %arrayidx, align 8
  %cmp1 = fcmp olt double %0, 3.000000e+00
  %arrayidx3 = getelementptr inbounds double, double* %a, i64 %indvars.iv
  %1 = load double, double* %arrayidx3, align 8
  %arrayidx5 = getelementptr inbounds double, double* %b, i64 %indvars.iv
  %2 = load double, double* %arrayidx5, align 8
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %add = fadd double %1, %2
  store double %add, double* %arrayidx, align 8
  br label %for.inc

if.else:                                          ; preds = %for.body
  %mul = fmul double %1, %2
  %arrayidx13 = getelementptr inbounds double, double* %d, i64 %indvars.iv
  store double %mul, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.then, %if.else
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.cond.cleanup.loopexit, label %for.body
}
