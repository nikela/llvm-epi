; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+experimental-v -S -riscv-v-vector-bits-min=64 \
; RUN:    -loop-vectorize -vector-register-width-factor=8 < %s -o - | FileCheck %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+experimental-v -S -riscv-v-vector-bits-min=64 \
; RUN:    -loop-vectorize < %s -o - | FileCheck %s --check-prefix=CHECK1
; ModuleID = 't2.i'
source_filename = "t2.i"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128"
target triple = "riscv64-unknown-linux-gnu"

; Function Attrs: nounwind readnone
define dso_local signext i32 @main(i32 signext %argc, i8** nocapture readnone %argv) local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[A:%.*]] = alloca [1024 x double], align 8
; CHECK-NEXT:    [[B:%.*]] = alloca [1024 x double], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast [1024 x double]* [[A]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull [[TMP0]]) #[[ATTR3:[0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast [1024 x double]* [[B]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull [[TMP1]]) #[[ATTR3]]
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 8
; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 1024, [[TMP3]]
; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP4]], 8
; CHECK-NEXT:    [[N_MOD_VF:%.*]] = urem i64 1024, [[TMP5]]
; CHECK-NEXT:    [[N_VEC:%.*]] = sub i64 1024, [[N_MOD_VF]]
; CHECK-NEXT:    [[TMP6:%.*]] = call <vscale x 8 x i64> @llvm.experimental.stepvector.nxv8i64()
; CHECK-NEXT:    [[TMP7:%.*]] = add <vscale x 8 x i64> [[TMP6]], shufflevector (<vscale x 8 x i64> insertelement (<vscale x 8 x i64> poison, i64 0, i32 0), <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer)
; CHECK-NEXT:    [[TMP8:%.*]] = mul <vscale x 8 x i64> [[TMP7]], shufflevector (<vscale x 8 x i64> insertelement (<vscale x 8 x i64> poison, i64 1, i32 0), <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer)
; CHECK-NEXT:    [[INDUCTION:%.*]] = add <vscale x 8 x i64> shufflevector (<vscale x 8 x i64> insertelement (<vscale x 8 x i64> poison, i64 0, i32 0), <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer), [[TMP8]]
; CHECK-NEXT:    [[TMP9:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP10:%.*]] = mul i64 [[TMP9]], 8
; CHECK-NEXT:    [[TMP11:%.*]] = mul i64 1, [[TMP10]]
; CHECK-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 8 x i64> poison, i64 [[TMP11]], i32 0
; CHECK-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 8 x i64> [[DOTSPLATINSERT]], <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP12:%.*]] = call <vscale x 8 x i32> @llvm.experimental.stepvector.nxv8i32()
; CHECK-NEXT:    [[TMP13:%.*]] = add <vscale x 8 x i32> [[TMP12]], shufflevector (<vscale x 8 x i32> insertelement (<vscale x 8 x i32> poison, i32 0, i32 0), <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer)
; CHECK-NEXT:    [[TMP14:%.*]] = mul <vscale x 8 x i32> [[TMP13]], shufflevector (<vscale x 8 x i32> insertelement (<vscale x 8 x i32> poison, i32 1, i32 0), <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer)
; CHECK-NEXT:    [[INDUCTION5:%.*]] = add <vscale x 8 x i32> shufflevector (<vscale x 8 x i32> insertelement (<vscale x 8 x i32> poison, i32 0, i32 0), <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer), [[TMP14]]
; CHECK-NEXT:    [[TMP15:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP16:%.*]] = mul i32 [[TMP15]], 8
; CHECK-NEXT:    [[TMP17:%.*]] = mul i32 1, [[TMP16]]
; CHECK-NEXT:    [[DOTSPLATINSERT6:%.*]] = insertelement <vscale x 8 x i32> poison, i32 [[TMP17]], i32 0
; CHECK-NEXT:    [[DOTSPLAT7:%.*]] = shufflevector <vscale x 8 x i32> [[DOTSPLATINSERT6]], <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP18:%.*]] = call <vscale x 8 x i32> @llvm.experimental.stepvector.nxv8i32()
; CHECK-NEXT:    [[TMP19:%.*]] = add <vscale x 8 x i32> [[TMP18]], shufflevector (<vscale x 8 x i32> insertelement (<vscale x 8 x i32> poison, i32 0, i32 0), <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer)
; CHECK-NEXT:    [[TMP20:%.*]] = mul <vscale x 8 x i32> [[TMP19]], shufflevector (<vscale x 8 x i32> insertelement (<vscale x 8 x i32> poison, i32 1, i32 0), <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer)
; CHECK-NEXT:    [[INDUCTION10:%.*]] = add <vscale x 8 x i32> shufflevector (<vscale x 8 x i32> insertelement (<vscale x 8 x i32> poison, i32 0, i32 0), <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer), [[TMP20]]
; CHECK-NEXT:    [[TMP21:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP22:%.*]] = mul i32 [[TMP21]], 8
; CHECK-NEXT:    [[TMP23:%.*]] = mul i32 1, [[TMP22]]
; CHECK-NEXT:    [[DOTSPLATINSERT11:%.*]] = insertelement <vscale x 8 x i32> poison, i32 [[TMP23]], i32 0
; CHECK-NEXT:    [[DOTSPLAT12:%.*]] = shufflevector <vscale x 8 x i32> [[DOTSPLATINSERT11]], <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 8 x i64> [ [[INDUCTION]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_IND8:%.*]] = phi <vscale x 8 x i32> [ [[INDUCTION5]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT9:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_IND13:%.*]] = phi <vscale x 8 x i32> [ [[INDUCTION10]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT14:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP24:%.*]] = call <vscale x 8 x i64> @llvm.experimental.stepvector.nxv8i64()
; CHECK-NEXT:    [[DOTSPLATINSERT1:%.*]] = insertelement <vscale x 8 x i64> poison, i64 [[INDEX]], i32 0
; CHECK-NEXT:    [[DOTSPLAT2:%.*]] = shufflevector <vscale x 8 x i64> [[DOTSPLATINSERT1]], <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP25:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP26:%.*]] = mul i64 [[TMP25]], 0
; CHECK-NEXT:    [[DOTSPLATINSERT3:%.*]] = insertelement <vscale x 8 x i64> poison, i64 [[TMP26]], i32 0
; CHECK-NEXT:    [[DOTSPLAT4:%.*]] = shufflevector <vscale x 8 x i64> [[DOTSPLATINSERT3]], <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP27:%.*]] = add <vscale x 8 x i64> [[DOTSPLAT4]], [[TMP24]]
; CHECK-NEXT:    [[TMP28:%.*]] = mul <vscale x 8 x i64> [[TMP27]], shufflevector (<vscale x 8 x i64> insertelement (<vscale x 8 x i64> poison, i64 1, i32 0), <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer)
; CHECK-NEXT:    [[TMP29:%.*]] = add <vscale x 8 x i64> [[DOTSPLAT2]], [[TMP28]]
; CHECK-NEXT:    [[TMP30:%.*]] = add i64 [[TMP26]], 0
; CHECK-NEXT:    [[TMP31:%.*]] = mul i64 [[TMP30]], 1
; CHECK-NEXT:    [[TMP32:%.*]] = add i64 [[INDEX]], [[TMP31]]
; CHECK-NEXT:    [[TMP33:%.*]] = add i64 [[TMP26]], 1
; CHECK-NEXT:    [[TMP34:%.*]] = mul i64 [[TMP33]], 1
; CHECK-NEXT:    [[TMP35:%.*]] = add i64 [[INDEX]], [[TMP34]]
; CHECK-NEXT:    [[TMP36:%.*]] = add i64 [[TMP26]], 2
; CHECK-NEXT:    [[TMP37:%.*]] = mul i64 [[TMP36]], 1
; CHECK-NEXT:    [[TMP38:%.*]] = add i64 [[INDEX]], [[TMP37]]
; CHECK-NEXT:    [[TMP39:%.*]] = add i64 [[TMP26]], 3
; CHECK-NEXT:    [[TMP40:%.*]] = mul i64 [[TMP39]], 1
; CHECK-NEXT:    [[TMP41:%.*]] = add i64 [[INDEX]], [[TMP40]]
; CHECK-NEXT:    [[TMP42:%.*]] = add i64 [[TMP26]], 4
; CHECK-NEXT:    [[TMP43:%.*]] = mul i64 [[TMP42]], 1
; CHECK-NEXT:    [[TMP44:%.*]] = add i64 [[INDEX]], [[TMP43]]
; CHECK-NEXT:    [[TMP45:%.*]] = add i64 [[TMP26]], 5
; CHECK-NEXT:    [[TMP46:%.*]] = mul i64 [[TMP45]], 1
; CHECK-NEXT:    [[TMP47:%.*]] = add i64 [[INDEX]], [[TMP46]]
; CHECK-NEXT:    [[TMP48:%.*]] = add i64 [[TMP26]], 6
; CHECK-NEXT:    [[TMP49:%.*]] = mul i64 [[TMP48]], 1
; CHECK-NEXT:    [[TMP50:%.*]] = add i64 [[INDEX]], [[TMP49]]
; CHECK-NEXT:    [[TMP51:%.*]] = add i64 [[TMP26]], 7
; CHECK-NEXT:    [[TMP52:%.*]] = mul i64 [[TMP51]], 1
; CHECK-NEXT:    [[TMP53:%.*]] = add i64 [[INDEX]], [[TMP52]]
; CHECK-NEXT:    [[TMP54:%.*]] = sitofp <vscale x 8 x i32> [[VEC_IND8]] to <vscale x 8 x double>
; CHECK-NEXT:    [[TMP55:%.*]] = getelementptr inbounds [1024 x double], [1024 x double]* [[A]], i64 0, i64 [[TMP32]]
; CHECK-NEXT:    [[TMP56:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP57:%.*]] = mul i32 [[TMP56]], 0
; CHECK-NEXT:    [[TMP58:%.*]] = getelementptr inbounds double, double* [[TMP55]], i32 [[TMP57]]
; CHECK-NEXT:    [[TMP59:%.*]] = bitcast double* [[TMP58]] to <vscale x 8 x double>*
; CHECK-NEXT:    store <vscale x 8 x double> [[TMP54]], <vscale x 8 x double>* [[TMP59]], align 8, !tbaa [[TBAA2:![0-9]+]]
; CHECK-NEXT:    [[TMP60:%.*]] = sub <vscale x 8 x i32> shufflevector (<vscale x 8 x i32> insertelement (<vscale x 8 x i32> poison, i32 1024, i32 0), <vscale x 8 x i32> poison, <vscale x 8 x i32> zeroinitializer), [[VEC_IND13]]
; CHECK-NEXT:    [[TMP61:%.*]] = sitofp <vscale x 8 x i32> [[TMP60]] to <vscale x 8 x double>
; CHECK-NEXT:    [[TMP62:%.*]] = getelementptr inbounds [1024 x double], [1024 x double]* [[B]], i64 0, i64 [[TMP32]]
; CHECK-NEXT:    [[TMP63:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP64:%.*]] = mul i32 [[TMP63]], 0
; CHECK-NEXT:    [[TMP65:%.*]] = getelementptr inbounds double, double* [[TMP62]], i32 [[TMP64]]
; CHECK-NEXT:    [[TMP66:%.*]] = bitcast double* [[TMP65]] to <vscale x 8 x double>*
; CHECK-NEXT:    store <vscale x 8 x double> [[TMP61]], <vscale x 8 x double>* [[TMP66]], align 8, !tbaa [[TBAA2]]
; CHECK-NEXT:    [[TMP67:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP68:%.*]] = mul i64 [[TMP67]], 8
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP68]]
; CHECK-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 8 x i64> [[VEC_IND]], [[DOTSPLAT]]
; CHECK-NEXT:    [[VEC_IND_NEXT9]] = add <vscale x 8 x i32> [[VEC_IND8]], [[DOTSPLAT7]]
; CHECK-NEXT:    [[VEC_IND_NEXT14]] = add <vscale x 8 x i32> [[VEC_IND13]], [[DOTSPLAT12]]
; CHECK-NEXT:    [[TMP69:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP69]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 1024, [[N_VEC]]
; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    [[IDXPROM4:%.*]] = sext i32 [[ARGC:%.*]] to i64
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds [1024 x double], [1024 x double]* [[A]], i64 0, i64 [[IDXPROM4]]
; CHECK-NEXT:    [[TMP70:%.*]] = load double, double* [[ARRAYIDX5]], align 8, !tbaa [[TBAA2]]
; CHECK-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr inbounds [1024 x double], [1024 x double]* [[B]], i64 0, i64 [[IDXPROM4]]
; CHECK-NEXT:    [[TMP71:%.*]] = load double, double* [[ARRAYIDX7]], align 8, !tbaa [[TBAA2]]
; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[TMP70]], [[TMP71]]
; CHECK-NEXT:    [[CONV8:%.*]] = fptosi double [[ADD]] to i32
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull [[TMP1]]) #[[ATTR3]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull [[TMP0]]) #[[ATTR3]]
; CHECK-NEXT:    ret i32 [[CONV8]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP72:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; CHECK-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP72]] to double
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [1024 x double], [1024 x double]* [[A]], i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    store double [[CONV]], double* [[ARRAYIDX]], align 8, !tbaa [[TBAA2]]
; CHECK-NEXT:    [[TMP73:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; CHECK-NEXT:    [[TMP74:%.*]] = sub i32 1024, [[TMP73]]
; CHECK-NEXT:    [[CONV1:%.*]] = sitofp i32 [[TMP74]] to double
; CHECK-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds [1024 x double], [1024 x double]* [[B]], i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    store double [[CONV1]], double* [[ARRAYIDX3]], align 8, !tbaa [[TBAA2]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 1024
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP8:![0-9]+]]
;
; CHECK1-LABEL: @main(
; CHECK1-NEXT:  entry:
; CHECK1-NEXT:    [[A:%.*]] = alloca [1024 x double], align 8
; CHECK1-NEXT:    [[B:%.*]] = alloca [1024 x double], align 8
; CHECK1-NEXT:    [[TMP0:%.*]] = bitcast [1024 x double]* [[A]] to i8*
; CHECK1-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull [[TMP0]]) #[[ATTR3:[0-9]+]]
; CHECK1-NEXT:    [[TMP1:%.*]] = bitcast [1024 x double]* [[B]] to i8*
; CHECK1-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull [[TMP1]]) #[[ATTR3]]
; CHECK1-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 1024, [[TMP2]]
; CHECK1-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK1:       vector.ph:
; CHECK1-NEXT:    [[TMP3:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[N_MOD_VF:%.*]] = urem i64 1024, [[TMP3]]
; CHECK1-NEXT:    [[N_VEC:%.*]] = sub i64 1024, [[N_MOD_VF]]
; CHECK1-NEXT:    [[TMP4:%.*]] = call <vscale x 1 x i64> @llvm.experimental.stepvector.nxv1i64()
; CHECK1-NEXT:    [[TMP5:%.*]] = add <vscale x 1 x i64> [[TMP4]], shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 0, i32 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer)
; CHECK1-NEXT:    [[TMP6:%.*]] = mul <vscale x 1 x i64> [[TMP5]], shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 1, i32 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer)
; CHECK1-NEXT:    [[INDUCTION:%.*]] = add <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 0, i32 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), [[TMP6]]
; CHECK1-NEXT:    [[TMP7:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP8:%.*]] = mul i64 1, [[TMP7]]
; CHECK1-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[TMP8]], i32 0
; CHECK1-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 1 x i64> [[DOTSPLATINSERT]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; CHECK1-NEXT:    [[TMP9:%.*]] = call <vscale x 1 x i32> @llvm.experimental.stepvector.nxv1i32()
; CHECK1-NEXT:    [[TMP10:%.*]] = add <vscale x 1 x i32> [[TMP9]], shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 0, i32 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer)
; CHECK1-NEXT:    [[TMP11:%.*]] = mul <vscale x 1 x i32> [[TMP10]], shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 1, i32 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer)
; CHECK1-NEXT:    [[INDUCTION5:%.*]] = add <vscale x 1 x i32> shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 0, i32 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer), [[TMP11]]
; CHECK1-NEXT:    [[TMP12:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP13:%.*]] = mul i32 1, [[TMP12]]
; CHECK1-NEXT:    [[DOTSPLATINSERT6:%.*]] = insertelement <vscale x 1 x i32> poison, i32 [[TMP13]], i32 0
; CHECK1-NEXT:    [[DOTSPLAT7:%.*]] = shufflevector <vscale x 1 x i32> [[DOTSPLATINSERT6]], <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer
; CHECK1-NEXT:    [[TMP14:%.*]] = call <vscale x 1 x i32> @llvm.experimental.stepvector.nxv1i32()
; CHECK1-NEXT:    [[TMP15:%.*]] = add <vscale x 1 x i32> [[TMP14]], shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 0, i32 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer)
; CHECK1-NEXT:    [[TMP16:%.*]] = mul <vscale x 1 x i32> [[TMP15]], shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 1, i32 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer)
; CHECK1-NEXT:    [[INDUCTION10:%.*]] = add <vscale x 1 x i32> shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 0, i32 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer), [[TMP16]]
; CHECK1-NEXT:    [[TMP17:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP18:%.*]] = mul i32 1, [[TMP17]]
; CHECK1-NEXT:    [[DOTSPLATINSERT11:%.*]] = insertelement <vscale x 1 x i32> poison, i32 [[TMP18]], i32 0
; CHECK1-NEXT:    [[DOTSPLAT12:%.*]] = shufflevector <vscale x 1 x i32> [[DOTSPLATINSERT11]], <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer
; CHECK1-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK1:       vector.body:
; CHECK1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK1-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 1 x i64> [ [[INDUCTION]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK1-NEXT:    [[VEC_IND8:%.*]] = phi <vscale x 1 x i32> [ [[INDUCTION5]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT9:%.*]], [[VECTOR_BODY]] ]
; CHECK1-NEXT:    [[VEC_IND13:%.*]] = phi <vscale x 1 x i32> [ [[INDUCTION10]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT14:%.*]], [[VECTOR_BODY]] ]
; CHECK1-NEXT:    [[TMP19:%.*]] = call <vscale x 1 x i64> @llvm.experimental.stepvector.nxv1i64()
; CHECK1-NEXT:    [[DOTSPLATINSERT1:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[INDEX]], i32 0
; CHECK1-NEXT:    [[DOTSPLAT2:%.*]] = shufflevector <vscale x 1 x i64> [[DOTSPLATINSERT1]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; CHECK1-NEXT:    [[TMP20:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP21:%.*]] = mul i64 [[TMP20]], 0
; CHECK1-NEXT:    [[DOTSPLATINSERT3:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[TMP21]], i32 0
; CHECK1-NEXT:    [[DOTSPLAT4:%.*]] = shufflevector <vscale x 1 x i64> [[DOTSPLATINSERT3]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; CHECK1-NEXT:    [[TMP22:%.*]] = add <vscale x 1 x i64> [[DOTSPLAT4]], [[TMP19]]
; CHECK1-NEXT:    [[TMP23:%.*]] = mul <vscale x 1 x i64> [[TMP22]], shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 1, i32 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer)
; CHECK1-NEXT:    [[TMP24:%.*]] = add <vscale x 1 x i64> [[DOTSPLAT2]], [[TMP23]]
; CHECK1-NEXT:    [[TMP25:%.*]] = add i64 [[TMP21]], 0
; CHECK1-NEXT:    [[TMP26:%.*]] = mul i64 [[TMP25]], 1
; CHECK1-NEXT:    [[TMP27:%.*]] = add i64 [[INDEX]], [[TMP26]]
; CHECK1-NEXT:    [[TMP28:%.*]] = sitofp <vscale x 1 x i32> [[VEC_IND8]] to <vscale x 1 x double>
; CHECK1-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [1024 x double], [1024 x double]* [[A]], i64 0, i64 [[TMP27]]
; CHECK1-NEXT:    [[TMP30:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP31:%.*]] = mul i32 [[TMP30]], 0
; CHECK1-NEXT:    [[TMP32:%.*]] = getelementptr inbounds double, double* [[TMP29]], i32 [[TMP31]]
; CHECK1-NEXT:    [[TMP33:%.*]] = bitcast double* [[TMP32]] to <vscale x 1 x double>*
; CHECK1-NEXT:    store <vscale x 1 x double> [[TMP28]], <vscale x 1 x double>* [[TMP33]], align 8, !tbaa [[TBAA2:![0-9]+]]
; CHECK1-NEXT:    [[TMP34:%.*]] = sub <vscale x 1 x i32> shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 1024, i32 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer), [[VEC_IND13]]
; CHECK1-NEXT:    [[TMP35:%.*]] = sitofp <vscale x 1 x i32> [[TMP34]] to <vscale x 1 x double>
; CHECK1-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [1024 x double], [1024 x double]* [[B]], i64 0, i64 [[TMP27]]
; CHECK1-NEXT:    [[TMP37:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP38:%.*]] = mul i32 [[TMP37]], 0
; CHECK1-NEXT:    [[TMP39:%.*]] = getelementptr inbounds double, double* [[TMP36]], i32 [[TMP38]]
; CHECK1-NEXT:    [[TMP40:%.*]] = bitcast double* [[TMP39]] to <vscale x 1 x double>*
; CHECK1-NEXT:    store <vscale x 1 x double> [[TMP35]], <vscale x 1 x double>* [[TMP40]], align 8, !tbaa [[TBAA2]]
; CHECK1-NEXT:    [[TMP41:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP41]]
; CHECK1-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 1 x i64> [[VEC_IND]], [[DOTSPLAT]]
; CHECK1-NEXT:    [[VEC_IND_NEXT9]] = add <vscale x 1 x i32> [[VEC_IND8]], [[DOTSPLAT7]]
; CHECK1-NEXT:    [[VEC_IND_NEXT14]] = add <vscale x 1 x i32> [[VEC_IND13]], [[DOTSPLAT12]]
; CHECK1-NEXT:    [[TMP42:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK1-NEXT:    br i1 [[TMP42]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]
; CHECK1:       middle.block:
; CHECK1-NEXT:    [[CMP_N:%.*]] = icmp eq i64 1024, [[N_VEC]]
; CHECK1-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP:%.*]], label [[SCALAR_PH]]
; CHECK1:       scalar.ph:
; CHECK1-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[ENTRY:%.*]] ]
; CHECK1-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK1:       for.cond.cleanup:
; CHECK1-NEXT:    [[IDXPROM4:%.*]] = sext i32 [[ARGC:%.*]] to i64
; CHECK1-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds [1024 x double], [1024 x double]* [[A]], i64 0, i64 [[IDXPROM4]]
; CHECK1-NEXT:    [[TMP43:%.*]] = load double, double* [[ARRAYIDX5]], align 8, !tbaa [[TBAA2]]
; CHECK1-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr inbounds [1024 x double], [1024 x double]* [[B]], i64 0, i64 [[IDXPROM4]]
; CHECK1-NEXT:    [[TMP44:%.*]] = load double, double* [[ARRAYIDX7]], align 8, !tbaa [[TBAA2]]
; CHECK1-NEXT:    [[ADD:%.*]] = fadd double [[TMP43]], [[TMP44]]
; CHECK1-NEXT:    [[CONV8:%.*]] = fptosi double [[ADD]] to i32
; CHECK1-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull [[TMP1]]) #[[ATTR3]]
; CHECK1-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull [[TMP0]]) #[[ATTR3]]
; CHECK1-NEXT:    ret i32 [[CONV8]]
; CHECK1:       for.body:
; CHECK1-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK1-NEXT:    [[TMP45:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; CHECK1-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP45]] to double
; CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [1024 x double], [1024 x double]* [[A]], i64 0, i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store double [[CONV]], double* [[ARRAYIDX]], align 8, !tbaa [[TBAA2]]
; CHECK1-NEXT:    [[TMP46:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; CHECK1-NEXT:    [[TMP47:%.*]] = sub i32 1024, [[TMP46]]
; CHECK1-NEXT:    [[CONV1:%.*]] = sitofp i32 [[TMP47]] to double
; CHECK1-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds [1024 x double], [1024 x double]* [[B]], i64 0, i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store double [[CONV1]], double* [[ARRAYIDX3]], align 8, !tbaa [[TBAA2]]
; CHECK1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK1-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 1024
; CHECK1-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP8:![0-9]+]]
;
entry:
  %a = alloca [1024 x double], align 8
  %b = alloca [1024 x double], align 8
  %0 = bitcast [1024 x double]* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %0) #2
  %1 = bitcast [1024 x double]* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %1) #2
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %idxprom4 = sext i32 %argc to i64
  %arrayidx5 = getelementptr inbounds [1024 x double], [1024 x double]* %a, i64 0, i64 %idxprom4
  %2 = load double, double* %arrayidx5, align 8, !tbaa !2
  %arrayidx7 = getelementptr inbounds [1024 x double], [1024 x double]* %b, i64 0, i64 %idxprom4
  %3 = load double, double* %arrayidx7, align 8, !tbaa !2
  %add = fadd double %2, %3
  %conv8 = fptosi double %add to i32
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %1) #2
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %0) #2
  ret i32 %conv8

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %4 = trunc i64 %indvars.iv to i32
  %conv = sitofp i32 %4 to double
  %arrayidx = getelementptr inbounds [1024 x double], [1024 x double]* %a, i64 0, i64 %indvars.iv
  store double %conv, double* %arrayidx, align 8, !tbaa !2
  %5 = trunc i64 %indvars.iv to i32
  %6 = sub i32 1024, %5
  %conv1 = sitofp i32 %6 to double
  %arrayidx3 = getelementptr inbounds [1024 x double], [1024 x double]* %b, i64 0, i64 %indvars.iv
  store double %conv1, double* %arrayidx3, align 8, !tbaa !2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+a,+c,+d,+experimental-v,+f,+m,-relax" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0 (git@repo.hca.bsc.es:EPI/System-Software/llvm-mono.git 823a818e0f44dc9b594f14a328ec52b247f3611a)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"double", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
