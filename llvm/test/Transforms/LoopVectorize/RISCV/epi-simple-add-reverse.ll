; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -S \
; RUN:    -passes='dce,loop-vectorize,instcombine' -scalable-vectorization=only -vector-register-width-factor=8 -riscv-v-vector-bits-min=64 | FileCheck %s
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -S \
; RUN:    -passes='dce,loop-vectorize,instcombine' -scalable-vectorization=only -riscv-v-vector-bits-min=64 | FileCheck %s --check-prefix=CHECK1
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -S -riscv-v-vector-bits-min=64 \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -passes='dce,loop-vectorize,instcombine' -force-vector-interleave=1 < %s | FileCheck %s --check-prefix=CHECKVP
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -S -riscv-v-vector-bits-min=64 \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -passes='dce,loop-vectorize,instcombine' -interleave-no-scalar-epilogue=true < %s | FileCheck %s --check-prefix=INTERLEAVE

source_filename = "t.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128-v128:128:128-v256:128:128-v512:128:128-v1024:128:128"
target triple = "riscv64-unknown-linux-gnu"

; void add_ref(int N, char *restrict a, char *restrict b, char *restrict c) {
;   for (int i = 0; i < N; i++)
;     c[i] = a[i] + b[N - i];
; }

; Function Attrs: nofree norecurse nosync nounwind
define dso_local void @add_ref(i32 signext %N, i8* noalias nocapture readonly %a, i8* noalias nocapture readonly %b, i8* noalias nocapture %c) local_unnamed_addr {
; CHECK-LABEL: @add_ref(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP13:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP13]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 7
; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ugt i64 [[TMP1]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP2]], 7
; CHECK-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], [[TMP3]]
; CHECK-NEXT:    [[N_VEC:%.*]] = sub nsw i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[OFFSET_IDX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP4:%.*]] = trunc i64 [[OFFSET_IDX]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i8, ptr [[A:%.*]], i64 [[OFFSET_IDX]]
; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 64 x i8>, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP6:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP7:%.*]] = shl i64 [[TMP6]], 6
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP7]]
; CHECK-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 64 x i8>, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP9:%.*]] = sub nsw i32 [[N]], [[TMP4]]
; CHECK-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i8, ptr [[B:%.*]], i64 [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP13:%.*]] = shl i64 [[TMP12]], 6
; CHECK-NEXT:    [[TMP14:%.*]] = sub i64 1, [[TMP13]]
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i8, ptr [[TMP11]], i64 [[TMP14]]
; CHECK-NEXT:    [[WIDE_LOAD2:%.*]] = load <vscale x 64 x i8>, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[REVERSE:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[WIDE_LOAD2]])
; CHECK-NEXT:    [[TMP16:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP17:%.*]] = shl i64 [[TMP16]], 6
; CHECK-NEXT:    [[TMP18:%.*]] = sub i64 0, [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = sub i64 1, [[TMP17]]
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr inbounds i8, ptr [[TMP11]], i64 [[TMP18]]
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr inbounds i8, ptr [[TMP20]], i64 [[TMP19]]
; CHECK-NEXT:    [[WIDE_LOAD3:%.*]] = load <vscale x 64 x i8>, ptr [[TMP21]], align 1
; CHECK-NEXT:    [[REVERSE4:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[WIDE_LOAD3]])
; CHECK-NEXT:    [[TMP22:%.*]] = add <vscale x 64 x i8> [[REVERSE]], [[WIDE_LOAD]]
; CHECK-NEXT:    [[TMP23:%.*]] = add <vscale x 64 x i8> [[REVERSE4]], [[WIDE_LOAD1]]
; CHECK-NEXT:    [[TMP24:%.*]] = getelementptr inbounds i8, ptr [[C:%.*]], i64 [[OFFSET_IDX]]
; CHECK-NEXT:    store <vscale x 64 x i8> [[TMP22]], ptr [[TMP24]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP26:%.*]] = shl i64 [[TMP25]], 6
; CHECK-NEXT:    [[TMP27:%.*]] = getelementptr inbounds i8, ptr [[TMP24]], i64 [[TMP26]]
; CHECK-NEXT:    store <vscale x 64 x i8> [[TMP23]], ptr [[TMP27]], align 1
; CHECK-NEXT:    [[TMP28:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP29:%.*]] = shl i64 [[TMP28]], 7
; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[OFFSET_IDX]], [[TMP29]]
; CHECK-NEXT:    [[TMP30:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP30]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[A]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP31:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; CHECK-NEXT:    [[TMP32:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; CHECK-NEXT:    [[SUB:%.*]] = sub nsw i32 [[N]], [[TMP32]]
; CHECK-NEXT:    [[IDXPROM1:%.*]] = sext i32 [[SUB]] to i64
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, ptr [[B]], i64 [[IDXPROM1]]
; CHECK-NEXT:    [[TMP33:%.*]] = load i8, ptr [[ARRAYIDX2]], align 1
; CHECK-NEXT:    [[ADD:%.*]] = add i8 [[TMP33]], [[TMP31]]
; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds i8, ptr [[C]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store i8 [[ADD]], ptr [[ARRAYIDX6]], align 1
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
; CHECK1-LABEL: @add_ref(
; CHECK1-NEXT:  entry:
; CHECK1-NEXT:    [[CMP13:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK1-NEXT:    br i1 [[CMP13]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK1:       for.body.preheader:
; CHECK1-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK1-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 6
; CHECK1-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ugt i64 [[TMP1]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK1:       vector.ph:
; CHECK1-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP2]], 6
; CHECK1-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], [[TMP3]]
; CHECK1-NEXT:    [[N_VEC:%.*]] = sub nsw i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; CHECK1-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK1:       vector.body:
; CHECK1-NEXT:    [[OFFSET_IDX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK1-NEXT:    [[TMP4:%.*]] = trunc i64 [[OFFSET_IDX]] to i32
; CHECK1-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i8, ptr [[A:%.*]], i64 [[OFFSET_IDX]]
; CHECK1-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 8 x i8>, ptr [[TMP5]], align 1
; CHECK1-NEXT:    [[TMP6:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP7:%.*]] = shl i64 [[TMP6]], 3
; CHECK1-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP7]]
; CHECK1-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 8 x i8>, ptr [[TMP8]], align 1
; CHECK1-NEXT:    [[TMP9:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP10:%.*]] = shl i64 [[TMP9]], 4
; CHECK1-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP10]]
; CHECK1-NEXT:    [[WIDE_LOAD2:%.*]] = load <vscale x 8 x i8>, ptr [[TMP11]], align 1
; CHECK1-NEXT:    [[TMP12:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP13:%.*]] = mul i64 [[TMP12]], 24
; CHECK1-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP13]]
; CHECK1-NEXT:    [[WIDE_LOAD3:%.*]] = load <vscale x 8 x i8>, ptr [[TMP14]], align 1
; CHECK1-NEXT:    [[TMP15:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP16:%.*]] = shl i64 [[TMP15]], 5
; CHECK1-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP16]]
; CHECK1-NEXT:    [[WIDE_LOAD4:%.*]] = load <vscale x 8 x i8>, ptr [[TMP17]], align 1
; CHECK1-NEXT:    [[TMP18:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP19:%.*]] = mul i64 [[TMP18]], 40
; CHECK1-NEXT:    [[TMP20:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP19]]
; CHECK1-NEXT:    [[WIDE_LOAD5:%.*]] = load <vscale x 8 x i8>, ptr [[TMP20]], align 1
; CHECK1-NEXT:    [[TMP21:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP22:%.*]] = mul i64 [[TMP21]], 48
; CHECK1-NEXT:    [[TMP23:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP22]]
; CHECK1-NEXT:    [[WIDE_LOAD6:%.*]] = load <vscale x 8 x i8>, ptr [[TMP23]], align 1
; CHECK1-NEXT:    [[TMP24:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP25:%.*]] = mul i64 [[TMP24]], 56
; CHECK1-NEXT:    [[TMP26:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP25]]
; CHECK1-NEXT:    [[WIDE_LOAD7:%.*]] = load <vscale x 8 x i8>, ptr [[TMP26]], align 1
; CHECK1-NEXT:    [[TMP27:%.*]] = sub nsw i32 [[N]], [[TMP4]]
; CHECK1-NEXT:    [[TMP28:%.*]] = sext i32 [[TMP27]] to i64
; CHECK1-NEXT:    [[TMP29:%.*]] = getelementptr inbounds i8, ptr [[B:%.*]], i64 [[TMP28]]
; CHECK1-NEXT:    [[TMP30:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP31:%.*]] = shl i64 [[TMP30]], 3
; CHECK1-NEXT:    [[TMP32:%.*]] = sub i64 1, [[TMP31]]
; CHECK1-NEXT:    [[TMP33:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP32]]
; CHECK1-NEXT:    [[WIDE_LOAD8:%.*]] = load <vscale x 8 x i8>, ptr [[TMP33]], align 1
; CHECK1-NEXT:    [[REVERSE:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD8]])
; CHECK1-NEXT:    [[TMP34:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP35:%.*]] = shl i64 [[TMP34]], 3
; CHECK1-NEXT:    [[TMP36:%.*]] = sub i64 0, [[TMP35]]
; CHECK1-NEXT:    [[TMP37:%.*]] = sub i64 1, [[TMP35]]
; CHECK1-NEXT:    [[TMP38:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP36]]
; CHECK1-NEXT:    [[TMP39:%.*]] = getelementptr inbounds i8, ptr [[TMP38]], i64 [[TMP37]]
; CHECK1-NEXT:    [[WIDE_LOAD9:%.*]] = load <vscale x 8 x i8>, ptr [[TMP39]], align 1
; CHECK1-NEXT:    [[REVERSE10:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD9]])
; CHECK1-NEXT:    [[TMP40:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP41:%.*]] = shl i64 [[TMP40]], 3
; CHECK1-NEXT:    [[TMP42:%.*]] = mul i64 [[TMP40]], -16
; CHECK1-NEXT:    [[TMP43:%.*]] = sub i64 1, [[TMP41]]
; CHECK1-NEXT:    [[TMP44:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP42]]
; CHECK1-NEXT:    [[TMP45:%.*]] = getelementptr inbounds i8, ptr [[TMP44]], i64 [[TMP43]]
; CHECK1-NEXT:    [[WIDE_LOAD11:%.*]] = load <vscale x 8 x i8>, ptr [[TMP45]], align 1
; CHECK1-NEXT:    [[REVERSE12:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD11]])
; CHECK1-NEXT:    [[TMP46:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP47:%.*]] = shl i64 [[TMP46]], 3
; CHECK1-NEXT:    [[TMP48:%.*]] = mul i64 [[TMP46]], -24
; CHECK1-NEXT:    [[TMP49:%.*]] = sub i64 1, [[TMP47]]
; CHECK1-NEXT:    [[TMP50:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP48]]
; CHECK1-NEXT:    [[TMP51:%.*]] = getelementptr inbounds i8, ptr [[TMP50]], i64 [[TMP49]]
; CHECK1-NEXT:    [[WIDE_LOAD13:%.*]] = load <vscale x 8 x i8>, ptr [[TMP51]], align 1
; CHECK1-NEXT:    [[REVERSE14:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD13]])
; CHECK1-NEXT:    [[TMP52:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP53:%.*]] = shl i64 [[TMP52]], 3
; CHECK1-NEXT:    [[TMP54:%.*]] = mul i64 [[TMP52]], -32
; CHECK1-NEXT:    [[TMP55:%.*]] = sub i64 1, [[TMP53]]
; CHECK1-NEXT:    [[TMP56:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP54]]
; CHECK1-NEXT:    [[TMP57:%.*]] = getelementptr inbounds i8, ptr [[TMP56]], i64 [[TMP55]]
; CHECK1-NEXT:    [[WIDE_LOAD15:%.*]] = load <vscale x 8 x i8>, ptr [[TMP57]], align 1
; CHECK1-NEXT:    [[REVERSE16:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD15]])
; CHECK1-NEXT:    [[TMP58:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP59:%.*]] = shl i64 [[TMP58]], 3
; CHECK1-NEXT:    [[TMP60:%.*]] = mul i64 [[TMP58]], -40
; CHECK1-NEXT:    [[TMP61:%.*]] = sub i64 1, [[TMP59]]
; CHECK1-NEXT:    [[TMP62:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP60]]
; CHECK1-NEXT:    [[TMP63:%.*]] = getelementptr inbounds i8, ptr [[TMP62]], i64 [[TMP61]]
; CHECK1-NEXT:    [[WIDE_LOAD17:%.*]] = load <vscale x 8 x i8>, ptr [[TMP63]], align 1
; CHECK1-NEXT:    [[REVERSE18:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD17]])
; CHECK1-NEXT:    [[TMP64:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP65:%.*]] = shl i64 [[TMP64]], 3
; CHECK1-NEXT:    [[TMP66:%.*]] = mul i64 [[TMP64]], -48
; CHECK1-NEXT:    [[TMP67:%.*]] = sub i64 1, [[TMP65]]
; CHECK1-NEXT:    [[TMP68:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP66]]
; CHECK1-NEXT:    [[TMP69:%.*]] = getelementptr inbounds i8, ptr [[TMP68]], i64 [[TMP67]]
; CHECK1-NEXT:    [[WIDE_LOAD19:%.*]] = load <vscale x 8 x i8>, ptr [[TMP69]], align 1
; CHECK1-NEXT:    [[REVERSE20:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD19]])
; CHECK1-NEXT:    [[TMP70:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP71:%.*]] = shl i64 [[TMP70]], 3
; CHECK1-NEXT:    [[TMP72:%.*]] = mul i64 [[TMP70]], -56
; CHECK1-NEXT:    [[TMP73:%.*]] = sub i64 1, [[TMP71]]
; CHECK1-NEXT:    [[TMP74:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP72]]
; CHECK1-NEXT:    [[TMP75:%.*]] = getelementptr inbounds i8, ptr [[TMP74]], i64 [[TMP73]]
; CHECK1-NEXT:    [[WIDE_LOAD21:%.*]] = load <vscale x 8 x i8>, ptr [[TMP75]], align 1
; CHECK1-NEXT:    [[REVERSE22:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD21]])
; CHECK1-NEXT:    [[TMP76:%.*]] = add <vscale x 8 x i8> [[REVERSE]], [[WIDE_LOAD]]
; CHECK1-NEXT:    [[TMP77:%.*]] = add <vscale x 8 x i8> [[REVERSE10]], [[WIDE_LOAD1]]
; CHECK1-NEXT:    [[TMP78:%.*]] = add <vscale x 8 x i8> [[REVERSE12]], [[WIDE_LOAD2]]
; CHECK1-NEXT:    [[TMP79:%.*]] = add <vscale x 8 x i8> [[REVERSE14]], [[WIDE_LOAD3]]
; CHECK1-NEXT:    [[TMP80:%.*]] = add <vscale x 8 x i8> [[REVERSE16]], [[WIDE_LOAD4]]
; CHECK1-NEXT:    [[TMP81:%.*]] = add <vscale x 8 x i8> [[REVERSE18]], [[WIDE_LOAD5]]
; CHECK1-NEXT:    [[TMP82:%.*]] = add <vscale x 8 x i8> [[REVERSE20]], [[WIDE_LOAD6]]
; CHECK1-NEXT:    [[TMP83:%.*]] = add <vscale x 8 x i8> [[REVERSE22]], [[WIDE_LOAD7]]
; CHECK1-NEXT:    [[TMP84:%.*]] = getelementptr inbounds i8, ptr [[C:%.*]], i64 [[OFFSET_IDX]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP76]], ptr [[TMP84]], align 1
; CHECK1-NEXT:    [[TMP85:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP86:%.*]] = shl i64 [[TMP85]], 3
; CHECK1-NEXT:    [[TMP87:%.*]] = getelementptr inbounds i8, ptr [[TMP84]], i64 [[TMP86]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP77]], ptr [[TMP87]], align 1
; CHECK1-NEXT:    [[TMP88:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP89:%.*]] = shl i64 [[TMP88]], 4
; CHECK1-NEXT:    [[TMP90:%.*]] = getelementptr inbounds i8, ptr [[TMP84]], i64 [[TMP89]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP78]], ptr [[TMP90]], align 1
; CHECK1-NEXT:    [[TMP91:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP92:%.*]] = mul i64 [[TMP91]], 24
; CHECK1-NEXT:    [[TMP93:%.*]] = getelementptr inbounds i8, ptr [[TMP84]], i64 [[TMP92]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP79]], ptr [[TMP93]], align 1
; CHECK1-NEXT:    [[TMP94:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP95:%.*]] = shl i64 [[TMP94]], 5
; CHECK1-NEXT:    [[TMP96:%.*]] = getelementptr inbounds i8, ptr [[TMP84]], i64 [[TMP95]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP80]], ptr [[TMP96]], align 1
; CHECK1-NEXT:    [[TMP97:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP98:%.*]] = mul i64 [[TMP97]], 40
; CHECK1-NEXT:    [[TMP99:%.*]] = getelementptr inbounds i8, ptr [[TMP84]], i64 [[TMP98]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP81]], ptr [[TMP99]], align 1
; CHECK1-NEXT:    [[TMP100:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP101:%.*]] = mul i64 [[TMP100]], 48
; CHECK1-NEXT:    [[TMP102:%.*]] = getelementptr inbounds i8, ptr [[TMP84]], i64 [[TMP101]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP82]], ptr [[TMP102]], align 1
; CHECK1-NEXT:    [[TMP103:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP104:%.*]] = mul i64 [[TMP103]], 56
; CHECK1-NEXT:    [[TMP105:%.*]] = getelementptr inbounds i8, ptr [[TMP84]], i64 [[TMP104]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP83]], ptr [[TMP105]], align 1
; CHECK1-NEXT:    [[TMP106:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP107:%.*]] = shl i64 [[TMP106]], 6
; CHECK1-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[OFFSET_IDX]], [[TMP107]]
; CHECK1-NEXT:    [[TMP108:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK1-NEXT:    br i1 [[TMP108]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK1:       middle.block:
; CHECK1-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; CHECK1-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK1:       scalar.ph:
; CHECK1-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK1:       for.cond.cleanup.loopexit:
; CHECK1-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK1:       for.cond.cleanup:
; CHECK1-NEXT:    ret void
; CHECK1:       for.body:
; CHECK1-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[A]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP109:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; CHECK1-NEXT:    [[TMP110:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; CHECK1-NEXT:    [[SUB:%.*]] = sub nsw i32 [[N]], [[TMP110]]
; CHECK1-NEXT:    [[IDXPROM1:%.*]] = sext i32 [[SUB]] to i64
; CHECK1-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, ptr [[B]], i64 [[IDXPROM1]]
; CHECK1-NEXT:    [[TMP111:%.*]] = load i8, ptr [[ARRAYIDX2]], align 1
; CHECK1-NEXT:    [[ADD:%.*]] = add i8 [[TMP111]], [[TMP109]]
; CHECK1-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds i8, ptr [[C]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store i8 [[ADD]], ptr [[ARRAYIDX6]], align 1
; CHECK1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK1-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
; CHECKVP-LABEL: @add_ref(
; CHECKVP-NEXT:  entry:
; CHECKVP-NEXT:    [[CMP13:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECKVP-NEXT:    br i1 [[CMP13]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECKVP:       for.body.preheader:
; CHECKVP-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECKVP-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECKVP:       vector.ph:
; CHECKVP-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECKVP:       vector.body:
; CHECKVP-NEXT:    [[OFFSET_IDX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECKVP-NEXT:    [[TMP0:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[OFFSET_IDX]]
; CHECKVP-NEXT:    [[TMP1:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP0]], i64 0, i64 0)
; CHECKVP-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i32
; CHECKVP-NEXT:    [[TMP3:%.*]] = trunc i64 [[OFFSET_IDX]] to i32
; CHECKVP-NEXT:    [[TMP4:%.*]] = getelementptr inbounds i8, ptr [[A:%.*]], i64 [[OFFSET_IDX]]
; CHECKVP-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP4]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; CHECKVP-NEXT:    [[TMP5:%.*]] = sub nsw i32 [[N]], [[TMP3]]
; CHECKVP-NEXT:    [[TMP6:%.*]] = sext i32 [[TMP5]] to i64
; CHECKVP-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i8, ptr [[B:%.*]], i64 [[TMP6]]
; CHECKVP-NEXT:    [[TMP8:%.*]] = shl i64 [[TMP1]], 32
; CHECKVP-NEXT:    [[SEXT:%.*]] = sub i64 4294967296, [[TMP8]]
; CHECKVP-NEXT:    [[TMP9:%.*]] = ashr exact i64 [[SEXT]], 32
; CHECKVP-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i8, ptr [[TMP7]], i64 [[TMP9]]
; CHECKVP-NEXT:    [[VP_OP_LOAD3:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP10]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; CHECKVP-NEXT:    [[TMP11:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD3]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; CHECKVP-NEXT:    [[VP_OP:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP11]], <vscale x 8 x i8> [[VP_OP_LOAD]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; CHECKVP-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i8, ptr [[C:%.*]], i64 [[OFFSET_IDX]]
; CHECKVP-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP]], ptr [[TMP12]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; CHECKVP-NEXT:    [[TMP13:%.*]] = and i64 [[TMP1]], 4294967295
; CHECKVP-NEXT:    [[INDEX_NEXT]] = add i64 [[OFFSET_IDX]], [[TMP13]]
; CHECKVP-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECKVP-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECKVP:       middle.block:
; CHECKVP-NEXT:    br i1 true, label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECKVP:       scalar.ph:
; CHECKVP-NEXT:    br label [[FOR_BODY:%.*]]
; CHECKVP:       for.cond.cleanup.loopexit:
; CHECKVP-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECKVP:       for.cond.cleanup:
; CHECKVP-NEXT:    ret void
; CHECKVP:       for.body:
; CHECKVP-NEXT:    br i1 poison, label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
; INTERLEAVE-LABEL: @add_ref(
; INTERLEAVE-NEXT:  entry:
; INTERLEAVE-NEXT:    [[CMP13:%.*]] = icmp sgt i32 [[N:%.*]], 0
; INTERLEAVE-NEXT:    br i1 [[CMP13]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; INTERLEAVE:       for.body.preheader:
; INTERLEAVE-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; INTERLEAVE-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; INTERLEAVE:       vector.ph:
; INTERLEAVE-NEXT:    br label [[VECTOR_BODY:%.*]]
; INTERLEAVE:       vector.body:
; INTERLEAVE-NEXT:    [[OFFSET_IDX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; INTERLEAVE-NEXT:    [[TMP0:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[OFFSET_IDX]]
; INTERLEAVE-NEXT:    [[TMP1:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP0]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i32
; INTERLEAVE-NEXT:    [[TMP3:%.*]] = sub i64 [[TMP0]], [[TMP1]]
; INTERLEAVE-NEXT:    [[TMP4:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP3]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP4]] to i32
; INTERLEAVE-NEXT:    [[TMP6:%.*]] = sub i64 [[TMP3]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP7:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP6]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP8:%.*]] = trunc i64 [[TMP7]] to i32
; INTERLEAVE-NEXT:    [[TMP9:%.*]] = sub i64 [[TMP6]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP10:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP9]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP11:%.*]] = trunc i64 [[TMP10]] to i32
; INTERLEAVE-NEXT:    [[TMP12:%.*]] = sub i64 [[TMP9]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP13:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP12]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP14:%.*]] = trunc i64 [[TMP13]] to i32
; INTERLEAVE-NEXT:    [[TMP15:%.*]] = sub i64 [[TMP12]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP16:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP15]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP17:%.*]] = trunc i64 [[TMP16]] to i32
; INTERLEAVE-NEXT:    [[TMP18:%.*]] = sub i64 [[TMP15]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP19:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP18]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP20:%.*]] = trunc i64 [[TMP19]] to i32
; INTERLEAVE-NEXT:    [[TMP21:%.*]] = sub i64 [[TMP18]], [[TMP19]]
; INTERLEAVE-NEXT:    [[TMP22:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP21]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP23:%.*]] = trunc i64 [[TMP22]] to i32
; INTERLEAVE-NEXT:    [[TMP24:%.*]] = trunc i64 [[OFFSET_IDX]] to i32
; INTERLEAVE-NEXT:    [[TMP25:%.*]] = getelementptr inbounds i8, ptr [[A:%.*]], i64 [[OFFSET_IDX]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP25]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; INTERLEAVE-NEXT:    [[SEXT:%.*]] = shl i64 [[TMP1]], 32
; INTERLEAVE-NEXT:    [[TMP26:%.*]] = ashr exact i64 [[SEXT]], 32
; INTERLEAVE-NEXT:    [[TMP27:%.*]] = getelementptr inbounds i8, ptr [[TMP25]], i64 [[TMP26]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD29:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP27]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; INTERLEAVE-NEXT:    [[TMP28:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[SEXT51:%.*]] = shl i64 [[TMP28]], 32
; INTERLEAVE-NEXT:    [[TMP29:%.*]] = ashr exact i64 [[SEXT51]], 32
; INTERLEAVE-NEXT:    [[TMP30:%.*]] = getelementptr inbounds i8, ptr [[TMP25]], i64 [[TMP29]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD30:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP30]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP8]])
; INTERLEAVE-NEXT:    [[TMP31:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP32:%.*]] = add i64 [[TMP31]], [[TMP7]]
; INTERLEAVE-NEXT:    [[SEXT52:%.*]] = shl i64 [[TMP32]], 32
; INTERLEAVE-NEXT:    [[TMP33:%.*]] = ashr exact i64 [[SEXT52]], 32
; INTERLEAVE-NEXT:    [[TMP34:%.*]] = getelementptr inbounds i8, ptr [[TMP25]], i64 [[TMP33]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD31:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP34]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[TMP35:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP36:%.*]] = add i64 [[TMP35]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP37:%.*]] = add i64 [[TMP36]], [[TMP10]]
; INTERLEAVE-NEXT:    [[SEXT53:%.*]] = shl i64 [[TMP37]], 32
; INTERLEAVE-NEXT:    [[TMP38:%.*]] = ashr exact i64 [[SEXT53]], 32
; INTERLEAVE-NEXT:    [[TMP39:%.*]] = getelementptr inbounds i8, ptr [[TMP25]], i64 [[TMP38]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD32:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP39]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[TMP40:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP41:%.*]] = add i64 [[TMP40]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP42:%.*]] = add i64 [[TMP41]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP43:%.*]] = add i64 [[TMP42]], [[TMP13]]
; INTERLEAVE-NEXT:    [[SEXT54:%.*]] = shl i64 [[TMP43]], 32
; INTERLEAVE-NEXT:    [[TMP44:%.*]] = ashr exact i64 [[SEXT54]], 32
; INTERLEAVE-NEXT:    [[TMP45:%.*]] = getelementptr inbounds i8, ptr [[TMP25]], i64 [[TMP44]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD33:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP45]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[TMP46:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP47:%.*]] = add i64 [[TMP46]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP48:%.*]] = add i64 [[TMP47]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP49:%.*]] = add i64 [[TMP48]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP50:%.*]] = add i64 [[TMP49]], [[TMP16]]
; INTERLEAVE-NEXT:    [[SEXT55:%.*]] = shl i64 [[TMP50]], 32
; INTERLEAVE-NEXT:    [[TMP51:%.*]] = ashr exact i64 [[SEXT55]], 32
; INTERLEAVE-NEXT:    [[TMP52:%.*]] = getelementptr inbounds i8, ptr [[TMP25]], i64 [[TMP51]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD34:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP52]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP53:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP54:%.*]] = add i64 [[TMP53]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP55:%.*]] = add i64 [[TMP54]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP56:%.*]] = add i64 [[TMP55]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP57:%.*]] = add i64 [[TMP56]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP58:%.*]] = add i64 [[TMP57]], [[TMP19]]
; INTERLEAVE-NEXT:    [[SEXT56:%.*]] = shl i64 [[TMP58]], 32
; INTERLEAVE-NEXT:    [[TMP59:%.*]] = ashr exact i64 [[SEXT56]], 32
; INTERLEAVE-NEXT:    [[TMP60:%.*]] = getelementptr inbounds i8, ptr [[TMP25]], i64 [[TMP59]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD35:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP60]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[TMP61:%.*]] = sub nsw i32 [[N]], [[TMP24]]
; INTERLEAVE-NEXT:    [[TMP62:%.*]] = sext i32 [[TMP61]] to i64
; INTERLEAVE-NEXT:    [[TMP63:%.*]] = getelementptr inbounds i8, ptr [[B:%.*]], i64 [[TMP62]]
; INTERLEAVE-NEXT:    [[TMP64:%.*]] = shl i64 [[TMP1]], 32
; INTERLEAVE-NEXT:    [[SEXT57:%.*]] = sub i64 4294967296, [[TMP64]]
; INTERLEAVE-NEXT:    [[TMP65:%.*]] = ashr exact i64 [[SEXT57]], 32
; INTERLEAVE-NEXT:    [[TMP66:%.*]] = getelementptr inbounds i8, ptr [[TMP63]], i64 [[TMP65]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD36:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP66]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; INTERLEAVE-NEXT:    [[TMP67:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD36]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; INTERLEAVE-NEXT:    [[DOTNEG:%.*]] = mul i64 [[TMP1]], -4294967296
; INTERLEAVE-NEXT:    [[TMP68:%.*]] = ashr exact i64 [[DOTNEG]], 32
; INTERLEAVE-NEXT:    [[TMP69:%.*]] = getelementptr inbounds i8, ptr [[TMP63]], i64 [[TMP68]]
; INTERLEAVE-NEXT:    [[TMP70:%.*]] = shl i64 [[TMP4]], 32
; INTERLEAVE-NEXT:    [[SEXT59:%.*]] = sub i64 4294967296, [[TMP70]]
; INTERLEAVE-NEXT:    [[TMP71:%.*]] = ashr exact i64 [[SEXT59]], 32
; INTERLEAVE-NEXT:    [[TMP72:%.*]] = getelementptr inbounds i8, ptr [[TMP69]], i64 [[TMP71]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD37:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP72]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; INTERLEAVE-NEXT:    [[TMP73:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD37]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; INTERLEAVE-NEXT:    [[TMP74:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[DOTNEG61:%.*]] = mul i64 [[TMP74]], -4294967296
; INTERLEAVE-NEXT:    [[TMP75:%.*]] = ashr exact i64 [[DOTNEG61]], 32
; INTERLEAVE-NEXT:    [[TMP76:%.*]] = getelementptr inbounds i8, ptr [[TMP63]], i64 [[TMP75]]
; INTERLEAVE-NEXT:    [[TMP77:%.*]] = shl i64 [[TMP7]], 32
; INTERLEAVE-NEXT:    [[SEXT62:%.*]] = sub i64 4294967296, [[TMP77]]
; INTERLEAVE-NEXT:    [[TMP78:%.*]] = ashr exact i64 [[SEXT62]], 32
; INTERLEAVE-NEXT:    [[TMP79:%.*]] = getelementptr inbounds i8, ptr [[TMP76]], i64 [[TMP78]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD38:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP79]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP8]])
; INTERLEAVE-NEXT:    [[TMP80:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD38]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP8]])
; INTERLEAVE-NEXT:    [[TMP81:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP82:%.*]] = add i64 [[TMP81]], [[TMP7]]
; INTERLEAVE-NEXT:    [[DOTNEG64:%.*]] = mul i64 [[TMP82]], -4294967296
; INTERLEAVE-NEXT:    [[TMP83:%.*]] = ashr exact i64 [[DOTNEG64]], 32
; INTERLEAVE-NEXT:    [[TMP84:%.*]] = getelementptr inbounds i8, ptr [[TMP63]], i64 [[TMP83]]
; INTERLEAVE-NEXT:    [[TMP85:%.*]] = shl i64 [[TMP10]], 32
; INTERLEAVE-NEXT:    [[SEXT65:%.*]] = sub i64 4294967296, [[TMP85]]
; INTERLEAVE-NEXT:    [[TMP86:%.*]] = ashr exact i64 [[SEXT65]], 32
; INTERLEAVE-NEXT:    [[TMP87:%.*]] = getelementptr inbounds i8, ptr [[TMP84]], i64 [[TMP86]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD39:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP87]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[TMP88:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD39]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[TMP89:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP90:%.*]] = add i64 [[TMP89]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP91:%.*]] = add i64 [[TMP90]], [[TMP10]]
; INTERLEAVE-NEXT:    [[DOTNEG67:%.*]] = mul i64 [[TMP91]], -4294967296
; INTERLEAVE-NEXT:    [[TMP92:%.*]] = ashr exact i64 [[DOTNEG67]], 32
; INTERLEAVE-NEXT:    [[TMP93:%.*]] = getelementptr inbounds i8, ptr [[TMP63]], i64 [[TMP92]]
; INTERLEAVE-NEXT:    [[TMP94:%.*]] = shl i64 [[TMP13]], 32
; INTERLEAVE-NEXT:    [[SEXT68:%.*]] = sub i64 4294967296, [[TMP94]]
; INTERLEAVE-NEXT:    [[TMP95:%.*]] = ashr exact i64 [[SEXT68]], 32
; INTERLEAVE-NEXT:    [[TMP96:%.*]] = getelementptr inbounds i8, ptr [[TMP93]], i64 [[TMP95]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD40:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP96]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[TMP97:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD40]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[TMP98:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP99:%.*]] = add i64 [[TMP98]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP100:%.*]] = add i64 [[TMP99]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP101:%.*]] = add i64 [[TMP100]], [[TMP13]]
; INTERLEAVE-NEXT:    [[DOTNEG70:%.*]] = mul i64 [[TMP101]], -4294967296
; INTERLEAVE-NEXT:    [[TMP102:%.*]] = ashr exact i64 [[DOTNEG70]], 32
; INTERLEAVE-NEXT:    [[TMP103:%.*]] = getelementptr inbounds i8, ptr [[TMP63]], i64 [[TMP102]]
; INTERLEAVE-NEXT:    [[TMP104:%.*]] = shl i64 [[TMP16]], 32
; INTERLEAVE-NEXT:    [[SEXT71:%.*]] = sub i64 4294967296, [[TMP104]]
; INTERLEAVE-NEXT:    [[TMP105:%.*]] = ashr exact i64 [[SEXT71]], 32
; INTERLEAVE-NEXT:    [[TMP106:%.*]] = getelementptr inbounds i8, ptr [[TMP103]], i64 [[TMP105]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD41:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP106]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[TMP107:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD41]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[TMP108:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP109:%.*]] = add i64 [[TMP108]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP110:%.*]] = add i64 [[TMP109]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP111:%.*]] = add i64 [[TMP110]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP112:%.*]] = add i64 [[TMP111]], [[TMP16]]
; INTERLEAVE-NEXT:    [[DOTNEG73:%.*]] = mul i64 [[TMP112]], -4294967296
; INTERLEAVE-NEXT:    [[TMP113:%.*]] = ashr exact i64 [[DOTNEG73]], 32
; INTERLEAVE-NEXT:    [[TMP114:%.*]] = getelementptr inbounds i8, ptr [[TMP63]], i64 [[TMP113]]
; INTERLEAVE-NEXT:    [[TMP115:%.*]] = shl i64 [[TMP19]], 32
; INTERLEAVE-NEXT:    [[SEXT74:%.*]] = sub i64 4294967296, [[TMP115]]
; INTERLEAVE-NEXT:    [[TMP116:%.*]] = ashr exact i64 [[SEXT74]], 32
; INTERLEAVE-NEXT:    [[TMP117:%.*]] = getelementptr inbounds i8, ptr [[TMP114]], i64 [[TMP116]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD42:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP117]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP118:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD42]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP119:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP120:%.*]] = add i64 [[TMP119]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP121:%.*]] = add i64 [[TMP120]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP122:%.*]] = add i64 [[TMP121]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP123:%.*]] = add i64 [[TMP122]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP124:%.*]] = add i64 [[TMP123]], [[TMP19]]
; INTERLEAVE-NEXT:    [[DOTNEG76:%.*]] = mul i64 [[TMP124]], -4294967296
; INTERLEAVE-NEXT:    [[TMP125:%.*]] = ashr exact i64 [[DOTNEG76]], 32
; INTERLEAVE-NEXT:    [[TMP126:%.*]] = getelementptr inbounds i8, ptr [[TMP63]], i64 [[TMP125]]
; INTERLEAVE-NEXT:    [[TMP127:%.*]] = shl i64 [[TMP22]], 32
; INTERLEAVE-NEXT:    [[SEXT77:%.*]] = sub i64 4294967296, [[TMP127]]
; INTERLEAVE-NEXT:    [[TMP128:%.*]] = ashr exact i64 [[SEXT77]], 32
; INTERLEAVE-NEXT:    [[TMP129:%.*]] = getelementptr inbounds i8, ptr [[TMP126]], i64 [[TMP128]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD43:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP129]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[TMP130:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD43]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[VP_OP:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP67]], <vscale x 8 x i8> [[VP_OP_LOAD]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; INTERLEAVE-NEXT:    [[VP_OP44:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP73]], <vscale x 8 x i8> [[VP_OP_LOAD29]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; INTERLEAVE-NEXT:    [[VP_OP45:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP80]], <vscale x 8 x i8> [[VP_OP_LOAD30]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP8]])
; INTERLEAVE-NEXT:    [[VP_OP46:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP88]], <vscale x 8 x i8> [[VP_OP_LOAD31]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[VP_OP47:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP97]], <vscale x 8 x i8> [[VP_OP_LOAD32]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[VP_OP48:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP107]], <vscale x 8 x i8> [[VP_OP_LOAD33]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[VP_OP49:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP118]], <vscale x 8 x i8> [[VP_OP_LOAD34]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[VP_OP50:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP130]], <vscale x 8 x i8> [[VP_OP_LOAD35]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[TMP131:%.*]] = getelementptr inbounds i8, ptr [[C:%.*]], i64 [[OFFSET_IDX]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP]], ptr [[TMP131]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; INTERLEAVE-NEXT:    [[SEXT78:%.*]] = shl i64 [[TMP1]], 32
; INTERLEAVE-NEXT:    [[TMP132:%.*]] = ashr exact i64 [[SEXT78]], 32
; INTERLEAVE-NEXT:    [[TMP133:%.*]] = getelementptr inbounds i8, ptr [[TMP131]], i64 [[TMP132]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP44]], ptr [[TMP133]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP5]])
; INTERLEAVE-NEXT:    [[TMP134:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[SEXT79:%.*]] = shl i64 [[TMP134]], 32
; INTERLEAVE-NEXT:    [[TMP135:%.*]] = ashr exact i64 [[SEXT79]], 32
; INTERLEAVE-NEXT:    [[TMP136:%.*]] = getelementptr inbounds i8, ptr [[TMP131]], i64 [[TMP135]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP45]], ptr [[TMP136]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP8]])
; INTERLEAVE-NEXT:    [[TMP137:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP138:%.*]] = add i64 [[TMP137]], [[TMP7]]
; INTERLEAVE-NEXT:    [[SEXT80:%.*]] = shl i64 [[TMP138]], 32
; INTERLEAVE-NEXT:    [[TMP139:%.*]] = ashr exact i64 [[SEXT80]], 32
; INTERLEAVE-NEXT:    [[TMP140:%.*]] = getelementptr inbounds i8, ptr [[TMP131]], i64 [[TMP139]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP46]], ptr [[TMP140]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[TMP141:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP142:%.*]] = add i64 [[TMP141]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP143:%.*]] = add i64 [[TMP142]], [[TMP10]]
; INTERLEAVE-NEXT:    [[SEXT81:%.*]] = shl i64 [[TMP143]], 32
; INTERLEAVE-NEXT:    [[TMP144:%.*]] = ashr exact i64 [[SEXT81]], 32
; INTERLEAVE-NEXT:    [[TMP145:%.*]] = getelementptr inbounds i8, ptr [[TMP131]], i64 [[TMP144]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP47]], ptr [[TMP145]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[TMP146:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP147:%.*]] = add i64 [[TMP146]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP148:%.*]] = add i64 [[TMP147]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP149:%.*]] = add i64 [[TMP148]], [[TMP13]]
; INTERLEAVE-NEXT:    [[SEXT82:%.*]] = shl i64 [[TMP149]], 32
; INTERLEAVE-NEXT:    [[TMP150:%.*]] = ashr exact i64 [[SEXT82]], 32
; INTERLEAVE-NEXT:    [[TMP151:%.*]] = getelementptr inbounds i8, ptr [[TMP131]], i64 [[TMP150]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP48]], ptr [[TMP151]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[TMP152:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP153:%.*]] = add i64 [[TMP152]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP154:%.*]] = add i64 [[TMP153]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP155:%.*]] = add i64 [[TMP154]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP156:%.*]] = add i64 [[TMP155]], [[TMP16]]
; INTERLEAVE-NEXT:    [[SEXT83:%.*]] = shl i64 [[TMP156]], 32
; INTERLEAVE-NEXT:    [[TMP157:%.*]] = ashr exact i64 [[SEXT83]], 32
; INTERLEAVE-NEXT:    [[TMP158:%.*]] = getelementptr inbounds i8, ptr [[TMP131]], i64 [[TMP157]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP49]], ptr [[TMP158]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP159:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP160:%.*]] = add i64 [[TMP159]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP161:%.*]] = add i64 [[TMP160]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP162:%.*]] = add i64 [[TMP161]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP163:%.*]] = add i64 [[TMP162]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP164:%.*]] = add i64 [[TMP163]], [[TMP19]]
; INTERLEAVE-NEXT:    [[SEXT84:%.*]] = shl i64 [[TMP164]], 32
; INTERLEAVE-NEXT:    [[TMP165:%.*]] = ashr exact i64 [[SEXT84]], 32
; INTERLEAVE-NEXT:    [[TMP166:%.*]] = getelementptr inbounds i8, ptr [[TMP131]], i64 [[TMP165]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP50]], ptr [[TMP166]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[TMP167:%.*]] = add i64 [[TMP1]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP168:%.*]] = add i64 [[TMP167]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP169:%.*]] = add i64 [[TMP168]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP170:%.*]] = add i64 [[TMP169]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP171:%.*]] = add i64 [[TMP170]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP172:%.*]] = add i64 [[TMP171]], [[TMP19]]
; INTERLEAVE-NEXT:    [[TMP173:%.*]] = add i64 [[TMP172]], [[TMP22]]
; INTERLEAVE-NEXT:    [[TMP174:%.*]] = and i64 [[TMP173]], 4294967295
; INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[OFFSET_IDX]], [[TMP174]]
; INTERLEAVE-NEXT:    [[TMP175:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[TMP175]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; INTERLEAVE:       middle.block:
; INTERLEAVE-NEXT:    br i1 true, label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; INTERLEAVE:       scalar.ph:
; INTERLEAVE-NEXT:    br label [[FOR_BODY:%.*]]
; INTERLEAVE:       for.cond.cleanup.loopexit:
; INTERLEAVE-NEXT:    br label [[FOR_COND_CLEANUP]]
; INTERLEAVE:       for.cond.cleanup:
; INTERLEAVE-NEXT:    ret void
; INTERLEAVE:       for.body:
; INTERLEAVE-NEXT:    br i1 poison, label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
entry:
  %cmp13 = icmp sgt i32 %N, 0
  br i1 %cmp13, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i8, i8* %a, i64 %indvars.iv
  %0 = load i8, i8* %arrayidx, align 1
  %1 = trunc i64 %indvars.iv to i32
  %sub = sub nsw i32 %N, %1
  %idxprom1 = sext i32 %sub to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %b, i64 %idxprom1
  %2 = load i8, i8* %arrayidx2, align 1
  %add = add i8 %2, %0
  %arrayidx6 = getelementptr inbounds i8, i8* %c, i64 %indvars.iv
  store i8 %add, i8* %arrayidx6, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}
