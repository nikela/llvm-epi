; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -S \
; RUN:    -passes='dce,loop-vectorize,instcombine' -scalable-vectorization=only -vector-register-width-factor=8 -riscv-v-vector-bits-min=64 | FileCheck %s
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -S \
; RUN:    -passes='dce,loop-vectorize,instcombine' -scalable-vectorization=only -riscv-v-vector-bits-min=64 | FileCheck %s --check-prefix=CHECK1
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -S -riscv-v-vector-bits-min=64 \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -passes='dce,loop-vectorize,instcombine' -force-vector-interleave=1 < %s | FileCheck %s --check-prefix=CHECKVP
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -S -riscv-v-vector-bits-min=64 \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -passes='dce,loop-vectorize,instcombine' -interleave-no-scalar-epilogue=true < %s | FileCheck %s --check-prefix=INTERLEAVE

source_filename = "t.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128-v128:128:128-v256:128:128-v512:128:128-v1024:128:128"
target triple = "riscv64-unknown-linux-gnu"

; void add_ref(int N, char *restrict a, char *restrict b, char *restrict c) {
;   for (int i = 0; i < N; i++)
;     c[i] = a[i] + b[N - i];
; }

; Function Attrs: nofree norecurse nosync nounwind
define dso_local void @add_ref(i32 signext %N, i8* noalias nocapture readonly %a, i8* noalias nocapture readonly %b, i8* noalias nocapture %c) local_unnamed_addr {
; CHECK-LABEL: @add_ref(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP13:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP13]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 9
; CHECK-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ugt i64 [[TMP1]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP2]], 9
; CHECK-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], [[TMP3]]
; CHECK-NEXT:    [[N_VEC:%.*]] = sub nsw i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[OFFSET_IDX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP4:%.*]] = trunc i64 [[OFFSET_IDX]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i8, ptr [[A:%.*]], i64 [[OFFSET_IDX]]
; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 64 x i8>, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP7:%.*]] = shl i32 [[TMP6]], 6
; CHECK-NEXT:    [[TMP8:%.*]] = sext i32 [[TMP7]] to i64
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP8]]
; CHECK-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 64 x i8>, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP10:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP11:%.*]] = shl i32 [[TMP10]], 7
; CHECK-NEXT:    [[TMP12:%.*]] = sext i32 [[TMP11]] to i64
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP12]]
; CHECK-NEXT:    [[WIDE_LOAD2:%.*]] = load <vscale x 64 x i8>, ptr [[TMP13]], align 1
; CHECK-NEXT:    [[TMP14:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP15:%.*]] = mul i32 [[TMP14]], 192
; CHECK-NEXT:    [[TMP16:%.*]] = sext i32 [[TMP15]] to i64
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP16]]
; CHECK-NEXT:    [[WIDE_LOAD3:%.*]] = load <vscale x 64 x i8>, ptr [[TMP17]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP19:%.*]] = shl i32 [[TMP18]], 8
; CHECK-NEXT:    [[TMP20:%.*]] = sext i32 [[TMP19]] to i64
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP20]]
; CHECK-NEXT:    [[WIDE_LOAD4:%.*]] = load <vscale x 64 x i8>, ptr [[TMP21]], align 1
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP23:%.*]] = mul i32 [[TMP22]], 320
; CHECK-NEXT:    [[TMP24:%.*]] = sext i32 [[TMP23]] to i64
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP24]]
; CHECK-NEXT:    [[WIDE_LOAD5:%.*]] = load <vscale x 64 x i8>, ptr [[TMP25]], align 1
; CHECK-NEXT:    [[TMP26:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP27:%.*]] = mul i32 [[TMP26]], 384
; CHECK-NEXT:    [[TMP28:%.*]] = sext i32 [[TMP27]] to i64
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP28]]
; CHECK-NEXT:    [[WIDE_LOAD6:%.*]] = load <vscale x 64 x i8>, ptr [[TMP29]], align 1
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP31:%.*]] = mul i32 [[TMP30]], 448
; CHECK-NEXT:    [[TMP32:%.*]] = sext i32 [[TMP31]] to i64
; CHECK-NEXT:    [[TMP33:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP32]]
; CHECK-NEXT:    [[WIDE_LOAD7:%.*]] = load <vscale x 64 x i8>, ptr [[TMP33]], align 1
; CHECK-NEXT:    [[TMP34:%.*]] = sub nsw i32 [[N]], [[TMP4]]
; CHECK-NEXT:    [[TMP35:%.*]] = sext i32 [[TMP34]] to i64
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr inbounds i8, ptr [[B:%.*]], i64 [[TMP35]]
; CHECK-NEXT:    [[TMP37:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP38:%.*]] = shl i32 [[TMP37]], 6
; CHECK-NEXT:    [[TMP39:%.*]] = sub i32 1, [[TMP38]]
; CHECK-NEXT:    [[TMP40:%.*]] = sext i32 [[TMP39]] to i64
; CHECK-NEXT:    [[TMP41:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP40]]
; CHECK-NEXT:    [[WIDE_LOAD8:%.*]] = load <vscale x 64 x i8>, ptr [[TMP41]], align 1
; CHECK-NEXT:    [[REVERSE:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[WIDE_LOAD8]])
; CHECK-NEXT:    [[TMP42:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP43:%.*]] = shl i32 [[TMP42]], 6
; CHECK-NEXT:    [[TMP44:%.*]] = sub i32 0, [[TMP43]]
; CHECK-NEXT:    [[TMP45:%.*]] = sub i32 1, [[TMP43]]
; CHECK-NEXT:    [[TMP46:%.*]] = sext i32 [[TMP44]] to i64
; CHECK-NEXT:    [[TMP47:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP46]]
; CHECK-NEXT:    [[TMP48:%.*]] = sext i32 [[TMP45]] to i64
; CHECK-NEXT:    [[TMP49:%.*]] = getelementptr inbounds i8, ptr [[TMP47]], i64 [[TMP48]]
; CHECK-NEXT:    [[WIDE_LOAD9:%.*]] = load <vscale x 64 x i8>, ptr [[TMP49]], align 1
; CHECK-NEXT:    [[REVERSE10:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[WIDE_LOAD9]])
; CHECK-NEXT:    [[TMP50:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP51:%.*]] = shl i32 [[TMP50]], 6
; CHECK-NEXT:    [[TMP52:%.*]] = mul i32 [[TMP50]], -128
; CHECK-NEXT:    [[TMP53:%.*]] = sub i32 1, [[TMP51]]
; CHECK-NEXT:    [[TMP54:%.*]] = sext i32 [[TMP52]] to i64
; CHECK-NEXT:    [[TMP55:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP54]]
; CHECK-NEXT:    [[TMP56:%.*]] = sext i32 [[TMP53]] to i64
; CHECK-NEXT:    [[TMP57:%.*]] = getelementptr inbounds i8, ptr [[TMP55]], i64 [[TMP56]]
; CHECK-NEXT:    [[WIDE_LOAD11:%.*]] = load <vscale x 64 x i8>, ptr [[TMP57]], align 1
; CHECK-NEXT:    [[REVERSE12:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[WIDE_LOAD11]])
; CHECK-NEXT:    [[TMP58:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP59:%.*]] = shl i32 [[TMP58]], 6
; CHECK-NEXT:    [[TMP60:%.*]] = mul i32 [[TMP58]], -192
; CHECK-NEXT:    [[TMP61:%.*]] = sub i32 1, [[TMP59]]
; CHECK-NEXT:    [[TMP62:%.*]] = sext i32 [[TMP60]] to i64
; CHECK-NEXT:    [[TMP63:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP62]]
; CHECK-NEXT:    [[TMP64:%.*]] = sext i32 [[TMP61]] to i64
; CHECK-NEXT:    [[TMP65:%.*]] = getelementptr inbounds i8, ptr [[TMP63]], i64 [[TMP64]]
; CHECK-NEXT:    [[WIDE_LOAD13:%.*]] = load <vscale x 64 x i8>, ptr [[TMP65]], align 1
; CHECK-NEXT:    [[REVERSE14:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[WIDE_LOAD13]])
; CHECK-NEXT:    [[TMP66:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP67:%.*]] = shl i32 [[TMP66]], 6
; CHECK-NEXT:    [[TMP68:%.*]] = mul i32 [[TMP66]], -256
; CHECK-NEXT:    [[TMP69:%.*]] = sub i32 1, [[TMP67]]
; CHECK-NEXT:    [[TMP70:%.*]] = sext i32 [[TMP68]] to i64
; CHECK-NEXT:    [[TMP71:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP70]]
; CHECK-NEXT:    [[TMP72:%.*]] = sext i32 [[TMP69]] to i64
; CHECK-NEXT:    [[TMP73:%.*]] = getelementptr inbounds i8, ptr [[TMP71]], i64 [[TMP72]]
; CHECK-NEXT:    [[WIDE_LOAD15:%.*]] = load <vscale x 64 x i8>, ptr [[TMP73]], align 1
; CHECK-NEXT:    [[REVERSE16:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[WIDE_LOAD15]])
; CHECK-NEXT:    [[TMP74:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP75:%.*]] = shl i32 [[TMP74]], 6
; CHECK-NEXT:    [[TMP76:%.*]] = mul i32 [[TMP74]], -320
; CHECK-NEXT:    [[TMP77:%.*]] = sub i32 1, [[TMP75]]
; CHECK-NEXT:    [[TMP78:%.*]] = sext i32 [[TMP76]] to i64
; CHECK-NEXT:    [[TMP79:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP78]]
; CHECK-NEXT:    [[TMP80:%.*]] = sext i32 [[TMP77]] to i64
; CHECK-NEXT:    [[TMP81:%.*]] = getelementptr inbounds i8, ptr [[TMP79]], i64 [[TMP80]]
; CHECK-NEXT:    [[WIDE_LOAD17:%.*]] = load <vscale x 64 x i8>, ptr [[TMP81]], align 1
; CHECK-NEXT:    [[REVERSE18:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[WIDE_LOAD17]])
; CHECK-NEXT:    [[TMP82:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP83:%.*]] = shl i32 [[TMP82]], 6
; CHECK-NEXT:    [[TMP84:%.*]] = mul i32 [[TMP82]], -384
; CHECK-NEXT:    [[TMP85:%.*]] = sub i32 1, [[TMP83]]
; CHECK-NEXT:    [[TMP86:%.*]] = sext i32 [[TMP84]] to i64
; CHECK-NEXT:    [[TMP87:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP86]]
; CHECK-NEXT:    [[TMP88:%.*]] = sext i32 [[TMP85]] to i64
; CHECK-NEXT:    [[TMP89:%.*]] = getelementptr inbounds i8, ptr [[TMP87]], i64 [[TMP88]]
; CHECK-NEXT:    [[WIDE_LOAD19:%.*]] = load <vscale x 64 x i8>, ptr [[TMP89]], align 1
; CHECK-NEXT:    [[REVERSE20:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[WIDE_LOAD19]])
; CHECK-NEXT:    [[TMP90:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP91:%.*]] = shl i32 [[TMP90]], 6
; CHECK-NEXT:    [[TMP92:%.*]] = mul i32 [[TMP90]], -448
; CHECK-NEXT:    [[TMP93:%.*]] = sub i32 1, [[TMP91]]
; CHECK-NEXT:    [[TMP94:%.*]] = sext i32 [[TMP92]] to i64
; CHECK-NEXT:    [[TMP95:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP94]]
; CHECK-NEXT:    [[TMP96:%.*]] = sext i32 [[TMP93]] to i64
; CHECK-NEXT:    [[TMP97:%.*]] = getelementptr inbounds i8, ptr [[TMP95]], i64 [[TMP96]]
; CHECK-NEXT:    [[WIDE_LOAD21:%.*]] = load <vscale x 64 x i8>, ptr [[TMP97]], align 1
; CHECK-NEXT:    [[REVERSE22:%.*]] = call <vscale x 64 x i8> @llvm.experimental.vector.reverse.nxv64i8(<vscale x 64 x i8> [[WIDE_LOAD21]])
; CHECK-NEXT:    [[TMP98:%.*]] = add <vscale x 64 x i8> [[REVERSE]], [[WIDE_LOAD]]
; CHECK-NEXT:    [[TMP99:%.*]] = add <vscale x 64 x i8> [[REVERSE10]], [[WIDE_LOAD1]]
; CHECK-NEXT:    [[TMP100:%.*]] = add <vscale x 64 x i8> [[REVERSE12]], [[WIDE_LOAD2]]
; CHECK-NEXT:    [[TMP101:%.*]] = add <vscale x 64 x i8> [[REVERSE14]], [[WIDE_LOAD3]]
; CHECK-NEXT:    [[TMP102:%.*]] = add <vscale x 64 x i8> [[REVERSE16]], [[WIDE_LOAD4]]
; CHECK-NEXT:    [[TMP103:%.*]] = add <vscale x 64 x i8> [[REVERSE18]], [[WIDE_LOAD5]]
; CHECK-NEXT:    [[TMP104:%.*]] = add <vscale x 64 x i8> [[REVERSE20]], [[WIDE_LOAD6]]
; CHECK-NEXT:    [[TMP105:%.*]] = add <vscale x 64 x i8> [[REVERSE22]], [[WIDE_LOAD7]]
; CHECK-NEXT:    [[TMP106:%.*]] = getelementptr inbounds i8, ptr [[C:%.*]], i64 [[OFFSET_IDX]]
; CHECK-NEXT:    store <vscale x 64 x i8> [[TMP98]], ptr [[TMP106]], align 1
; CHECK-NEXT:    [[TMP107:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP108:%.*]] = shl i32 [[TMP107]], 6
; CHECK-NEXT:    [[TMP109:%.*]] = sext i32 [[TMP108]] to i64
; CHECK-NEXT:    [[TMP110:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP109]]
; CHECK-NEXT:    store <vscale x 64 x i8> [[TMP99]], ptr [[TMP110]], align 1
; CHECK-NEXT:    [[TMP111:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP112:%.*]] = shl i32 [[TMP111]], 7
; CHECK-NEXT:    [[TMP113:%.*]] = sext i32 [[TMP112]] to i64
; CHECK-NEXT:    [[TMP114:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP113]]
; CHECK-NEXT:    store <vscale x 64 x i8> [[TMP100]], ptr [[TMP114]], align 1
; CHECK-NEXT:    [[TMP115:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP116:%.*]] = mul i32 [[TMP115]], 192
; CHECK-NEXT:    [[TMP117:%.*]] = sext i32 [[TMP116]] to i64
; CHECK-NEXT:    [[TMP118:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP117]]
; CHECK-NEXT:    store <vscale x 64 x i8> [[TMP101]], ptr [[TMP118]], align 1
; CHECK-NEXT:    [[TMP119:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP120:%.*]] = shl i32 [[TMP119]], 8
; CHECK-NEXT:    [[TMP121:%.*]] = sext i32 [[TMP120]] to i64
; CHECK-NEXT:    [[TMP122:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP121]]
; CHECK-NEXT:    store <vscale x 64 x i8> [[TMP102]], ptr [[TMP122]], align 1
; CHECK-NEXT:    [[TMP123:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP124:%.*]] = mul i32 [[TMP123]], 320
; CHECK-NEXT:    [[TMP125:%.*]] = sext i32 [[TMP124]] to i64
; CHECK-NEXT:    [[TMP126:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP125]]
; CHECK-NEXT:    store <vscale x 64 x i8> [[TMP103]], ptr [[TMP126]], align 1
; CHECK-NEXT:    [[TMP127:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP128:%.*]] = mul i32 [[TMP127]], 384
; CHECK-NEXT:    [[TMP129:%.*]] = sext i32 [[TMP128]] to i64
; CHECK-NEXT:    [[TMP130:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP129]]
; CHECK-NEXT:    store <vscale x 64 x i8> [[TMP104]], ptr [[TMP130]], align 1
; CHECK-NEXT:    [[TMP131:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP132:%.*]] = mul i32 [[TMP131]], 448
; CHECK-NEXT:    [[TMP133:%.*]] = sext i32 [[TMP132]] to i64
; CHECK-NEXT:    [[TMP134:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP133]]
; CHECK-NEXT:    store <vscale x 64 x i8> [[TMP105]], ptr [[TMP134]], align 1
; CHECK-NEXT:    [[TMP135:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP136:%.*]] = shl i64 [[TMP135]], 9
; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[OFFSET_IDX]], [[TMP136]]
; CHECK-NEXT:    [[TMP137:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP137]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; CHECK-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[A]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP138:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; CHECK-NEXT:    [[TMP139:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; CHECK-NEXT:    [[SUB:%.*]] = sub nsw i32 [[N]], [[TMP139]]
; CHECK-NEXT:    [[IDXPROM1:%.*]] = sext i32 [[SUB]] to i64
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, ptr [[B]], i64 [[IDXPROM1]]
; CHECK-NEXT:    [[TMP140:%.*]] = load i8, ptr [[ARRAYIDX2]], align 1
; CHECK-NEXT:    [[ADD:%.*]] = add i8 [[TMP140]], [[TMP138]]
; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds i8, ptr [[C]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store i8 [[ADD]], ptr [[ARRAYIDX6]], align 1
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
; CHECK1-LABEL: @add_ref(
; CHECK1-NEXT:  entry:
; CHECK1-NEXT:    [[CMP13:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK1-NEXT:    br i1 [[CMP13]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK1:       for.body.preheader:
; CHECK1-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK1-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 6
; CHECK1-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ugt i64 [[TMP1]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK1:       vector.ph:
; CHECK1-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP2]], 6
; CHECK1-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], [[TMP3]]
; CHECK1-NEXT:    [[N_VEC:%.*]] = sub nsw i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; CHECK1-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK1:       vector.body:
; CHECK1-NEXT:    [[OFFSET_IDX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK1-NEXT:    [[TMP4:%.*]] = trunc i64 [[OFFSET_IDX]] to i32
; CHECK1-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i8, ptr [[A:%.*]], i64 [[OFFSET_IDX]]
; CHECK1-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 8 x i8>, ptr [[TMP5]], align 1
; CHECK1-NEXT:    [[TMP6:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP7:%.*]] = shl i32 [[TMP6]], 3
; CHECK1-NEXT:    [[TMP8:%.*]] = sext i32 [[TMP7]] to i64
; CHECK1-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP8]]
; CHECK1-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 8 x i8>, ptr [[TMP9]], align 1
; CHECK1-NEXT:    [[TMP10:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP11:%.*]] = shl i32 [[TMP10]], 4
; CHECK1-NEXT:    [[TMP12:%.*]] = sext i32 [[TMP11]] to i64
; CHECK1-NEXT:    [[TMP13:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP12]]
; CHECK1-NEXT:    [[WIDE_LOAD2:%.*]] = load <vscale x 8 x i8>, ptr [[TMP13]], align 1
; CHECK1-NEXT:    [[TMP14:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP15:%.*]] = mul i32 [[TMP14]], 24
; CHECK1-NEXT:    [[TMP16:%.*]] = sext i32 [[TMP15]] to i64
; CHECK1-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP16]]
; CHECK1-NEXT:    [[WIDE_LOAD3:%.*]] = load <vscale x 8 x i8>, ptr [[TMP17]], align 1
; CHECK1-NEXT:    [[TMP18:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP19:%.*]] = shl i32 [[TMP18]], 5
; CHECK1-NEXT:    [[TMP20:%.*]] = sext i32 [[TMP19]] to i64
; CHECK1-NEXT:    [[TMP21:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP20]]
; CHECK1-NEXT:    [[WIDE_LOAD4:%.*]] = load <vscale x 8 x i8>, ptr [[TMP21]], align 1
; CHECK1-NEXT:    [[TMP22:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP23:%.*]] = mul i32 [[TMP22]], 40
; CHECK1-NEXT:    [[TMP24:%.*]] = sext i32 [[TMP23]] to i64
; CHECK1-NEXT:    [[TMP25:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP24]]
; CHECK1-NEXT:    [[WIDE_LOAD5:%.*]] = load <vscale x 8 x i8>, ptr [[TMP25]], align 1
; CHECK1-NEXT:    [[TMP26:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP27:%.*]] = mul i32 [[TMP26]], 48
; CHECK1-NEXT:    [[TMP28:%.*]] = sext i32 [[TMP27]] to i64
; CHECK1-NEXT:    [[TMP29:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP28]]
; CHECK1-NEXT:    [[WIDE_LOAD6:%.*]] = load <vscale x 8 x i8>, ptr [[TMP29]], align 1
; CHECK1-NEXT:    [[TMP30:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP31:%.*]] = mul i32 [[TMP30]], 56
; CHECK1-NEXT:    [[TMP32:%.*]] = sext i32 [[TMP31]] to i64
; CHECK1-NEXT:    [[TMP33:%.*]] = getelementptr inbounds i8, ptr [[TMP5]], i64 [[TMP32]]
; CHECK1-NEXT:    [[WIDE_LOAD7:%.*]] = load <vscale x 8 x i8>, ptr [[TMP33]], align 1
; CHECK1-NEXT:    [[TMP34:%.*]] = sub nsw i32 [[N]], [[TMP4]]
; CHECK1-NEXT:    [[TMP35:%.*]] = sext i32 [[TMP34]] to i64
; CHECK1-NEXT:    [[TMP36:%.*]] = getelementptr inbounds i8, ptr [[B:%.*]], i64 [[TMP35]]
; CHECK1-NEXT:    [[TMP37:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP38:%.*]] = shl i32 [[TMP37]], 3
; CHECK1-NEXT:    [[TMP39:%.*]] = sub i32 1, [[TMP38]]
; CHECK1-NEXT:    [[TMP40:%.*]] = sext i32 [[TMP39]] to i64
; CHECK1-NEXT:    [[TMP41:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP40]]
; CHECK1-NEXT:    [[WIDE_LOAD8:%.*]] = load <vscale x 8 x i8>, ptr [[TMP41]], align 1
; CHECK1-NEXT:    [[REVERSE:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD8]])
; CHECK1-NEXT:    [[TMP42:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP43:%.*]] = shl i32 [[TMP42]], 3
; CHECK1-NEXT:    [[TMP44:%.*]] = sub i32 0, [[TMP43]]
; CHECK1-NEXT:    [[TMP45:%.*]] = sub i32 1, [[TMP43]]
; CHECK1-NEXT:    [[TMP46:%.*]] = sext i32 [[TMP44]] to i64
; CHECK1-NEXT:    [[TMP47:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP46]]
; CHECK1-NEXT:    [[TMP48:%.*]] = sext i32 [[TMP45]] to i64
; CHECK1-NEXT:    [[TMP49:%.*]] = getelementptr inbounds i8, ptr [[TMP47]], i64 [[TMP48]]
; CHECK1-NEXT:    [[WIDE_LOAD9:%.*]] = load <vscale x 8 x i8>, ptr [[TMP49]], align 1
; CHECK1-NEXT:    [[REVERSE10:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD9]])
; CHECK1-NEXT:    [[TMP50:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP51:%.*]] = shl i32 [[TMP50]], 3
; CHECK1-NEXT:    [[TMP52:%.*]] = mul i32 [[TMP50]], -16
; CHECK1-NEXT:    [[TMP53:%.*]] = sub i32 1, [[TMP51]]
; CHECK1-NEXT:    [[TMP54:%.*]] = sext i32 [[TMP52]] to i64
; CHECK1-NEXT:    [[TMP55:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP54]]
; CHECK1-NEXT:    [[TMP56:%.*]] = sext i32 [[TMP53]] to i64
; CHECK1-NEXT:    [[TMP57:%.*]] = getelementptr inbounds i8, ptr [[TMP55]], i64 [[TMP56]]
; CHECK1-NEXT:    [[WIDE_LOAD11:%.*]] = load <vscale x 8 x i8>, ptr [[TMP57]], align 1
; CHECK1-NEXT:    [[REVERSE12:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD11]])
; CHECK1-NEXT:    [[TMP58:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP59:%.*]] = shl i32 [[TMP58]], 3
; CHECK1-NEXT:    [[TMP60:%.*]] = mul i32 [[TMP58]], -24
; CHECK1-NEXT:    [[TMP61:%.*]] = sub i32 1, [[TMP59]]
; CHECK1-NEXT:    [[TMP62:%.*]] = sext i32 [[TMP60]] to i64
; CHECK1-NEXT:    [[TMP63:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP62]]
; CHECK1-NEXT:    [[TMP64:%.*]] = sext i32 [[TMP61]] to i64
; CHECK1-NEXT:    [[TMP65:%.*]] = getelementptr inbounds i8, ptr [[TMP63]], i64 [[TMP64]]
; CHECK1-NEXT:    [[WIDE_LOAD13:%.*]] = load <vscale x 8 x i8>, ptr [[TMP65]], align 1
; CHECK1-NEXT:    [[REVERSE14:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD13]])
; CHECK1-NEXT:    [[TMP66:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP67:%.*]] = shl i32 [[TMP66]], 3
; CHECK1-NEXT:    [[TMP68:%.*]] = mul i32 [[TMP66]], -32
; CHECK1-NEXT:    [[TMP69:%.*]] = sub i32 1, [[TMP67]]
; CHECK1-NEXT:    [[TMP70:%.*]] = sext i32 [[TMP68]] to i64
; CHECK1-NEXT:    [[TMP71:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP70]]
; CHECK1-NEXT:    [[TMP72:%.*]] = sext i32 [[TMP69]] to i64
; CHECK1-NEXT:    [[TMP73:%.*]] = getelementptr inbounds i8, ptr [[TMP71]], i64 [[TMP72]]
; CHECK1-NEXT:    [[WIDE_LOAD15:%.*]] = load <vscale x 8 x i8>, ptr [[TMP73]], align 1
; CHECK1-NEXT:    [[REVERSE16:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD15]])
; CHECK1-NEXT:    [[TMP74:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP75:%.*]] = shl i32 [[TMP74]], 3
; CHECK1-NEXT:    [[TMP76:%.*]] = mul i32 [[TMP74]], -40
; CHECK1-NEXT:    [[TMP77:%.*]] = sub i32 1, [[TMP75]]
; CHECK1-NEXT:    [[TMP78:%.*]] = sext i32 [[TMP76]] to i64
; CHECK1-NEXT:    [[TMP79:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP78]]
; CHECK1-NEXT:    [[TMP80:%.*]] = sext i32 [[TMP77]] to i64
; CHECK1-NEXT:    [[TMP81:%.*]] = getelementptr inbounds i8, ptr [[TMP79]], i64 [[TMP80]]
; CHECK1-NEXT:    [[WIDE_LOAD17:%.*]] = load <vscale x 8 x i8>, ptr [[TMP81]], align 1
; CHECK1-NEXT:    [[REVERSE18:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD17]])
; CHECK1-NEXT:    [[TMP82:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP83:%.*]] = shl i32 [[TMP82]], 3
; CHECK1-NEXT:    [[TMP84:%.*]] = mul i32 [[TMP82]], -48
; CHECK1-NEXT:    [[TMP85:%.*]] = sub i32 1, [[TMP83]]
; CHECK1-NEXT:    [[TMP86:%.*]] = sext i32 [[TMP84]] to i64
; CHECK1-NEXT:    [[TMP87:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP86]]
; CHECK1-NEXT:    [[TMP88:%.*]] = sext i32 [[TMP85]] to i64
; CHECK1-NEXT:    [[TMP89:%.*]] = getelementptr inbounds i8, ptr [[TMP87]], i64 [[TMP88]]
; CHECK1-NEXT:    [[WIDE_LOAD19:%.*]] = load <vscale x 8 x i8>, ptr [[TMP89]], align 1
; CHECK1-NEXT:    [[REVERSE20:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD19]])
; CHECK1-NEXT:    [[TMP90:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP91:%.*]] = shl i32 [[TMP90]], 3
; CHECK1-NEXT:    [[TMP92:%.*]] = mul i32 [[TMP90]], -56
; CHECK1-NEXT:    [[TMP93:%.*]] = sub i32 1, [[TMP91]]
; CHECK1-NEXT:    [[TMP94:%.*]] = sext i32 [[TMP92]] to i64
; CHECK1-NEXT:    [[TMP95:%.*]] = getelementptr inbounds i8, ptr [[TMP36]], i64 [[TMP94]]
; CHECK1-NEXT:    [[TMP96:%.*]] = sext i32 [[TMP93]] to i64
; CHECK1-NEXT:    [[TMP97:%.*]] = getelementptr inbounds i8, ptr [[TMP95]], i64 [[TMP96]]
; CHECK1-NEXT:    [[WIDE_LOAD21:%.*]] = load <vscale x 8 x i8>, ptr [[TMP97]], align 1
; CHECK1-NEXT:    [[REVERSE22:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vector.reverse.nxv8i8(<vscale x 8 x i8> [[WIDE_LOAD21]])
; CHECK1-NEXT:    [[TMP98:%.*]] = add <vscale x 8 x i8> [[REVERSE]], [[WIDE_LOAD]]
; CHECK1-NEXT:    [[TMP99:%.*]] = add <vscale x 8 x i8> [[REVERSE10]], [[WIDE_LOAD1]]
; CHECK1-NEXT:    [[TMP100:%.*]] = add <vscale x 8 x i8> [[REVERSE12]], [[WIDE_LOAD2]]
; CHECK1-NEXT:    [[TMP101:%.*]] = add <vscale x 8 x i8> [[REVERSE14]], [[WIDE_LOAD3]]
; CHECK1-NEXT:    [[TMP102:%.*]] = add <vscale x 8 x i8> [[REVERSE16]], [[WIDE_LOAD4]]
; CHECK1-NEXT:    [[TMP103:%.*]] = add <vscale x 8 x i8> [[REVERSE18]], [[WIDE_LOAD5]]
; CHECK1-NEXT:    [[TMP104:%.*]] = add <vscale x 8 x i8> [[REVERSE20]], [[WIDE_LOAD6]]
; CHECK1-NEXT:    [[TMP105:%.*]] = add <vscale x 8 x i8> [[REVERSE22]], [[WIDE_LOAD7]]
; CHECK1-NEXT:    [[TMP106:%.*]] = getelementptr inbounds i8, ptr [[C:%.*]], i64 [[OFFSET_IDX]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP98]], ptr [[TMP106]], align 1
; CHECK1-NEXT:    [[TMP107:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP108:%.*]] = shl i32 [[TMP107]], 3
; CHECK1-NEXT:    [[TMP109:%.*]] = sext i32 [[TMP108]] to i64
; CHECK1-NEXT:    [[TMP110:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP109]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP99]], ptr [[TMP110]], align 1
; CHECK1-NEXT:    [[TMP111:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP112:%.*]] = shl i32 [[TMP111]], 4
; CHECK1-NEXT:    [[TMP113:%.*]] = sext i32 [[TMP112]] to i64
; CHECK1-NEXT:    [[TMP114:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP113]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP100]], ptr [[TMP114]], align 1
; CHECK1-NEXT:    [[TMP115:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP116:%.*]] = mul i32 [[TMP115]], 24
; CHECK1-NEXT:    [[TMP117:%.*]] = sext i32 [[TMP116]] to i64
; CHECK1-NEXT:    [[TMP118:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP117]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP101]], ptr [[TMP118]], align 1
; CHECK1-NEXT:    [[TMP119:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP120:%.*]] = shl i32 [[TMP119]], 5
; CHECK1-NEXT:    [[TMP121:%.*]] = sext i32 [[TMP120]] to i64
; CHECK1-NEXT:    [[TMP122:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP121]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP102]], ptr [[TMP122]], align 1
; CHECK1-NEXT:    [[TMP123:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP124:%.*]] = mul i32 [[TMP123]], 40
; CHECK1-NEXT:    [[TMP125:%.*]] = sext i32 [[TMP124]] to i64
; CHECK1-NEXT:    [[TMP126:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP125]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP103]], ptr [[TMP126]], align 1
; CHECK1-NEXT:    [[TMP127:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP128:%.*]] = mul i32 [[TMP127]], 48
; CHECK1-NEXT:    [[TMP129:%.*]] = sext i32 [[TMP128]] to i64
; CHECK1-NEXT:    [[TMP130:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP129]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP104]], ptr [[TMP130]], align 1
; CHECK1-NEXT:    [[TMP131:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP132:%.*]] = mul i32 [[TMP131]], 56
; CHECK1-NEXT:    [[TMP133:%.*]] = sext i32 [[TMP132]] to i64
; CHECK1-NEXT:    [[TMP134:%.*]] = getelementptr inbounds i8, ptr [[TMP106]], i64 [[TMP133]]
; CHECK1-NEXT:    store <vscale x 8 x i8> [[TMP105]], ptr [[TMP134]], align 1
; CHECK1-NEXT:    [[TMP135:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP136:%.*]] = shl i64 [[TMP135]], 6
; CHECK1-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[OFFSET_IDX]], [[TMP136]]
; CHECK1-NEXT:    [[TMP137:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK1-NEXT:    br i1 [[TMP137]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK1:       middle.block:
; CHECK1-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_MOD_VF]], 0
; CHECK1-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK1:       scalar.ph:
; CHECK1-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK1:       for.cond.cleanup.loopexit:
; CHECK1-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK1:       for.cond.cleanup:
; CHECK1-NEXT:    ret void
; CHECK1:       for.body:
; CHECK1-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[A]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP138:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; CHECK1-NEXT:    [[TMP139:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; CHECK1-NEXT:    [[SUB:%.*]] = sub nsw i32 [[N]], [[TMP139]]
; CHECK1-NEXT:    [[IDXPROM1:%.*]] = sext i32 [[SUB]] to i64
; CHECK1-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, ptr [[B]], i64 [[IDXPROM1]]
; CHECK1-NEXT:    [[TMP140:%.*]] = load i8, ptr [[ARRAYIDX2]], align 1
; CHECK1-NEXT:    [[ADD:%.*]] = add i8 [[TMP140]], [[TMP138]]
; CHECK1-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds i8, ptr [[C]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store i8 [[ADD]], ptr [[ARRAYIDX6]], align 1
; CHECK1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK1-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
; CHECKVP-LABEL: @add_ref(
; CHECKVP-NEXT:  entry:
; CHECKVP-NEXT:    [[CMP13:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECKVP-NEXT:    br i1 [[CMP13]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECKVP:       for.body.preheader:
; CHECKVP-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECKVP-NEXT:    [[TMP0:%.*]] = xor i64 [[WIDE_TRIP_COUNT]], -1
; CHECKVP-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; CHECKVP-NEXT:    [[TMP2:%.*]] = shl i64 [[TMP1]], 3
; CHECKVP-NEXT:    [[TMP3:%.*]] = icmp ugt i64 [[TMP2]], [[TMP0]]
; CHECKVP-NEXT:    br i1 [[TMP3]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECKVP:       vector.ph:
; CHECKVP-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECKVP:       vector.body:
; CHECKVP-NEXT:    [[OFFSET_IDX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECKVP-NEXT:    [[TMP4:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[OFFSET_IDX]]
; CHECKVP-NEXT:    [[TMP5:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 0, i64 0)
; CHECKVP-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; CHECKVP-NEXT:    [[TMP7:%.*]] = trunc i64 [[OFFSET_IDX]] to i32
; CHECKVP-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, ptr [[A:%.*]], i64 [[OFFSET_IDX]]
; CHECKVP-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP8]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECKVP-NEXT:    [[TMP9:%.*]] = sub nsw i32 [[N]], [[TMP7]]
; CHECKVP-NEXT:    [[TMP10:%.*]] = sext i32 [[TMP9]] to i64
; CHECKVP-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i8, ptr [[B:%.*]], i64 [[TMP10]]
; CHECKVP-NEXT:    [[TMP12:%.*]] = shl i64 [[TMP5]], 32
; CHECKVP-NEXT:    [[SEXT:%.*]] = sub i64 4294967296, [[TMP12]]
; CHECKVP-NEXT:    [[TMP13:%.*]] = ashr exact i64 [[SEXT]], 32
; CHECKVP-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i8, ptr [[TMP11]], i64 [[TMP13]]
; CHECKVP-NEXT:    [[VP_OP_LOAD3:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP14]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECKVP-NEXT:    [[TMP15:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD3]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECKVP-NEXT:    [[VP_OP:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP15]], <vscale x 8 x i8> [[VP_OP_LOAD]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECKVP-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i8, ptr [[C:%.*]], i64 [[OFFSET_IDX]]
; CHECKVP-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP]], ptr [[TMP16]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECKVP-NEXT:    [[TMP17:%.*]] = and i64 [[TMP5]], 4294967295
; CHECKVP-NEXT:    [[INDEX_NEXT]] = add i64 [[OFFSET_IDX]], [[TMP17]]
; CHECKVP-NEXT:    [[TMP18:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECKVP-NEXT:    br i1 [[TMP18]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECKVP:       middle.block:
; CHECKVP-NEXT:    br i1 true, label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECKVP:       scalar.ph:
; CHECKVP-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECKVP-NEXT:    br label [[FOR_BODY:%.*]]
; CHECKVP:       for.cond.cleanup.loopexit:
; CHECKVP-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECKVP:       for.cond.cleanup:
; CHECKVP-NEXT:    ret void
; CHECKVP:       for.body:
; CHECKVP-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECKVP-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[A]], i64 [[INDVARS_IV]]
; CHECKVP-NEXT:    [[TMP19:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; CHECKVP-NEXT:    [[TMP20:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; CHECKVP-NEXT:    [[SUB:%.*]] = sub nsw i32 [[N]], [[TMP20]]
; CHECKVP-NEXT:    [[IDXPROM1:%.*]] = sext i32 [[SUB]] to i64
; CHECKVP-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, ptr [[B]], i64 [[IDXPROM1]]
; CHECKVP-NEXT:    [[TMP21:%.*]] = load i8, ptr [[ARRAYIDX2]], align 1
; CHECKVP-NEXT:    [[ADD:%.*]] = add i8 [[TMP21]], [[TMP19]]
; CHECKVP-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds i8, ptr [[C]], i64 [[INDVARS_IV]]
; CHECKVP-NEXT:    store i8 [[ADD]], ptr [[ARRAYIDX6]], align 1
; CHECKVP-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECKVP-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECKVP-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
; INTERLEAVE-LABEL: @add_ref(
; INTERLEAVE-NEXT:  entry:
; INTERLEAVE-NEXT:    [[CMP13:%.*]] = icmp sgt i32 [[N:%.*]], 0
; INTERLEAVE-NEXT:    br i1 [[CMP13]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; INTERLEAVE:       for.body.preheader:
; INTERLEAVE-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; INTERLEAVE-NEXT:    [[TMP0:%.*]] = xor i64 [[WIDE_TRIP_COUNT]], -1
; INTERLEAVE-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP2:%.*]] = shl i64 [[TMP1]], 6
; INTERLEAVE-NEXT:    [[TMP3:%.*]] = icmp ugt i64 [[TMP2]], [[TMP0]]
; INTERLEAVE-NEXT:    br i1 [[TMP3]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; INTERLEAVE:       vector.ph:
; INTERLEAVE-NEXT:    br label [[VECTOR_BODY:%.*]]
; INTERLEAVE:       vector.body:
; INTERLEAVE-NEXT:    [[OFFSET_IDX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; INTERLEAVE-NEXT:    [[TMP4:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[OFFSET_IDX]]
; INTERLEAVE-NEXT:    [[TMP5:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; INTERLEAVE-NEXT:    [[TMP7:%.*]] = sub i64 [[TMP4]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP8:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP7]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP9:%.*]] = trunc i64 [[TMP8]] to i32
; INTERLEAVE-NEXT:    [[TMP10:%.*]] = sub i64 [[TMP7]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP11:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP10]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP12:%.*]] = trunc i64 [[TMP11]] to i32
; INTERLEAVE-NEXT:    [[TMP13:%.*]] = sub i64 [[TMP10]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP14:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP13]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP15:%.*]] = trunc i64 [[TMP14]] to i32
; INTERLEAVE-NEXT:    [[TMP16:%.*]] = sub i64 [[TMP13]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP17:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP16]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP18:%.*]] = trunc i64 [[TMP17]] to i32
; INTERLEAVE-NEXT:    [[TMP19:%.*]] = sub i64 [[TMP16]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP20:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP19]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP21:%.*]] = trunc i64 [[TMP20]] to i32
; INTERLEAVE-NEXT:    [[TMP22:%.*]] = sub i64 [[TMP19]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP23:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP22]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP23]] to i32
; INTERLEAVE-NEXT:    [[TMP25:%.*]] = sub i64 [[TMP22]], [[TMP23]]
; INTERLEAVE-NEXT:    [[TMP26:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP25]], i64 0, i64 0)
; INTERLEAVE-NEXT:    [[TMP27:%.*]] = trunc i64 [[TMP26]] to i32
; INTERLEAVE-NEXT:    [[TMP28:%.*]] = trunc i64 [[OFFSET_IDX]] to i32
; INTERLEAVE-NEXT:    [[TMP29:%.*]] = getelementptr inbounds i8, ptr [[A:%.*]], i64 [[OFFSET_IDX]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP29]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[SEXT:%.*]] = shl i64 [[TMP5]], 32
; INTERLEAVE-NEXT:    [[TMP30:%.*]] = ashr exact i64 [[SEXT]], 32
; INTERLEAVE-NEXT:    [[TMP31:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP30]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD22:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP31]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP32:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[SEXT44:%.*]] = shl i64 [[TMP32]], 32
; INTERLEAVE-NEXT:    [[TMP33:%.*]] = ashr exact i64 [[SEXT44]], 32
; INTERLEAVE-NEXT:    [[TMP34:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP33]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD23:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP34]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP35:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP36:%.*]] = add i64 [[TMP35]], [[TMP11]]
; INTERLEAVE-NEXT:    [[SEXT45:%.*]] = shl i64 [[TMP36]], 32
; INTERLEAVE-NEXT:    [[TMP37:%.*]] = ashr exact i64 [[SEXT45]], 32
; INTERLEAVE-NEXT:    [[TMP38:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP37]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD24:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP38]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP39:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP40:%.*]] = add i64 [[TMP39]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP41:%.*]] = add i64 [[TMP40]], [[TMP14]]
; INTERLEAVE-NEXT:    [[SEXT46:%.*]] = shl i64 [[TMP41]], 32
; INTERLEAVE-NEXT:    [[TMP42:%.*]] = ashr exact i64 [[SEXT46]], 32
; INTERLEAVE-NEXT:    [[TMP43:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP42]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD25:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP43]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[TMP44:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP45:%.*]] = add i64 [[TMP44]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP46:%.*]] = add i64 [[TMP45]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP47:%.*]] = add i64 [[TMP46]], [[TMP17]]
; INTERLEAVE-NEXT:    [[SEXT47:%.*]] = shl i64 [[TMP47]], 32
; INTERLEAVE-NEXT:    [[TMP48:%.*]] = ashr exact i64 [[SEXT47]], 32
; INTERLEAVE-NEXT:    [[TMP49:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP48]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD26:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP49]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[TMP50:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP51:%.*]] = add i64 [[TMP50]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP52:%.*]] = add i64 [[TMP51]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP53:%.*]] = add i64 [[TMP52]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP54:%.*]] = add i64 [[TMP53]], [[TMP20]]
; INTERLEAVE-NEXT:    [[SEXT48:%.*]] = shl i64 [[TMP54]], 32
; INTERLEAVE-NEXT:    [[TMP55:%.*]] = ashr exact i64 [[SEXT48]], 32
; INTERLEAVE-NEXT:    [[TMP56:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP55]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD27:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP56]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[TMP57:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP58:%.*]] = add i64 [[TMP57]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP59:%.*]] = add i64 [[TMP58]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP60:%.*]] = add i64 [[TMP59]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP61:%.*]] = add i64 [[TMP60]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP62:%.*]] = add i64 [[TMP61]], [[TMP23]]
; INTERLEAVE-NEXT:    [[SEXT49:%.*]] = shl i64 [[TMP62]], 32
; INTERLEAVE-NEXT:    [[TMP63:%.*]] = ashr exact i64 [[SEXT49]], 32
; INTERLEAVE-NEXT:    [[TMP64:%.*]] = getelementptr inbounds i8, ptr [[TMP29]], i64 [[TMP63]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD28:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP64]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[TMP65:%.*]] = sub nsw i32 [[N]], [[TMP28]]
; INTERLEAVE-NEXT:    [[TMP66:%.*]] = sext i32 [[TMP65]] to i64
; INTERLEAVE-NEXT:    [[TMP67:%.*]] = getelementptr inbounds i8, ptr [[B:%.*]], i64 [[TMP66]]
; INTERLEAVE-NEXT:    [[TMP68:%.*]] = shl i64 [[TMP5]], 32
; INTERLEAVE-NEXT:    [[SEXT50:%.*]] = sub i64 4294967296, [[TMP68]]
; INTERLEAVE-NEXT:    [[TMP69:%.*]] = ashr exact i64 [[SEXT50]], 32
; INTERLEAVE-NEXT:    [[TMP70:%.*]] = getelementptr inbounds i8, ptr [[TMP67]], i64 [[TMP69]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD29:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP70]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[TMP71:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD29]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[DOTNEG:%.*]] = mul i64 [[TMP5]], -4294967296
; INTERLEAVE-NEXT:    [[TMP72:%.*]] = ashr exact i64 [[DOTNEG]], 32
; INTERLEAVE-NEXT:    [[TMP73:%.*]] = getelementptr inbounds i8, ptr [[TMP67]], i64 [[TMP72]]
; INTERLEAVE-NEXT:    [[TMP74:%.*]] = shl i64 [[TMP8]], 32
; INTERLEAVE-NEXT:    [[SEXT52:%.*]] = sub i64 4294967296, [[TMP74]]
; INTERLEAVE-NEXT:    [[TMP75:%.*]] = ashr exact i64 [[SEXT52]], 32
; INTERLEAVE-NEXT:    [[TMP76:%.*]] = getelementptr inbounds i8, ptr [[TMP73]], i64 [[TMP75]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD30:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP76]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP77:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD30]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP78:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[DOTNEG54:%.*]] = mul i64 [[TMP78]], -4294967296
; INTERLEAVE-NEXT:    [[TMP79:%.*]] = ashr exact i64 [[DOTNEG54]], 32
; INTERLEAVE-NEXT:    [[TMP80:%.*]] = getelementptr inbounds i8, ptr [[TMP67]], i64 [[TMP79]]
; INTERLEAVE-NEXT:    [[TMP81:%.*]] = shl i64 [[TMP11]], 32
; INTERLEAVE-NEXT:    [[SEXT55:%.*]] = sub i64 4294967296, [[TMP81]]
; INTERLEAVE-NEXT:    [[TMP82:%.*]] = ashr exact i64 [[SEXT55]], 32
; INTERLEAVE-NEXT:    [[TMP83:%.*]] = getelementptr inbounds i8, ptr [[TMP80]], i64 [[TMP82]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD31:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP83]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP84:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD31]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP85:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP86:%.*]] = add i64 [[TMP85]], [[TMP11]]
; INTERLEAVE-NEXT:    [[DOTNEG57:%.*]] = mul i64 [[TMP86]], -4294967296
; INTERLEAVE-NEXT:    [[TMP87:%.*]] = ashr exact i64 [[DOTNEG57]], 32
; INTERLEAVE-NEXT:    [[TMP88:%.*]] = getelementptr inbounds i8, ptr [[TMP67]], i64 [[TMP87]]
; INTERLEAVE-NEXT:    [[TMP89:%.*]] = shl i64 [[TMP14]], 32
; INTERLEAVE-NEXT:    [[SEXT58:%.*]] = sub i64 4294967296, [[TMP89]]
; INTERLEAVE-NEXT:    [[TMP90:%.*]] = ashr exact i64 [[SEXT58]], 32
; INTERLEAVE-NEXT:    [[TMP91:%.*]] = getelementptr inbounds i8, ptr [[TMP88]], i64 [[TMP90]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD32:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP91]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP92:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD32]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP93:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP94:%.*]] = add i64 [[TMP93]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP95:%.*]] = add i64 [[TMP94]], [[TMP14]]
; INTERLEAVE-NEXT:    [[DOTNEG60:%.*]] = mul i64 [[TMP95]], -4294967296
; INTERLEAVE-NEXT:    [[TMP96:%.*]] = ashr exact i64 [[DOTNEG60]], 32
; INTERLEAVE-NEXT:    [[TMP97:%.*]] = getelementptr inbounds i8, ptr [[TMP67]], i64 [[TMP96]]
; INTERLEAVE-NEXT:    [[TMP98:%.*]] = shl i64 [[TMP17]], 32
; INTERLEAVE-NEXT:    [[SEXT61:%.*]] = sub i64 4294967296, [[TMP98]]
; INTERLEAVE-NEXT:    [[TMP99:%.*]] = ashr exact i64 [[SEXT61]], 32
; INTERLEAVE-NEXT:    [[TMP100:%.*]] = getelementptr inbounds i8, ptr [[TMP97]], i64 [[TMP99]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD33:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP100]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[TMP101:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD33]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[TMP102:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP103:%.*]] = add i64 [[TMP102]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP104:%.*]] = add i64 [[TMP103]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP105:%.*]] = add i64 [[TMP104]], [[TMP17]]
; INTERLEAVE-NEXT:    [[DOTNEG63:%.*]] = mul i64 [[TMP105]], -4294967296
; INTERLEAVE-NEXT:    [[TMP106:%.*]] = ashr exact i64 [[DOTNEG63]], 32
; INTERLEAVE-NEXT:    [[TMP107:%.*]] = getelementptr inbounds i8, ptr [[TMP67]], i64 [[TMP106]]
; INTERLEAVE-NEXT:    [[TMP108:%.*]] = shl i64 [[TMP20]], 32
; INTERLEAVE-NEXT:    [[SEXT64:%.*]] = sub i64 4294967296, [[TMP108]]
; INTERLEAVE-NEXT:    [[TMP109:%.*]] = ashr exact i64 [[SEXT64]], 32
; INTERLEAVE-NEXT:    [[TMP110:%.*]] = getelementptr inbounds i8, ptr [[TMP107]], i64 [[TMP109]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD34:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP110]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[TMP111:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD34]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[TMP112:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP113:%.*]] = add i64 [[TMP112]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP114:%.*]] = add i64 [[TMP113]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP115:%.*]] = add i64 [[TMP114]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP116:%.*]] = add i64 [[TMP115]], [[TMP20]]
; INTERLEAVE-NEXT:    [[DOTNEG66:%.*]] = mul i64 [[TMP116]], -4294967296
; INTERLEAVE-NEXT:    [[TMP117:%.*]] = ashr exact i64 [[DOTNEG66]], 32
; INTERLEAVE-NEXT:    [[TMP118:%.*]] = getelementptr inbounds i8, ptr [[TMP67]], i64 [[TMP117]]
; INTERLEAVE-NEXT:    [[TMP119:%.*]] = shl i64 [[TMP23]], 32
; INTERLEAVE-NEXT:    [[SEXT67:%.*]] = sub i64 4294967296, [[TMP119]]
; INTERLEAVE-NEXT:    [[TMP120:%.*]] = ashr exact i64 [[SEXT67]], 32
; INTERLEAVE-NEXT:    [[TMP121:%.*]] = getelementptr inbounds i8, ptr [[TMP118]], i64 [[TMP120]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD35:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP121]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[TMP122:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD35]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[TMP123:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP124:%.*]] = add i64 [[TMP123]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP125:%.*]] = add i64 [[TMP124]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP126:%.*]] = add i64 [[TMP125]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP127:%.*]] = add i64 [[TMP126]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP128:%.*]] = add i64 [[TMP127]], [[TMP23]]
; INTERLEAVE-NEXT:    [[DOTNEG69:%.*]] = mul i64 [[TMP128]], -4294967296
; INTERLEAVE-NEXT:    [[TMP129:%.*]] = ashr exact i64 [[DOTNEG69]], 32
; INTERLEAVE-NEXT:    [[TMP130:%.*]] = getelementptr inbounds i8, ptr [[TMP67]], i64 [[TMP129]]
; INTERLEAVE-NEXT:    [[TMP131:%.*]] = shl i64 [[TMP26]], 32
; INTERLEAVE-NEXT:    [[SEXT70:%.*]] = sub i64 4294967296, [[TMP131]]
; INTERLEAVE-NEXT:    [[TMP132:%.*]] = ashr exact i64 [[SEXT70]], 32
; INTERLEAVE-NEXT:    [[TMP133:%.*]] = getelementptr inbounds i8, ptr [[TMP130]], i64 [[TMP132]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD36:%.*]] = call <vscale x 8 x i8> @llvm.vp.load.nxv8i8.p0(ptr [[TMP133]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[TMP134:%.*]] = call <vscale x 8 x i8> @llvm.experimental.vp.reverse.nxv8i8(<vscale x 8 x i8> [[VP_OP_LOAD36]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[VP_OP:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP71]], <vscale x 8 x i8> [[VP_OP_LOAD]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[VP_OP37:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP77]], <vscale x 8 x i8> [[VP_OP_LOAD22]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[VP_OP38:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP84]], <vscale x 8 x i8> [[VP_OP_LOAD23]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[VP_OP39:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP92]], <vscale x 8 x i8> [[VP_OP_LOAD24]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[VP_OP40:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP101]], <vscale x 8 x i8> [[VP_OP_LOAD25]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[VP_OP41:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP111]], <vscale x 8 x i8> [[VP_OP_LOAD26]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[VP_OP42:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP122]], <vscale x 8 x i8> [[VP_OP_LOAD27]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[VP_OP43:%.*]] = call <vscale x 8 x i8> @llvm.vp.add.nxv8i8(<vscale x 8 x i8> [[TMP134]], <vscale x 8 x i8> [[VP_OP_LOAD28]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[TMP135:%.*]] = getelementptr inbounds i8, ptr [[C:%.*]], i64 [[OFFSET_IDX]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP]], ptr [[TMP135]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[SEXT71:%.*]] = shl i64 [[TMP5]], 32
; INTERLEAVE-NEXT:    [[TMP136:%.*]] = ashr exact i64 [[SEXT71]], 32
; INTERLEAVE-NEXT:    [[TMP137:%.*]] = getelementptr inbounds i8, ptr [[TMP135]], i64 [[TMP136]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP37]], ptr [[TMP137]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP138:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[SEXT72:%.*]] = shl i64 [[TMP138]], 32
; INTERLEAVE-NEXT:    [[TMP139:%.*]] = ashr exact i64 [[SEXT72]], 32
; INTERLEAVE-NEXT:    [[TMP140:%.*]] = getelementptr inbounds i8, ptr [[TMP135]], i64 [[TMP139]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP38]], ptr [[TMP140]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP141:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP142:%.*]] = add i64 [[TMP141]], [[TMP11]]
; INTERLEAVE-NEXT:    [[SEXT73:%.*]] = shl i64 [[TMP142]], 32
; INTERLEAVE-NEXT:    [[TMP143:%.*]] = ashr exact i64 [[SEXT73]], 32
; INTERLEAVE-NEXT:    [[TMP144:%.*]] = getelementptr inbounds i8, ptr [[TMP135]], i64 [[TMP143]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP39]], ptr [[TMP144]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP145:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP146:%.*]] = add i64 [[TMP145]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP147:%.*]] = add i64 [[TMP146]], [[TMP14]]
; INTERLEAVE-NEXT:    [[SEXT74:%.*]] = shl i64 [[TMP147]], 32
; INTERLEAVE-NEXT:    [[TMP148:%.*]] = ashr exact i64 [[SEXT74]], 32
; INTERLEAVE-NEXT:    [[TMP149:%.*]] = getelementptr inbounds i8, ptr [[TMP135]], i64 [[TMP148]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP40]], ptr [[TMP149]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[TMP150:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP151:%.*]] = add i64 [[TMP150]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP152:%.*]] = add i64 [[TMP151]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP153:%.*]] = add i64 [[TMP152]], [[TMP17]]
; INTERLEAVE-NEXT:    [[SEXT75:%.*]] = shl i64 [[TMP153]], 32
; INTERLEAVE-NEXT:    [[TMP154:%.*]] = ashr exact i64 [[SEXT75]], 32
; INTERLEAVE-NEXT:    [[TMP155:%.*]] = getelementptr inbounds i8, ptr [[TMP135]], i64 [[TMP154]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP41]], ptr [[TMP155]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[TMP156:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP157:%.*]] = add i64 [[TMP156]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP158:%.*]] = add i64 [[TMP157]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP159:%.*]] = add i64 [[TMP158]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP160:%.*]] = add i64 [[TMP159]], [[TMP20]]
; INTERLEAVE-NEXT:    [[SEXT76:%.*]] = shl i64 [[TMP160]], 32
; INTERLEAVE-NEXT:    [[TMP161:%.*]] = ashr exact i64 [[SEXT76]], 32
; INTERLEAVE-NEXT:    [[TMP162:%.*]] = getelementptr inbounds i8, ptr [[TMP135]], i64 [[TMP161]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP42]], ptr [[TMP162]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[TMP163:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP164:%.*]] = add i64 [[TMP163]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP165:%.*]] = add i64 [[TMP164]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP166:%.*]] = add i64 [[TMP165]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP167:%.*]] = add i64 [[TMP166]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP168:%.*]] = add i64 [[TMP167]], [[TMP23]]
; INTERLEAVE-NEXT:    [[SEXT77:%.*]] = shl i64 [[TMP168]], 32
; INTERLEAVE-NEXT:    [[TMP169:%.*]] = ashr exact i64 [[SEXT77]], 32
; INTERLEAVE-NEXT:    [[TMP170:%.*]] = getelementptr inbounds i8, ptr [[TMP135]], i64 [[TMP169]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv8i8.p0(<vscale x 8 x i8> [[VP_OP43]], ptr [[TMP170]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[TMP171:%.*]] = add i64 [[TMP5]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP172:%.*]] = add i64 [[TMP171]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP173:%.*]] = add i64 [[TMP172]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP174:%.*]] = add i64 [[TMP173]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP175:%.*]] = add i64 [[TMP174]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP176:%.*]] = add i64 [[TMP175]], [[TMP23]]
; INTERLEAVE-NEXT:    [[TMP177:%.*]] = add i64 [[TMP176]], [[TMP26]]
; INTERLEAVE-NEXT:    [[TMP178:%.*]] = and i64 [[TMP177]], 4294967295
; INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[OFFSET_IDX]], [[TMP178]]
; INTERLEAVE-NEXT:    [[TMP179:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[TMP179]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; INTERLEAVE:       middle.block:
; INTERLEAVE-NEXT:    br i1 true, label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; INTERLEAVE:       scalar.ph:
; INTERLEAVE-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; INTERLEAVE-NEXT:    br label [[FOR_BODY:%.*]]
; INTERLEAVE:       for.cond.cleanup.loopexit:
; INTERLEAVE-NEXT:    br label [[FOR_COND_CLEANUP]]
; INTERLEAVE:       for.cond.cleanup:
; INTERLEAVE-NEXT:    ret void
; INTERLEAVE:       for.body:
; INTERLEAVE-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; INTERLEAVE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[A]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP180:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; INTERLEAVE-NEXT:    [[TMP181:%.*]] = trunc i64 [[INDVARS_IV]] to i32
; INTERLEAVE-NEXT:    [[SUB:%.*]] = sub nsw i32 [[N]], [[TMP181]]
; INTERLEAVE-NEXT:    [[IDXPROM1:%.*]] = sext i32 [[SUB]] to i64
; INTERLEAVE-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i8, ptr [[B]], i64 [[IDXPROM1]]
; INTERLEAVE-NEXT:    [[TMP182:%.*]] = load i8, ptr [[ARRAYIDX2]], align 1
; INTERLEAVE-NEXT:    [[ADD:%.*]] = add i8 [[TMP182]], [[TMP180]]
; INTERLEAVE-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds i8, ptr [[C]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    store i8 [[ADD]], ptr [[ARRAYIDX6]], align 1
; INTERLEAVE-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; INTERLEAVE-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
;
entry:
  %cmp13 = icmp sgt i32 %N, 0
  br i1 %cmp13, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i8, i8* %a, i64 %indvars.iv
  %0 = load i8, i8* %arrayidx, align 1
  %1 = trunc i64 %indvars.iv to i32
  %sub = sub nsw i32 %N, %1
  %idxprom1 = sext i32 %sub to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %b, i64 %idxprom1
  %2 = load i8, i8* %arrayidx2, align 1
  %add = add i8 %2, %0
  %arrayidx6 = getelementptr inbounds i8, i8* %c, i64 %indvars.iv
  store i8 %add, i8* %arrayidx6, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}
