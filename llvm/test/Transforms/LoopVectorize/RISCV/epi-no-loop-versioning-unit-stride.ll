; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -O2 -riscv-v-vector-bits-min=64 < %s -o - | FileCheck %s --check-prefix=NO-STRIDE
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -disable-loop-versioning-for-stride \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -O2 -riscv-v-vector-bits-min=64 < %s -o - | FileCheck %s --check-prefix=STRIDED
; ModuleID = 't.c'
source_filename = "t.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"
target triple = "riscv64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite) vscale_range(1,1024)
define dso_local double @test(ptr nocapture noundef readonly %va, ptr nocapture noundef %vb, i32 noundef signext %N, i32 noundef signext %groups, i32 noundef signext %bstride, i32 noundef signext %batches) local_unnamed_addr #0 {
; NO-STRIDE-LABEL: @test(
; NO-STRIDE-NEXT:  entry:
; NO-STRIDE-NEXT:    [[CMP367:%.*]] = icmp sgt i32 [[BATCHES:%.*]], 0
; NO-STRIDE-NEXT:    br i1 [[CMP367]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; NO-STRIDE:       for.body.lr.ph:
; NO-STRIDE-NEXT:    [[SHL:%.*]] = shl i32 [[GROUPS:%.*]], 1
; NO-STRIDE-NEXT:    [[MUL19:%.*]] = shl i32 [[GROUPS]], 2
; NO-STRIDE-NEXT:    [[MUL33:%.*]] = mul i32 [[GROUPS]], 6
; NO-STRIDE-NEXT:    [[MUL47:%.*]] = shl i32 [[GROUPS]], 3
; NO-STRIDE-NEXT:    [[MUL61:%.*]] = mul i32 [[GROUPS]], 10
; NO-STRIDE-NEXT:    [[MUL75:%.*]] = mul i32 [[GROUPS]], 12
; NO-STRIDE-NEXT:    [[MUL89:%.*]] = mul i32 [[GROUPS]], 14
; NO-STRIDE-NEXT:    [[SHR:%.*]] = ashr i32 [[N:%.*]], 2
; NO-STRIDE-NEXT:    [[MUL150:%.*]] = shl nsw i32 [[SHR]], 1
; NO-STRIDE-NEXT:    [[MUL164:%.*]] = mul nsw i32 [[SHR]], 3
; NO-STRIDE-NEXT:    [[MUL178:%.*]] = and i32 [[N]], -4
; NO-STRIDE-NEXT:    [[MUL192:%.*]] = mul nsw i32 [[SHR]], 5
; NO-STRIDE-NEXT:    [[MUL206:%.*]] = mul nsw i32 [[SHR]], 6
; NO-STRIDE-NEXT:    [[MUL220:%.*]] = mul nsw i32 [[SHR]], 7
; NO-STRIDE-NEXT:    [[TMP0:%.*]] = sext i32 [[BSTRIDE:%.*]] to i64
; NO-STRIDE-NEXT:    [[TMP1:%.*]] = sext i32 [[SHL]] to i64
; NO-STRIDE-NEXT:    [[TMP2:%.*]] = sext i32 [[MUL19]] to i64
; NO-STRIDE-NEXT:    [[TMP3:%.*]] = sext i32 [[MUL33]] to i64
; NO-STRIDE-NEXT:    [[TMP4:%.*]] = sext i32 [[MUL47]] to i64
; NO-STRIDE-NEXT:    [[TMP5:%.*]] = sext i32 [[MUL61]] to i64
; NO-STRIDE-NEXT:    [[TMP6:%.*]] = sext i32 [[MUL75]] to i64
; NO-STRIDE-NEXT:    [[TMP7:%.*]] = sext i32 [[MUL89]] to i64
; NO-STRIDE-NEXT:    [[TMP8:%.*]] = sext i32 [[SHR]] to i64
; NO-STRIDE-NEXT:    [[TMP9:%.*]] = sext i32 [[MUL150]] to i64
; NO-STRIDE-NEXT:    [[TMP10:%.*]] = sext i32 [[MUL164]] to i64
; NO-STRIDE-NEXT:    [[TMP11:%.*]] = sext i32 [[MUL178]] to i64
; NO-STRIDE-NEXT:    [[TMP12:%.*]] = sext i32 [[MUL192]] to i64
; NO-STRIDE-NEXT:    [[TMP13:%.*]] = sext i32 [[MUL206]] to i64
; NO-STRIDE-NEXT:    [[TMP14:%.*]] = sext i32 [[MUL220]] to i64
; NO-STRIDE-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[BATCHES]] to i64
; NO-STRIDE-NEXT:    [[IDENT_CHECK_NOT:%.*]] = icmp eq i32 [[BSTRIDE]], 1
; NO-STRIDE-NEXT:    br i1 [[IDENT_CHECK_NOT]], label [[VECTOR_BODY:%.*]], label [[FOR_BODY:%.*]]
; NO-STRIDE:       vector.body:
; NO-STRIDE-NEXT:    [[INDEX:%.*]] = phi i64 [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ], [ 0, [[FOR_BODY_LR_PH]] ]
; NO-STRIDE-NEXT:    [[TMP15:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; NO-STRIDE-NEXT:    [[TMP16:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP15]], i64 3, i64 0)
; NO-STRIDE-NEXT:    [[TMP17:%.*]] = trunc i64 [[TMP16]] to i32
; NO-STRIDE-NEXT:    [[TMP18:%.*]] = mul nsw i64 [[INDEX]], [[TMP0]]
; NO-STRIDE-NEXT:    [[TMP19:%.*]] = getelementptr inbounds double, ptr [[VA:%.*]], i64 [[TMP18]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP19]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6:![0-9]+]], !llvm.access.group [[ACC_GRP10:![0-9]+]]
; NO-STRIDE-NEXT:    [[TMP20:%.*]] = add nsw i64 [[TMP18]], 1
; NO-STRIDE-NEXT:    [[TMP21:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP20]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD3:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP21]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP22:%.*]] = add nsw i64 [[TMP18]], [[TMP1]]
; NO-STRIDE-NEXT:    [[TMP23:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP22]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD4:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP23]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP24:%.*]] = add nsw i64 [[TMP20]], [[TMP1]]
; NO-STRIDE-NEXT:    [[TMP25:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP24]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD5:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP25]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP26:%.*]] = add nsw i64 [[TMP18]], [[TMP2]]
; NO-STRIDE-NEXT:    [[TMP27:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP26]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD6:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP27]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP28:%.*]] = add nsw i64 [[TMP20]], [[TMP2]]
; NO-STRIDE-NEXT:    [[TMP29:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP28]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD7:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP29]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP30:%.*]] = add nsw i64 [[TMP18]], [[TMP3]]
; NO-STRIDE-NEXT:    [[TMP31:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP30]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD8:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP31]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP32:%.*]] = add nsw i64 [[TMP20]], [[TMP3]]
; NO-STRIDE-NEXT:    [[TMP33:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP32]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD9:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP33]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP34:%.*]] = add nsw i64 [[TMP18]], [[TMP4]]
; NO-STRIDE-NEXT:    [[TMP35:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP34]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD10:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP35]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP36:%.*]] = add nsw i64 [[TMP20]], [[TMP4]]
; NO-STRIDE-NEXT:    [[TMP37:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP36]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD11:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP37]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP38:%.*]] = add nsw i64 [[TMP18]], [[TMP5]]
; NO-STRIDE-NEXT:    [[TMP39:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP38]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD12:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP39]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP40:%.*]] = add nsw i64 [[TMP20]], [[TMP5]]
; NO-STRIDE-NEXT:    [[TMP41:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP40]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD13:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP41]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP42:%.*]] = add nsw i64 [[TMP18]], [[TMP6]]
; NO-STRIDE-NEXT:    [[TMP43:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP42]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD14:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP43]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP44:%.*]] = add nsw i64 [[TMP20]], [[TMP6]]
; NO-STRIDE-NEXT:    [[TMP45:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP44]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD15:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP45]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP46:%.*]] = add nsw i64 [[TMP18]], [[TMP7]]
; NO-STRIDE-NEXT:    [[TMP47:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP46]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD16:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP47]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP48:%.*]] = add nsw i64 [[TMP20]], [[TMP7]]
; NO-STRIDE-NEXT:    [[TMP49:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP48]]
; NO-STRIDE-NEXT:    [[VP_OP_LOAD17:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP49]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[VP_OP:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD]], <vscale x 1 x double> [[VP_OP_LOAD4]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP18:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP]], <vscale x 1 x double> [[VP_OP_LOAD6]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP19:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP18]], <vscale x 1 x double> [[VP_OP_LOAD8]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP20:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP19]], <vscale x 1 x double> [[VP_OP_LOAD10]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP21:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP20]], <vscale x 1 x double> [[VP_OP_LOAD12]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP22:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP21]], <vscale x 1 x double> [[VP_OP_LOAD14]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP23:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP22]], <vscale x 1 x double> [[VP_OP_LOAD16]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP24:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD3]], <vscale x 1 x double> [[VP_OP_LOAD5]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP25:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP24]], <vscale x 1 x double> [[VP_OP_LOAD7]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP26:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP25]], <vscale x 1 x double> [[VP_OP_LOAD9]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP27:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP26]], <vscale x 1 x double> [[VP_OP_LOAD11]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP28:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP27]], <vscale x 1 x double> [[VP_OP_LOAD13]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP29:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP28]], <vscale x 1 x double> [[VP_OP_LOAD15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP30:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP29]], <vscale x 1 x double> [[VP_OP_LOAD17]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP31:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> [[VP_OP23]], <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 2.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[VP_OP32:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> [[VP_OP30]], <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 2.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]])
; NO-STRIDE-NEXT:    [[TMP50:%.*]] = getelementptr inbounds double, ptr [[VB:%.*]], i64 [[TMP18]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP23]], ptr [[TMP50]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP51:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP20]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP30]], ptr [[TMP51]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP52:%.*]] = add nsw i64 [[TMP18]], [[TMP8]]
; NO-STRIDE-NEXT:    [[TMP53:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP52]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP31]], ptr [[TMP53]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP54:%.*]] = add nsw i64 [[TMP20]], [[TMP8]]
; NO-STRIDE-NEXT:    [[TMP55:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP54]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP32]], ptr [[TMP55]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP56:%.*]] = add nsw i64 [[TMP18]], [[TMP9]]
; NO-STRIDE-NEXT:    [[TMP57:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP56]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP31]], ptr [[TMP57]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP58:%.*]] = add nsw i64 [[TMP20]], [[TMP9]]
; NO-STRIDE-NEXT:    [[TMP59:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP58]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP32]], ptr [[TMP59]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP60:%.*]] = add nsw i64 [[TMP18]], [[TMP10]]
; NO-STRIDE-NEXT:    [[TMP61:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP60]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP31]], ptr [[TMP61]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP62:%.*]] = add nsw i64 [[TMP20]], [[TMP10]]
; NO-STRIDE-NEXT:    [[TMP63:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP62]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP32]], ptr [[TMP63]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP64:%.*]] = add nsw i64 [[TMP18]], [[TMP11]]
; NO-STRIDE-NEXT:    [[TMP65:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP64]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP31]], ptr [[TMP65]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP66:%.*]] = add nsw i64 [[TMP20]], [[TMP11]]
; NO-STRIDE-NEXT:    [[TMP67:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP66]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP32]], ptr [[TMP67]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP68:%.*]] = add nsw i64 [[TMP18]], [[TMP12]]
; NO-STRIDE-NEXT:    [[TMP69:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP68]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP31]], ptr [[TMP69]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP70:%.*]] = add nsw i64 [[TMP20]], [[TMP12]]
; NO-STRIDE-NEXT:    [[TMP71:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP70]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP32]], ptr [[TMP71]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP72:%.*]] = add nsw i64 [[TMP18]], [[TMP13]]
; NO-STRIDE-NEXT:    [[TMP73:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP72]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP31]], ptr [[TMP73]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP74:%.*]] = add nsw i64 [[TMP20]], [[TMP13]]
; NO-STRIDE-NEXT:    [[TMP75:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP74]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP32]], ptr [[TMP75]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP76:%.*]] = add nsw i64 [[TMP18]], [[TMP14]]
; NO-STRIDE-NEXT:    [[TMP77:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP76]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP31]], ptr [[TMP77]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP78:%.*]] = add nsw i64 [[TMP20]], [[TMP14]]
; NO-STRIDE-NEXT:    [[TMP79:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP78]]
; NO-STRIDE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP32]], ptr [[TMP79]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP17]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP80:%.*]] = and i64 [[TMP16]], 4294967295
; NO-STRIDE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP80]]
; NO-STRIDE-NEXT:    [[TMP81:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-STRIDE-NEXT:    br i1 [[TMP81]], label [[FOR_COND_CLEANUP]], label [[VECTOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]
; NO-STRIDE:       for.cond.cleanup:
; NO-STRIDE-NEXT:    [[TMP82:%.*]] = load double, ptr [[VB]], align 8, !tbaa [[TBAA6]]
; NO-STRIDE-NEXT:    ret double [[TMP82]]
; NO-STRIDE:       for.body:
; NO-STRIDE-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_LR_PH]] ]
; NO-STRIDE-NEXT:    [[TMP83:%.*]] = mul nsw i64 [[INDVARS_IV]], [[TMP0]]
; NO-STRIDE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP83]]
; NO-STRIDE-NEXT:    [[TMP84:%.*]] = load double, ptr [[ARRAYIDX]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP85:%.*]] = add nsw i64 [[TMP83]], 1
; NO-STRIDE-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP85]]
; NO-STRIDE-NEXT:    [[TMP86:%.*]] = load double, ptr [[ARRAYIDX4]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP87:%.*]] = add nsw i64 [[TMP83]], [[TMP1]]
; NO-STRIDE-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP87]]
; NO-STRIDE-NEXT:    [[TMP88:%.*]] = load double, ptr [[ARRAYIDX9]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP89:%.*]] = add nsw i64 [[TMP85]], [[TMP1]]
; NO-STRIDE-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP89]]
; NO-STRIDE-NEXT:    [[TMP90:%.*]] = load double, ptr [[ARRAYIDX15]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP91:%.*]] = add nsw i64 [[TMP83]], [[TMP2]]
; NO-STRIDE-NEXT:    [[ARRAYIDX22:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP91]]
; NO-STRIDE-NEXT:    [[TMP92:%.*]] = load double, ptr [[ARRAYIDX22]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP93:%.*]] = add nsw i64 [[TMP85]], [[TMP2]]
; NO-STRIDE-NEXT:    [[ARRAYIDX29:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP93]]
; NO-STRIDE-NEXT:    [[TMP94:%.*]] = load double, ptr [[ARRAYIDX29]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP95:%.*]] = add nsw i64 [[TMP83]], [[TMP3]]
; NO-STRIDE-NEXT:    [[ARRAYIDX36:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP95]]
; NO-STRIDE-NEXT:    [[TMP96:%.*]] = load double, ptr [[ARRAYIDX36]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP97:%.*]] = add nsw i64 [[TMP85]], [[TMP3]]
; NO-STRIDE-NEXT:    [[ARRAYIDX43:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP97]]
; NO-STRIDE-NEXT:    [[TMP98:%.*]] = load double, ptr [[ARRAYIDX43]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP99:%.*]] = add nsw i64 [[TMP83]], [[TMP4]]
; NO-STRIDE-NEXT:    [[ARRAYIDX50:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP99]]
; NO-STRIDE-NEXT:    [[TMP100:%.*]] = load double, ptr [[ARRAYIDX50]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP101:%.*]] = add nsw i64 [[TMP85]], [[TMP4]]
; NO-STRIDE-NEXT:    [[ARRAYIDX57:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP101]]
; NO-STRIDE-NEXT:    [[TMP102:%.*]] = load double, ptr [[ARRAYIDX57]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP103:%.*]] = add nsw i64 [[TMP83]], [[TMP5]]
; NO-STRIDE-NEXT:    [[ARRAYIDX64:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP103]]
; NO-STRIDE-NEXT:    [[TMP104:%.*]] = load double, ptr [[ARRAYIDX64]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP105:%.*]] = add nsw i64 [[TMP85]], [[TMP5]]
; NO-STRIDE-NEXT:    [[ARRAYIDX71:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP105]]
; NO-STRIDE-NEXT:    [[TMP106:%.*]] = load double, ptr [[ARRAYIDX71]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP107:%.*]] = add nsw i64 [[TMP83]], [[TMP6]]
; NO-STRIDE-NEXT:    [[ARRAYIDX78:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP107]]
; NO-STRIDE-NEXT:    [[TMP108:%.*]] = load double, ptr [[ARRAYIDX78]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP109:%.*]] = add nsw i64 [[TMP85]], [[TMP6]]
; NO-STRIDE-NEXT:    [[ARRAYIDX85:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP109]]
; NO-STRIDE-NEXT:    [[TMP110:%.*]] = load double, ptr [[ARRAYIDX85]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP111:%.*]] = add nsw i64 [[TMP83]], [[TMP7]]
; NO-STRIDE-NEXT:    [[ARRAYIDX92:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP111]]
; NO-STRIDE-NEXT:    [[TMP112:%.*]] = load double, ptr [[ARRAYIDX92]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP113:%.*]] = add nsw i64 [[TMP85]], [[TMP7]]
; NO-STRIDE-NEXT:    [[ARRAYIDX99:%.*]] = getelementptr inbounds double, ptr [[VA]], i64 [[TMP113]]
; NO-STRIDE-NEXT:    [[TMP114:%.*]] = load double, ptr [[ARRAYIDX99]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[ADD100:%.*]] = fadd double [[TMP84]], [[TMP88]]
; NO-STRIDE-NEXT:    [[ADD101:%.*]] = fadd double [[ADD100]], [[TMP92]]
; NO-STRIDE-NEXT:    [[ADD102:%.*]] = fadd double [[ADD101]], [[TMP96]]
; NO-STRIDE-NEXT:    [[ADD103:%.*]] = fadd double [[ADD102]], [[TMP100]]
; NO-STRIDE-NEXT:    [[ADD104:%.*]] = fadd double [[ADD103]], [[TMP104]]
; NO-STRIDE-NEXT:    [[ADD105:%.*]] = fadd double [[ADD104]], [[TMP108]]
; NO-STRIDE-NEXT:    [[ADD106:%.*]] = fadd double [[ADD105]], [[TMP112]]
; NO-STRIDE-NEXT:    [[ADD107:%.*]] = fadd double [[TMP86]], [[TMP90]]
; NO-STRIDE-NEXT:    [[ADD108:%.*]] = fadd double [[ADD107]], [[TMP94]]
; NO-STRIDE-NEXT:    [[ADD109:%.*]] = fadd double [[ADD108]], [[TMP98]]
; NO-STRIDE-NEXT:    [[ADD110:%.*]] = fadd double [[ADD109]], [[TMP102]]
; NO-STRIDE-NEXT:    [[ADD111:%.*]] = fadd double [[ADD110]], [[TMP106]]
; NO-STRIDE-NEXT:    [[ADD112:%.*]] = fadd double [[ADD111]], [[TMP110]]
; NO-STRIDE-NEXT:    [[ADD113:%.*]] = fadd double [[ADD112]], [[TMP114]]
; NO-STRIDE-NEXT:    [[MUL114:%.*]] = fmul double [[ADD106]], 2.000000e+00
; NO-STRIDE-NEXT:    [[MUL115:%.*]] = fmul double [[ADD113]], 2.000000e+00
; NO-STRIDE-NEXT:    [[ARRAYIDX131:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP83]]
; NO-STRIDE-NEXT:    store double [[ADD106]], ptr [[ARRAYIDX131]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[ARRAYIDX135:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP85]]
; NO-STRIDE-NEXT:    store double [[ADD113]], ptr [[ARRAYIDX135]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP115:%.*]] = add nsw i64 [[TMP83]], [[TMP8]]
; NO-STRIDE-NEXT:    [[ARRAYIDX140:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP115]]
; NO-STRIDE-NEXT:    store double [[MUL114]], ptr [[ARRAYIDX140]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP116:%.*]] = add nsw i64 [[TMP85]], [[TMP8]]
; NO-STRIDE-NEXT:    [[ARRAYIDX146:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP116]]
; NO-STRIDE-NEXT:    store double [[MUL115]], ptr [[ARRAYIDX146]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP117:%.*]] = add nsw i64 [[TMP83]], [[TMP9]]
; NO-STRIDE-NEXT:    [[ARRAYIDX153:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP117]]
; NO-STRIDE-NEXT:    store double [[MUL114]], ptr [[ARRAYIDX153]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP118:%.*]] = add nsw i64 [[TMP85]], [[TMP9]]
; NO-STRIDE-NEXT:    [[ARRAYIDX160:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP118]]
; NO-STRIDE-NEXT:    store double [[MUL115]], ptr [[ARRAYIDX160]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP119:%.*]] = add nsw i64 [[TMP83]], [[TMP10]]
; NO-STRIDE-NEXT:    [[ARRAYIDX167:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP119]]
; NO-STRIDE-NEXT:    store double [[MUL114]], ptr [[ARRAYIDX167]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP120:%.*]] = add nsw i64 [[TMP85]], [[TMP10]]
; NO-STRIDE-NEXT:    [[ARRAYIDX174:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP120]]
; NO-STRIDE-NEXT:    store double [[MUL115]], ptr [[ARRAYIDX174]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP121:%.*]] = add nsw i64 [[TMP83]], [[TMP11]]
; NO-STRIDE-NEXT:    [[ARRAYIDX181:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP121]]
; NO-STRIDE-NEXT:    store double [[MUL114]], ptr [[ARRAYIDX181]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP122:%.*]] = add nsw i64 [[TMP85]], [[TMP11]]
; NO-STRIDE-NEXT:    [[ARRAYIDX188:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP122]]
; NO-STRIDE-NEXT:    store double [[MUL115]], ptr [[ARRAYIDX188]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP123:%.*]] = add nsw i64 [[TMP83]], [[TMP12]]
; NO-STRIDE-NEXT:    [[ARRAYIDX195:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP123]]
; NO-STRIDE-NEXT:    store double [[MUL114]], ptr [[ARRAYIDX195]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP124:%.*]] = add nsw i64 [[TMP85]], [[TMP12]]
; NO-STRIDE-NEXT:    [[ARRAYIDX202:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP124]]
; NO-STRIDE-NEXT:    store double [[MUL115]], ptr [[ARRAYIDX202]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP125:%.*]] = add nsw i64 [[TMP83]], [[TMP13]]
; NO-STRIDE-NEXT:    [[ARRAYIDX209:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP125]]
; NO-STRIDE-NEXT:    store double [[MUL114]], ptr [[ARRAYIDX209]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP126:%.*]] = add nsw i64 [[TMP85]], [[TMP13]]
; NO-STRIDE-NEXT:    [[ARRAYIDX216:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP126]]
; NO-STRIDE-NEXT:    store double [[MUL115]], ptr [[ARRAYIDX216]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP127:%.*]] = add nsw i64 [[TMP83]], [[TMP14]]
; NO-STRIDE-NEXT:    [[ARRAYIDX223:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP127]]
; NO-STRIDE-NEXT:    store double [[MUL114]], ptr [[ARRAYIDX223]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[TMP128:%.*]] = add nsw i64 [[TMP85]], [[TMP14]]
; NO-STRIDE-NEXT:    [[ARRAYIDX230:%.*]] = getelementptr inbounds double, ptr [[VB]], i64 [[TMP128]]
; NO-STRIDE-NEXT:    store double [[MUL115]], ptr [[ARRAYIDX230]], align 8, !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; NO-STRIDE-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; NO-STRIDE-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; NO-STRIDE-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP16:![0-9]+]]
;
; STRIDED-LABEL: @test(
; STRIDED-NEXT:  entry:
; STRIDED-NEXT:    [[CMP367:%.*]] = icmp sgt i32 [[BATCHES:%.*]], 0
; STRIDED-NEXT:    br i1 [[CMP367]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; STRIDED:       for.body.lr.ph:
; STRIDED-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[BATCHES]] to i64
; STRIDED-NEXT:    [[SHR:%.*]] = ashr i32 [[N:%.*]], 2
; STRIDED-NEXT:    [[MUL220:%.*]] = mul nsw i32 [[SHR]], 7
; STRIDED-NEXT:    [[TMP0:%.*]] = sext i32 [[MUL220]] to i64
; STRIDED-NEXT:    [[MUL206:%.*]] = mul nsw i32 [[SHR]], 6
; STRIDED-NEXT:    [[TMP1:%.*]] = sext i32 [[MUL206]] to i64
; STRIDED-NEXT:    [[MUL192:%.*]] = mul nsw i32 [[SHR]], 5
; STRIDED-NEXT:    [[TMP2:%.*]] = sext i32 [[MUL192]] to i64
; STRIDED-NEXT:    [[MUL178:%.*]] = and i32 [[N]], -4
; STRIDED-NEXT:    [[TMP3:%.*]] = sext i32 [[MUL178]] to i64
; STRIDED-NEXT:    [[MUL164:%.*]] = mul nsw i32 [[SHR]], 3
; STRIDED-NEXT:    [[TMP4:%.*]] = sext i32 [[MUL164]] to i64
; STRIDED-NEXT:    [[MUL150:%.*]] = shl nsw i32 [[SHR]], 1
; STRIDED-NEXT:    [[TMP5:%.*]] = sext i32 [[MUL150]] to i64
; STRIDED-NEXT:    [[TMP6:%.*]] = sext i32 [[SHR]] to i64
; STRIDED-NEXT:    [[MUL89:%.*]] = mul i32 [[GROUPS:%.*]], 14
; STRIDED-NEXT:    [[TMP7:%.*]] = sext i32 [[MUL89]] to i64
; STRIDED-NEXT:    [[MUL75:%.*]] = mul i32 [[GROUPS]], 12
; STRIDED-NEXT:    [[TMP8:%.*]] = sext i32 [[MUL75]] to i64
; STRIDED-NEXT:    [[MUL61:%.*]] = mul i32 [[GROUPS]], 10
; STRIDED-NEXT:    [[TMP9:%.*]] = sext i32 [[MUL61]] to i64
; STRIDED-NEXT:    [[MUL47:%.*]] = shl i32 [[GROUPS]], 3
; STRIDED-NEXT:    [[TMP10:%.*]] = sext i32 [[MUL47]] to i64
; STRIDED-NEXT:    [[MUL33:%.*]] = mul i32 [[GROUPS]], 6
; STRIDED-NEXT:    [[TMP11:%.*]] = sext i32 [[MUL33]] to i64
; STRIDED-NEXT:    [[MUL19:%.*]] = shl i32 [[GROUPS]], 2
; STRIDED-NEXT:    [[TMP12:%.*]] = sext i32 [[MUL19]] to i64
; STRIDED-NEXT:    [[SHL:%.*]] = shl i32 [[GROUPS]], 1
; STRIDED-NEXT:    [[TMP13:%.*]] = sext i32 [[SHL]] to i64
; STRIDED-NEXT:    [[TMP14:%.*]] = sext i32 [[BSTRIDE:%.*]] to i64
; STRIDED-NEXT:    [[TMP15:%.*]] = shl nsw i64 [[TMP14]], 3
; STRIDED-NEXT:    [[UGLYGEP:%.*]] = getelementptr i8, ptr [[VA:%.*]], i64 8
; STRIDED-NEXT:    [[TMP16:%.*]] = shl nsw i64 [[TMP13]], 3
; STRIDED-NEXT:    [[UGLYGEP1:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP16]]
; STRIDED-NEXT:    [[TMP17:%.*]] = shl nsw i64 [[TMP13]], 3
; STRIDED-NEXT:    [[TMP18:%.*]] = or i64 [[TMP17]], 8
; STRIDED-NEXT:    [[UGLYGEP2:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP18]]
; STRIDED-NEXT:    [[TMP19:%.*]] = shl nsw i64 [[TMP12]], 3
; STRIDED-NEXT:    [[UGLYGEP3:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP19]]
; STRIDED-NEXT:    [[TMP20:%.*]] = shl nsw i64 [[TMP12]], 3
; STRIDED-NEXT:    [[TMP21:%.*]] = or i64 [[TMP20]], 8
; STRIDED-NEXT:    [[UGLYGEP4:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP21]]
; STRIDED-NEXT:    [[TMP22:%.*]] = shl nsw i64 [[TMP11]], 3
; STRIDED-NEXT:    [[UGLYGEP5:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP22]]
; STRIDED-NEXT:    [[TMP23:%.*]] = shl nsw i64 [[TMP11]], 3
; STRIDED-NEXT:    [[TMP24:%.*]] = or i64 [[TMP23]], 8
; STRIDED-NEXT:    [[UGLYGEP6:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP24]]
; STRIDED-NEXT:    [[TMP25:%.*]] = shl nsw i64 [[TMP10]], 3
; STRIDED-NEXT:    [[UGLYGEP7:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP25]]
; STRIDED-NEXT:    [[TMP26:%.*]] = shl nsw i64 [[TMP10]], 3
; STRIDED-NEXT:    [[TMP27:%.*]] = or i64 [[TMP26]], 8
; STRIDED-NEXT:    [[UGLYGEP8:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP27]]
; STRIDED-NEXT:    [[TMP28:%.*]] = shl nsw i64 [[TMP9]], 3
; STRIDED-NEXT:    [[UGLYGEP9:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP28]]
; STRIDED-NEXT:    [[TMP29:%.*]] = shl nsw i64 [[TMP9]], 3
; STRIDED-NEXT:    [[TMP30:%.*]] = or i64 [[TMP29]], 8
; STRIDED-NEXT:    [[UGLYGEP10:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP30]]
; STRIDED-NEXT:    [[TMP31:%.*]] = shl nsw i64 [[TMP8]], 3
; STRIDED-NEXT:    [[UGLYGEP11:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP31]]
; STRIDED-NEXT:    [[TMP32:%.*]] = shl nsw i64 [[TMP8]], 3
; STRIDED-NEXT:    [[TMP33:%.*]] = or i64 [[TMP32]], 8
; STRIDED-NEXT:    [[UGLYGEP12:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP33]]
; STRIDED-NEXT:    [[TMP34:%.*]] = shl nsw i64 [[TMP7]], 3
; STRIDED-NEXT:    [[UGLYGEP13:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP34]]
; STRIDED-NEXT:    [[TMP35:%.*]] = shl nsw i64 [[TMP7]], 3
; STRIDED-NEXT:    [[TMP36:%.*]] = or i64 [[TMP35]], 8
; STRIDED-NEXT:    [[UGLYGEP14:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP36]]
; STRIDED-NEXT:    [[UGLYGEP15:%.*]] = getelementptr i8, ptr [[VB:%.*]], i64 8
; STRIDED-NEXT:    [[TMP37:%.*]] = shl nsw i64 [[TMP6]], 3
; STRIDED-NEXT:    [[UGLYGEP16:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP37]]
; STRIDED-NEXT:    [[TMP38:%.*]] = shl nsw i64 [[TMP6]], 3
; STRIDED-NEXT:    [[TMP39:%.*]] = add nsw i64 [[TMP38]], 8
; STRIDED-NEXT:    [[UGLYGEP17:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP39]]
; STRIDED-NEXT:    [[TMP40:%.*]] = shl nsw i64 [[TMP5]], 3
; STRIDED-NEXT:    [[UGLYGEP18:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP40]]
; STRIDED-NEXT:    [[TMP41:%.*]] = shl nsw i64 [[TMP5]], 3
; STRIDED-NEXT:    [[TMP42:%.*]] = or i64 [[TMP41]], 8
; STRIDED-NEXT:    [[UGLYGEP19:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP42]]
; STRIDED-NEXT:    [[TMP43:%.*]] = shl nsw i64 [[TMP4]], 3
; STRIDED-NEXT:    [[UGLYGEP20:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP43]]
; STRIDED-NEXT:    [[TMP44:%.*]] = shl nsw i64 [[TMP4]], 3
; STRIDED-NEXT:    [[TMP45:%.*]] = add nsw i64 [[TMP44]], 8
; STRIDED-NEXT:    [[UGLYGEP21:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP45]]
; STRIDED-NEXT:    [[TMP46:%.*]] = shl nsw i64 [[TMP3]], 3
; STRIDED-NEXT:    [[UGLYGEP22:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP46]]
; STRIDED-NEXT:    [[TMP47:%.*]] = shl nsw i64 [[TMP3]], 3
; STRIDED-NEXT:    [[TMP48:%.*]] = or i64 [[TMP47]], 8
; STRIDED-NEXT:    [[UGLYGEP23:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP48]]
; STRIDED-NEXT:    [[TMP49:%.*]] = shl nsw i64 [[TMP2]], 3
; STRIDED-NEXT:    [[UGLYGEP24:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP49]]
; STRIDED-NEXT:    [[TMP50:%.*]] = shl nsw i64 [[TMP2]], 3
; STRIDED-NEXT:    [[TMP51:%.*]] = add nsw i64 [[TMP50]], 8
; STRIDED-NEXT:    [[UGLYGEP25:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP51]]
; STRIDED-NEXT:    [[TMP52:%.*]] = shl nsw i64 [[TMP1]], 3
; STRIDED-NEXT:    [[UGLYGEP26:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP52]]
; STRIDED-NEXT:    [[TMP53:%.*]] = shl nsw i64 [[TMP1]], 3
; STRIDED-NEXT:    [[TMP54:%.*]] = or i64 [[TMP53]], 8
; STRIDED-NEXT:    [[UGLYGEP27:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP54]]
; STRIDED-NEXT:    [[TMP55:%.*]] = shl nsw i64 [[TMP0]], 3
; STRIDED-NEXT:    [[UGLYGEP28:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP55]]
; STRIDED-NEXT:    [[TMP56:%.*]] = shl nsw i64 [[TMP0]], 3
; STRIDED-NEXT:    [[TMP57:%.*]] = add nsw i64 [[TMP56]], 8
; STRIDED-NEXT:    [[UGLYGEP29:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP57]]
; STRIDED-NEXT:    br label [[VECTOR_BODY:%.*]]
; STRIDED:       vector.body:
; STRIDED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[FOR_BODY_LR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; STRIDED-NEXT:    [[TMP58:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; STRIDED-NEXT:    [[TMP59:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP58]], i64 3, i64 0)
; STRIDED-NEXT:    [[TMP60:%.*]] = trunc i64 [[TMP59]] to i32
; STRIDED-NEXT:    [[TMP61:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP62:%.*]] = getelementptr i8, ptr [[VA]], i64 [[TMP61]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP62]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6:![0-9]+]], !llvm.access.group [[ACC_GRP10:![0-9]+]]
; STRIDED-NEXT:    [[TMP63:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP64:%.*]] = getelementptr i8, ptr [[UGLYGEP]], i64 [[TMP63]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD35:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP64]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP65:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP66:%.*]] = getelementptr i8, ptr [[UGLYGEP1]], i64 [[TMP65]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD39:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP66]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP67:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP68:%.*]] = getelementptr i8, ptr [[UGLYGEP2]], i64 [[TMP67]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD41:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP68]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP69:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP70:%.*]] = getelementptr i8, ptr [[UGLYGEP3]], i64 [[TMP69]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD45:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP70]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP71:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP72:%.*]] = getelementptr i8, ptr [[UGLYGEP4]], i64 [[TMP71]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD47:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP72]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP73:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP74:%.*]] = getelementptr i8, ptr [[UGLYGEP5]], i64 [[TMP73]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD51:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP74]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP75:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP76:%.*]] = getelementptr i8, ptr [[UGLYGEP6]], i64 [[TMP75]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD53:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP76]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP77:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP78:%.*]] = getelementptr i8, ptr [[UGLYGEP7]], i64 [[TMP77]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD57:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP78]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP79:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP80:%.*]] = getelementptr i8, ptr [[UGLYGEP8]], i64 [[TMP79]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD59:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP80]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP81:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP82:%.*]] = getelementptr i8, ptr [[UGLYGEP9]], i64 [[TMP81]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD63:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP82]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP83:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP84:%.*]] = getelementptr i8, ptr [[UGLYGEP10]], i64 [[TMP83]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD65:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP84]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP85:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP86:%.*]] = getelementptr i8, ptr [[UGLYGEP11]], i64 [[TMP85]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD69:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP86]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP87:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP88:%.*]] = getelementptr i8, ptr [[UGLYGEP12]], i64 [[TMP87]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD71:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP88]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP89:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP90:%.*]] = getelementptr i8, ptr [[UGLYGEP13]], i64 [[TMP89]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD75:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP90]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP91:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP92:%.*]] = getelementptr i8, ptr [[UGLYGEP14]], i64 [[TMP91]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD77:%.*]] = tail call <vscale x 1 x double> @llvm.experimental.vp.strided.load.nxv1f64.p0.i64(ptr [[TMP92]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[VP_OP78:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_STRIDED_LOAD]], <vscale x 1 x double> [[VP_STRIDED_LOAD39]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP79:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP78]], <vscale x 1 x double> [[VP_STRIDED_LOAD45]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP80:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP79]], <vscale x 1 x double> [[VP_STRIDED_LOAD51]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP81:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP80]], <vscale x 1 x double> [[VP_STRIDED_LOAD57]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP82:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP81]], <vscale x 1 x double> [[VP_STRIDED_LOAD63]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP83:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP82]], <vscale x 1 x double> [[VP_STRIDED_LOAD69]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP84:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP83]], <vscale x 1 x double> [[VP_STRIDED_LOAD75]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP85:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_STRIDED_LOAD35]], <vscale x 1 x double> [[VP_STRIDED_LOAD41]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP86:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP85]], <vscale x 1 x double> [[VP_STRIDED_LOAD47]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP87:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP86]], <vscale x 1 x double> [[VP_STRIDED_LOAD53]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP88:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP87]], <vscale x 1 x double> [[VP_STRIDED_LOAD59]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP89:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP88]], <vscale x 1 x double> [[VP_STRIDED_LOAD65]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP90:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP89]], <vscale x 1 x double> [[VP_STRIDED_LOAD71]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP91:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP90]], <vscale x 1 x double> [[VP_STRIDED_LOAD77]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP92:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> [[VP_OP84]], <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 2.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[VP_OP93:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> [[VP_OP91]], <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 2.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]])
; STRIDED-NEXT:    [[TMP93:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP94:%.*]] = getelementptr i8, ptr [[VB]], i64 [[TMP93]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP84]], ptr [[TMP94]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP95:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP96:%.*]] = getelementptr i8, ptr [[UGLYGEP15]], i64 [[TMP95]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP91]], ptr [[TMP96]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP97:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP98:%.*]] = getelementptr i8, ptr [[UGLYGEP16]], i64 [[TMP97]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP92]], ptr [[TMP98]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP99:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP100:%.*]] = getelementptr i8, ptr [[UGLYGEP17]], i64 [[TMP99]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP93]], ptr [[TMP100]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP101:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP102:%.*]] = getelementptr i8, ptr [[UGLYGEP18]], i64 [[TMP101]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP92]], ptr [[TMP102]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP103:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP104:%.*]] = getelementptr i8, ptr [[UGLYGEP19]], i64 [[TMP103]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP93]], ptr [[TMP104]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP105:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP106:%.*]] = getelementptr i8, ptr [[UGLYGEP20]], i64 [[TMP105]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP92]], ptr [[TMP106]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP107:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP108:%.*]] = getelementptr i8, ptr [[UGLYGEP21]], i64 [[TMP107]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP93]], ptr [[TMP108]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP109:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP110:%.*]] = getelementptr i8, ptr [[UGLYGEP22]], i64 [[TMP109]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP92]], ptr [[TMP110]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP111:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP112:%.*]] = getelementptr i8, ptr [[UGLYGEP23]], i64 [[TMP111]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP93]], ptr [[TMP112]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP113:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP114:%.*]] = getelementptr i8, ptr [[UGLYGEP24]], i64 [[TMP113]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP92]], ptr [[TMP114]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP115:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP116:%.*]] = getelementptr i8, ptr [[UGLYGEP25]], i64 [[TMP115]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP93]], ptr [[TMP116]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP117:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP118:%.*]] = getelementptr i8, ptr [[UGLYGEP26]], i64 [[TMP117]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP92]], ptr [[TMP118]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP119:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP120:%.*]] = getelementptr i8, ptr [[UGLYGEP27]], i64 [[TMP119]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP93]], ptr [[TMP120]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP121:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP122:%.*]] = getelementptr i8, ptr [[UGLYGEP28]], i64 [[TMP121]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP92]], ptr [[TMP122]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP123:%.*]] = mul i64 [[INDEX]], [[TMP15]]
; STRIDED-NEXT:    [[TMP124:%.*]] = getelementptr i8, ptr [[UGLYGEP29]], i64 [[TMP123]]
; STRIDED-NEXT:    tail call void @llvm.experimental.vp.strided.store.nxv1f64.p0.i64(<vscale x 1 x double> [[VP_OP93]], ptr [[TMP124]], i64 [[TMP15]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP60]]), !tbaa [[TBAA6]], !llvm.access.group [[ACC_GRP10]]
; STRIDED-NEXT:    [[TMP125:%.*]] = and i64 [[TMP59]], 4294967295
; STRIDED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP125]]
; STRIDED-NEXT:    [[TMP126:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; STRIDED-NEXT:    br i1 [[TMP126]], label [[FOR_COND_CLEANUP]], label [[VECTOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]
; STRIDED:       for.cond.cleanup:
; STRIDED-NEXT:    [[TMP127:%.*]] = load double, ptr [[VB]], align 8, !tbaa [[TBAA6]]
; STRIDED-NEXT:    ret double [[TMP127]]
;
entry:
  %cmp367 = icmp sgt i32 %batches, 0
  br i1 %cmp367, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %shl = shl i32 %groups, 1
  %mul19 = shl i32 %groups, 2
  %mul33 = mul i32 %groups, 6
  %mul47 = shl i32 %groups, 3
  %mul61 = mul i32 %groups, 10
  %mul75 = mul i32 %groups, 12
  %mul89 = mul i32 %groups, 14
  %shr = ashr i32 %N, 2
  %mul150 = shl nsw i32 %shr, 1
  %mul164 = mul nsw i32 %shr, 3
  %mul178 = and i32 %N, -4
  %mul192 = mul nsw i32 %shr, 5
  %mul206 = mul nsw i32 %shr, 6
  %mul220 = mul nsw i32 %shr, 7
  %0 = sext i32 %bstride to i64
  %1 = sext i32 %shl to i64
  %2 = sext i32 %mul19 to i64
  %3 = sext i32 %mul33 to i64
  %4 = sext i32 %mul47 to i64
  %5 = sext i32 %mul61 to i64
  %6 = sext i32 %mul75 to i64
  %7 = sext i32 %mul89 to i64
  %8 = sext i32 %shr to i64
  %9 = sext i32 %mul150 to i64
  %10 = sext i32 %mul164 to i64
  %11 = sext i32 %mul178 to i64
  %12 = sext i32 %mul192 to i64
  %13 = sext i32 %mul206 to i64
  %14 = sext i32 %mul220 to i64
  %wide.trip.count = zext i32 %batches to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %15 = load double, ptr %vb, align 8, !tbaa !6
  ret double %15

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %16 = mul nsw i64 %indvars.iv, %0
  %arrayidx = getelementptr inbounds double, ptr %va, i64 %16
  %17 = load double, ptr %arrayidx, align 8, !tbaa !6, !llvm.access.group !10
  %18 = add nsw i64 %16, 1
  %arrayidx4 = getelementptr inbounds double, ptr %va, i64 %18
  %19 = load double, ptr %arrayidx4, align 8, !tbaa !6, !llvm.access.group !10
  %20 = add nsw i64 %16, %1
  %arrayidx9 = getelementptr inbounds double, ptr %va, i64 %20
  %21 = load double, ptr %arrayidx9, align 8, !tbaa !6, !llvm.access.group !10
  %22 = add nsw i64 %18, %1
  %arrayidx15 = getelementptr inbounds double, ptr %va, i64 %22
  %23 = load double, ptr %arrayidx15, align 8, !tbaa !6, !llvm.access.group !10
  %24 = add nsw i64 %16, %2
  %arrayidx22 = getelementptr inbounds double, ptr %va, i64 %24
  %25 = load double, ptr %arrayidx22, align 8, !tbaa !6, !llvm.access.group !10
  %26 = add nsw i64 %18, %2
  %arrayidx29 = getelementptr inbounds double, ptr %va, i64 %26
  %27 = load double, ptr %arrayidx29, align 8, !tbaa !6, !llvm.access.group !10
  %28 = add nsw i64 %16, %3
  %arrayidx36 = getelementptr inbounds double, ptr %va, i64 %28
  %29 = load double, ptr %arrayidx36, align 8, !tbaa !6, !llvm.access.group !10
  %30 = add nsw i64 %18, %3
  %arrayidx43 = getelementptr inbounds double, ptr %va, i64 %30
  %31 = load double, ptr %arrayidx43, align 8, !tbaa !6, !llvm.access.group !10
  %32 = add nsw i64 %16, %4
  %arrayidx50 = getelementptr inbounds double, ptr %va, i64 %32
  %33 = load double, ptr %arrayidx50, align 8, !tbaa !6, !llvm.access.group !10
  %34 = add nsw i64 %18, %4
  %arrayidx57 = getelementptr inbounds double, ptr %va, i64 %34
  %35 = load double, ptr %arrayidx57, align 8, !tbaa !6, !llvm.access.group !10
  %36 = add nsw i64 %16, %5
  %arrayidx64 = getelementptr inbounds double, ptr %va, i64 %36
  %37 = load double, ptr %arrayidx64, align 8, !tbaa !6, !llvm.access.group !10
  %38 = add nsw i64 %18, %5
  %arrayidx71 = getelementptr inbounds double, ptr %va, i64 %38
  %39 = load double, ptr %arrayidx71, align 8, !tbaa !6, !llvm.access.group !10
  %40 = add nsw i64 %16, %6
  %arrayidx78 = getelementptr inbounds double, ptr %va, i64 %40
  %41 = load double, ptr %arrayidx78, align 8, !tbaa !6, !llvm.access.group !10
  %42 = add nsw i64 %18, %6
  %arrayidx85 = getelementptr inbounds double, ptr %va, i64 %42
  %43 = load double, ptr %arrayidx85, align 8, !tbaa !6, !llvm.access.group !10
  %44 = add nsw i64 %16, %7
  %arrayidx92 = getelementptr inbounds double, ptr %va, i64 %44
  %45 = load double, ptr %arrayidx92, align 8, !tbaa !6, !llvm.access.group !10
  %46 = add nsw i64 %18, %7
  %arrayidx99 = getelementptr inbounds double, ptr %va, i64 %46
  %47 = load double, ptr %arrayidx99, align 8, !tbaa !6, !llvm.access.group !10
  %add100 = fadd double %17, %21
  %add101 = fadd double %add100, %25
  %add102 = fadd double %add101, %29
  %add103 = fadd double %add102, %33
  %add104 = fadd double %add103, %37
  %add105 = fadd double %add104, %41
  %add106 = fadd double %add105, %45
  %add107 = fadd double %19, %23
  %add108 = fadd double %add107, %27
  %add109 = fadd double %add108, %31
  %add110 = fadd double %add109, %35
  %add111 = fadd double %add110, %39
  %add112 = fadd double %add111, %43
  %add113 = fadd double %add112, %47
  %mul114 = fmul double %add106, 2.000000e+00
  %mul115 = fmul double %add113, 2.000000e+00
  %arrayidx131 = getelementptr inbounds double, ptr %vb, i64 %16
  store double %add106, ptr %arrayidx131, align 8, !tbaa !6, !llvm.access.group !10
  %arrayidx135 = getelementptr inbounds double, ptr %vb, i64 %18
  store double %add113, ptr %arrayidx135, align 8, !tbaa !6, !llvm.access.group !10
  %48 = add nsw i64 %16, %8
  %arrayidx140 = getelementptr inbounds double, ptr %vb, i64 %48
  store double %mul114, ptr %arrayidx140, align 8, !tbaa !6, !llvm.access.group !10
  %49 = add nsw i64 %18, %8
  %arrayidx146 = getelementptr inbounds double, ptr %vb, i64 %49
  store double %mul115, ptr %arrayidx146, align 8, !tbaa !6, !llvm.access.group !10
  %50 = add nsw i64 %16, %9
  %arrayidx153 = getelementptr inbounds double, ptr %vb, i64 %50
  store double %mul114, ptr %arrayidx153, align 8, !tbaa !6, !llvm.access.group !10
  %51 = add nsw i64 %18, %9
  %arrayidx160 = getelementptr inbounds double, ptr %vb, i64 %51
  store double %mul115, ptr %arrayidx160, align 8, !tbaa !6, !llvm.access.group !10
  %52 = add nsw i64 %16, %10
  %arrayidx167 = getelementptr inbounds double, ptr %vb, i64 %52
  store double %mul114, ptr %arrayidx167, align 8, !tbaa !6, !llvm.access.group !10
  %53 = add nsw i64 %18, %10
  %arrayidx174 = getelementptr inbounds double, ptr %vb, i64 %53
  store double %mul115, ptr %arrayidx174, align 8, !tbaa !6, !llvm.access.group !10
  %54 = add nsw i64 %16, %11
  %arrayidx181 = getelementptr inbounds double, ptr %vb, i64 %54
  store double %mul114, ptr %arrayidx181, align 8, !tbaa !6, !llvm.access.group !10
  %55 = add nsw i64 %18, %11
  %arrayidx188 = getelementptr inbounds double, ptr %vb, i64 %55
  store double %mul115, ptr %arrayidx188, align 8, !tbaa !6, !llvm.access.group !10
  %56 = add nsw i64 %16, %12
  %arrayidx195 = getelementptr inbounds double, ptr %vb, i64 %56
  store double %mul114, ptr %arrayidx195, align 8, !tbaa !6, !llvm.access.group !10
  %57 = add nsw i64 %18, %12
  %arrayidx202 = getelementptr inbounds double, ptr %vb, i64 %57
  store double %mul115, ptr %arrayidx202, align 8, !tbaa !6, !llvm.access.group !10
  %58 = add nsw i64 %16, %13
  %arrayidx209 = getelementptr inbounds double, ptr %vb, i64 %58
  store double %mul114, ptr %arrayidx209, align 8, !tbaa !6, !llvm.access.group !10
  %59 = add nsw i64 %18, %13
  %arrayidx216 = getelementptr inbounds double, ptr %vb, i64 %59
  store double %mul115, ptr %arrayidx216, align 8, !tbaa !6, !llvm.access.group !10
  %60 = add nsw i64 %16, %14
  %arrayidx223 = getelementptr inbounds double, ptr %vb, i64 %60
  store double %mul114, ptr %arrayidx223, align 8, !tbaa !6, !llvm.access.group !10
  %61 = add nsw i64 %18, %14
  %arrayidx230 = getelementptr inbounds double, ptr %vb, i64 %61
  store double %mul115, ptr %arrayidx230, align 8, !tbaa !6, !llvm.access.group !10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body, !llvm.loop !11
}

attributes #0 = { nofree norecurse nosync nounwind memory(argmem: readwrite) vscale_range(1,1024) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+c,+d,+f,+m,+zepi,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl32b,+zvl64b,-e,-experimental-zca,-experimental-zcb,-experimental-zcd,-experimental-zcf,-experimental-zfa,-experimental-zihintntl,-experimental-ztso,-experimental-zvfh,-h,-relax,-save-restore,-svinval,-svnapot,-svpbmt,-v,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadmac,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zdinx,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zicbom,-zicbop,-zicboz,-zicsr,-zifencei,-zihintpause,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"lp64d"}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 8, !"SmallDataLimit", i32 8}
!5 = !{!"clang version 17.0.0"}
!6 = !{!7, !7, i64 0}
!7 = !{!"double", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = distinct !{}
!11 = distinct !{!11, !12, !13, !14}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.parallel_accesses", !10}
!14 = !{!"llvm.loop.vectorize.enable", i1 true}
