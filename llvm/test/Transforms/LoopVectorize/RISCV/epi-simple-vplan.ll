; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 \
; RUN: -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -passes=loop-vectorize -vector-register-width-factor=8 \
; RUN: -debug-only=loop-vectorize 2>&1 | FileCheck %s
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 \
; RUN: -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -passes=loop-vectorize \
; RUN: -debug-only=loop-vectorize 2>&1 | FileCheck %s --check-prefix=CHECK1
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 -interleave-no-scalar-epilogue=true \
; RUN: -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -passes=loop-vectorize \
; RUN: -debug-only=loop-vectorize 2>&1 | FileCheck %s --check-prefix=INTERLEAVE
; ModuleID = './simple-add.c'
source_filename = "./simple-add.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128-v128:128:128-v256:128:128-v512:128:128-v1024:128:128"
target triple = "riscv64-unknown-linux-gnu"

; CHECK-LABEL: simple_add
; CHECK: VPlan 'Initial VPlan for VF={vscale x 1,vscale x 2,vscale x 4,vscale x 8,vscale x 16},UF>=1' {
; CHECK-NEXT: Live-in vp<%1> = vector-trip-count
; CHECK-NEXT: Live-in vp<%3> = original trip-count
; CHECK-NEXT: Live-in vp<%2> = backedge-taken count
; CHECK-EMPTY:
; CHECK-NEXT: vector.ph:
; CHECK-NEXT: Successor(s): vector loop
; CHECK-EMPTY:
; CHECK-NEXT: <x1> vector loop: {
; CHECK-NEXT:   vector.body:
; CHECK-NEXT:     EMIT vp<%4> = CANONICAL-INDUCTION
; CHECK-NEXT:     EMIT vp<%5> = GENERATE-EXPLICIT-VECTOR-LENGTH vp<%3>
; CHECK-NEXT:     vp<%6>    = SCALAR-STEPS vp<%4>, ir<1>
; CHECK-NEXT:     EMIT vp<%7> = WIDEN-CANONICAL-INDUCTION vp<%4>, vp<%5>
; CHECK-NEXT:     EMIT vp<%8> = vp icmp ule vp<%7> vp<%2> vp<%5>
; CHECK-NEXT:     CLONE ir<%arrayidx> = getelementptr ir<%a>, vp<%6>
; CHECK-NEXT:     PREDICATED-WIDEN ir<%0> = load ir<%arrayidx>, vp<%8>, vp<%5> (ALL-ONES-MASK)
; CHECK-NEXT:     CLONE ir<%arrayidx2> = getelementptr ir<%b>, vp<%6>
; CHECK-NEXT:     PREDICATED-WIDEN ir<%1> = load ir<%arrayidx2>, vp<%8>, vp<%5> (ALL-ONES-MASK)
; CHECK-NEXT:     PREDICATED-WIDEN ir<%add> = add ir<%1>, ir<%0>, vp<%8>, vp<%5>
; CHECK-NEXT:     CLONE ir<%arrayidx4> = getelementptr ir<%c>, vp<%6>
; CHECK-NEXT:     PREDICATED-WIDEN store ir<%arrayidx4>, ir<%add>, vp<%8>, vp<%5> (ALL-ONES-MASK)
; CHECK-NEXT:     EMIT vp<%15> = VF * UF +  vp<%4> vp<%5>
; CHECK-NEXT:     EMIT branch-on-count  vp<%15> vp<%1>
; CHECK-NEXT:   No successors
; CHECK-NEXT: }
; CHECK-NEXT: Successor(s): middle.block
; CHECK-EMPTY:
; CHECK-NEXT: middle.block:
; CHECK-NEXT: No successors
; CHECK-NEXT: }

; Function Attrs: nofree norecurse nounwind
define dso_local void @simple_add(i32 signext %N, i32* noalias nocapture %c, i32* noalias nocapture readonly %a, i32* noalias nocapture readonly %b) local_unnamed_addr {
; CHECK-LABEL: @simple_add(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], 1
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 8 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 8 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP0]], i64 2, i64 2)
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i32
; CHECK-NEXT:    [[TMP3:%.*]] = add i64 [[INDEX]], 0
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <vscale x 8 x i64> poison, i64 [[INDEX]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <vscale x 8 x i64> [[BROADCAST_SPLATINSERT1]], <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer
; CHECK-NEXT:    [[VP_STEPVECTOR:%.*]] = call <vscale x 8 x i64> @llvm.experimental.vp.stepvector.nxv8i64(<vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK-NEXT:    [[VP_ICMP_ULE:%.*]] = call <vscale x 8 x i1> @llvm.vp.icmp.nxv8i64(<vscale x 8 x i64> [[VP_STEPVECTOR]], <vscale x 8 x i64> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds i32, ptr [[A:%.*]], i64 [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i32, ptr [[TMP4]], i32 0
; CHECK-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 8 x i32> @llvm.vp.load.nxv8i32.p0(ptr [[TMP5]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds i32, ptr [[B:%.*]], i64 [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i32, ptr [[TMP6]], i32 0
; CHECK-NEXT:    [[VP_OP_LOAD3:%.*]] = call <vscale x 8 x i32> @llvm.vp.load.nxv8i32.p0(ptr [[TMP7]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK-NEXT:    [[VP_OP:%.*]] = call <vscale x 8 x i32> @llvm.vp.add.nxv8i32(<vscale x 8 x i32> [[VP_OP_LOAD3]], <vscale x 8 x i32> [[VP_OP_LOAD]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i32, ptr [[C:%.*]], i64 [[TMP3]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i32, ptr [[TMP8]], i32 0
; CHECK-NEXT:    call void @llvm.vp.store.nxv8i32.p0(<vscale x 8 x i32> [[VP_OP]], ptr [[TMP9]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK-NEXT:    [[TMP10:%.*]] = zext i32 [[TMP2]] to i64
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP10]]
; CHECK-NEXT:    [[TMP11:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[TMP11]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    br i1 true, label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP13]], [[TMP12]]
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX4]], align 4
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
; CHECK:       for.end.loopexit:
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
; CHECK1-LABEL: @simple_add(
; CHECK1-NEXT:  entry:
; CHECK1-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK1-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK1:       for.body.preheader:
; CHECK1-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK1-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK1:       vector.ph:
; CHECK1-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], 1
; CHECK1-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; CHECK1-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 2 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; CHECK1-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK1:       vector.body:
; CHECK1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK1-NEXT:    [[TMP0:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; CHECK1-NEXT:    [[TMP1:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP0]], i64 2, i64 0)
; CHECK1-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i32
; CHECK1-NEXT:    [[TMP3:%.*]] = add i64 [[INDEX]], 0
; CHECK1-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[INDEX]], i64 0
; CHECK1-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <vscale x 2 x i64> [[BROADCAST_SPLATINSERT1]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; CHECK1-NEXT:    [[VP_STEPVECTOR:%.*]] = call <vscale x 2 x i64> @llvm.experimental.vp.stepvector.nxv2i64(<vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK1-NEXT:    [[VP_ICMP_ULE:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i64(<vscale x 2 x i64> [[VP_STEPVECTOR]], <vscale x 2 x i64> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK1-NEXT:    [[TMP4:%.*]] = getelementptr inbounds i32, ptr [[A:%.*]], i64 [[TMP3]]
; CHECK1-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i32, ptr [[TMP4]], i32 0
; CHECK1-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP5]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK1-NEXT:    [[TMP6:%.*]] = getelementptr inbounds i32, ptr [[B:%.*]], i64 [[TMP3]]
; CHECK1-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i32, ptr [[TMP6]], i32 0
; CHECK1-NEXT:    [[VP_OP_LOAD3:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP7]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK1-NEXT:    [[VP_OP:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD3]], <vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK1-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i32, ptr [[C:%.*]], i64 [[TMP3]]
; CHECK1-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i32, ptr [[TMP8]], i32 0
; CHECK1-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP]], ptr [[TMP9]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK1-NEXT:    [[TMP10:%.*]] = zext i32 [[TMP2]] to i64
; CHECK1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP10]]
; CHECK1-NEXT:    [[TMP11:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[TMP11]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK1:       middle.block:
; CHECK1-NEXT:    br i1 true, label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK1:       scalar.ph:
; CHECK1-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK1:       for.body:
; CHECK1-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP12:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; CHECK1-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP13:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; CHECK1-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP13]], [[TMP12]]
; CHECK1-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX4]], align 4
; CHECK1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK1-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
; CHECK1:       for.end.loopexit:
; CHECK1-NEXT:    br label [[FOR_END]]
; CHECK1:       for.end:
; CHECK1-NEXT:    ret void
;
; INTERLEAVE-LABEL: @simple_add(
; INTERLEAVE-NEXT:  entry:
; INTERLEAVE-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[N:%.*]], 0
; INTERLEAVE-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; INTERLEAVE:       for.body.preheader:
; INTERLEAVE-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; INTERLEAVE-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; INTERLEAVE:       vector.ph:
; INTERLEAVE-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], 1
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 2 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    br label [[VECTOR_BODY:%.*]]
; INTERLEAVE:       vector.body:
; INTERLEAVE-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; INTERLEAVE-NEXT:    [[TMP0:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; INTERLEAVE-NEXT:    [[TMP1:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP0]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i32
; INTERLEAVE-NEXT:    [[TMP3:%.*]] = sub i64 [[TMP0]], [[TMP1]]
; INTERLEAVE-NEXT:    [[TMP4:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP3]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP4]] to i32
; INTERLEAVE-NEXT:    [[TMP6:%.*]] = sub i64 [[TMP3]], [[TMP4]]
; INTERLEAVE-NEXT:    [[TMP7:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP6]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP8:%.*]] = trunc i64 [[TMP7]] to i32
; INTERLEAVE-NEXT:    [[TMP9:%.*]] = sub i64 [[TMP6]], [[TMP7]]
; INTERLEAVE-NEXT:    [[TMP10:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP9]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP11:%.*]] = trunc i64 [[TMP10]] to i32
; INTERLEAVE-NEXT:    [[TMP12:%.*]] = sub i64 [[TMP9]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP13:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP12]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP14:%.*]] = trunc i64 [[TMP13]] to i32
; INTERLEAVE-NEXT:    [[TMP15:%.*]] = sub i64 [[TMP12]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP16:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP15]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP17:%.*]] = trunc i64 [[TMP16]] to i32
; INTERLEAVE-NEXT:    [[TMP18:%.*]] = sub i64 [[TMP15]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP19:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP18]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP20:%.*]] = trunc i64 [[TMP19]] to i32
; INTERLEAVE-NEXT:    [[TMP21:%.*]] = sub i64 [[TMP18]], [[TMP19]]
; INTERLEAVE-NEXT:    [[TMP22:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP21]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP23:%.*]] = trunc i64 [[TMP22]] to i32
; INTERLEAVE-NEXT:    [[TMP24:%.*]] = add i64 [[INDEX]], 0
; INTERLEAVE-NEXT:    [[TMP25:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP26:%.*]] = mul i64 [[TMP25]], 2
; INTERLEAVE-NEXT:    [[TMP27:%.*]] = add i64 [[TMP26]], 0
; INTERLEAVE-NEXT:    [[TMP28:%.*]] = mul i64 [[TMP27]], 1
; INTERLEAVE-NEXT:    [[TMP29:%.*]] = add i64 [[INDEX]], [[TMP28]]
; INTERLEAVE-NEXT:    [[TMP30:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP31:%.*]] = mul i64 [[TMP30]], 4
; INTERLEAVE-NEXT:    [[TMP32:%.*]] = add i64 [[TMP31]], 0
; INTERLEAVE-NEXT:    [[TMP33:%.*]] = mul i64 [[TMP32]], 1
; INTERLEAVE-NEXT:    [[TMP34:%.*]] = add i64 [[INDEX]], [[TMP33]]
; INTERLEAVE-NEXT:    [[TMP35:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP36:%.*]] = mul i64 [[TMP35]], 6
; INTERLEAVE-NEXT:    [[TMP37:%.*]] = add i64 [[TMP36]], 0
; INTERLEAVE-NEXT:    [[TMP38:%.*]] = mul i64 [[TMP37]], 1
; INTERLEAVE-NEXT:    [[TMP39:%.*]] = add i64 [[INDEX]], [[TMP38]]
; INTERLEAVE-NEXT:    [[TMP40:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP41:%.*]] = mul i64 [[TMP40]], 8
; INTERLEAVE-NEXT:    [[TMP42:%.*]] = add i64 [[TMP41]], 0
; INTERLEAVE-NEXT:    [[TMP43:%.*]] = mul i64 [[TMP42]], 1
; INTERLEAVE-NEXT:    [[TMP44:%.*]] = add i64 [[INDEX]], [[TMP43]]
; INTERLEAVE-NEXT:    [[TMP45:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP46:%.*]] = mul i64 [[TMP45]], 10
; INTERLEAVE-NEXT:    [[TMP47:%.*]] = add i64 [[TMP46]], 0
; INTERLEAVE-NEXT:    [[TMP48:%.*]] = mul i64 [[TMP47]], 1
; INTERLEAVE-NEXT:    [[TMP49:%.*]] = add i64 [[INDEX]], [[TMP48]]
; INTERLEAVE-NEXT:    [[TMP50:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP51:%.*]] = mul i64 [[TMP50]], 12
; INTERLEAVE-NEXT:    [[TMP52:%.*]] = add i64 [[TMP51]], 0
; INTERLEAVE-NEXT:    [[TMP53:%.*]] = mul i64 [[TMP52]], 1
; INTERLEAVE-NEXT:    [[TMP54:%.*]] = add i64 [[INDEX]], [[TMP53]]
; INTERLEAVE-NEXT:    [[TMP55:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP56:%.*]] = mul i64 [[TMP55]], 14
; INTERLEAVE-NEXT:    [[TMP57:%.*]] = add i64 [[TMP56]], 0
; INTERLEAVE-NEXT:    [[TMP58:%.*]] = mul i64 [[TMP57]], 1
; INTERLEAVE-NEXT:    [[TMP59:%.*]] = add i64 [[INDEX]], [[TMP58]]
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[INDEX]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <vscale x 2 x i64> [[BROADCAST_SPLATINSERT1]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[VP_STEPVECTOR:%.*]] = call <vscale x 2 x i64> @llvm.experimental.vp.stepvector.nxv2i64(<vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; INTERLEAVE-NEXT:    [[TMP60:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP61:%.*]] = mul i64 [[TMP60]], 2
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP61]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[VP_STEPVECTOR3:%.*]] = call <vscale x 2 x i64> @llvm.experimental.vp.stepvector.nxv2i64(<vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP5]])
; INTERLEAVE-NEXT:    [[TMP62:%.*]] = call <vscale x 2 x i64> @llvm.vp.add.nxv2i64(<vscale x 2 x i64> [[DOTSPLAT]], <vscale x 2 x i64> [[VP_STEPVECTOR3]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP5]])
; INTERLEAVE-NEXT:    [[TMP63:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP64:%.*]] = mul i64 [[TMP63]], 4
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT4:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP64]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT5:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT4]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[VP_STEPVECTOR6:%.*]] = call <vscale x 2 x i64> @llvm.experimental.vp.stepvector.nxv2i64(<vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; INTERLEAVE-NEXT:    [[TMP65:%.*]] = call <vscale x 2 x i64> @llvm.vp.add.nxv2i64(<vscale x 2 x i64> [[DOTSPLAT5]], <vscale x 2 x i64> [[VP_STEPVECTOR6]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; INTERLEAVE-NEXT:    [[TMP66:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP67:%.*]] = mul i64 [[TMP66]], 6
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT7:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP67]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT8:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT7]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[VP_STEPVECTOR9:%.*]] = call <vscale x 2 x i64> @llvm.experimental.vp.stepvector.nxv2i64(<vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[TMP68:%.*]] = call <vscale x 2 x i64> @llvm.vp.add.nxv2i64(<vscale x 2 x i64> [[DOTSPLAT8]], <vscale x 2 x i64> [[VP_STEPVECTOR9]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[TMP69:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP70:%.*]] = mul i64 [[TMP69]], 8
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT10:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP70]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT11:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT10]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[VP_STEPVECTOR12:%.*]] = call <vscale x 2 x i64> @llvm.experimental.vp.stepvector.nxv2i64(<vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[TMP71:%.*]] = call <vscale x 2 x i64> @llvm.vp.add.nxv2i64(<vscale x 2 x i64> [[DOTSPLAT11]], <vscale x 2 x i64> [[VP_STEPVECTOR12]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[TMP72:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP73:%.*]] = mul i64 [[TMP72]], 10
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT13:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP73]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT14:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT13]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[VP_STEPVECTOR15:%.*]] = call <vscale x 2 x i64> @llvm.experimental.vp.stepvector.nxv2i64(<vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[TMP74:%.*]] = call <vscale x 2 x i64> @llvm.vp.add.nxv2i64(<vscale x 2 x i64> [[DOTSPLAT14]], <vscale x 2 x i64> [[VP_STEPVECTOR15]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[TMP75:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP76:%.*]] = mul i64 [[TMP75]], 12
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT16:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP76]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT17:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT16]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[VP_STEPVECTOR18:%.*]] = call <vscale x 2 x i64> @llvm.experimental.vp.stepvector.nxv2i64(<vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP77:%.*]] = call <vscale x 2 x i64> @llvm.vp.add.nxv2i64(<vscale x 2 x i64> [[DOTSPLAT17]], <vscale x 2 x i64> [[VP_STEPVECTOR18]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP78:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP79:%.*]] = mul i64 [[TMP78]], 14
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT19:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP79]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT20:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT19]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[VP_STEPVECTOR21:%.*]] = call <vscale x 2 x i64> @llvm.experimental.vp.stepvector.nxv2i64(<vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[TMP80:%.*]] = call <vscale x 2 x i64> @llvm.vp.add.nxv2i64(<vscale x 2 x i64> [[DOTSPLAT20]], <vscale x 2 x i64> [[VP_STEPVECTOR21]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[VP_ICMP_ULE:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i64(<vscale x 2 x i64> [[VP_STEPVECTOR]], <vscale x 2 x i64> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; INTERLEAVE-NEXT:    [[VP_ICMP_ULE22:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i64(<vscale x 2 x i64> [[TMP62]], <vscale x 2 x i64> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP5]])
; INTERLEAVE-NEXT:    [[VP_ICMP_ULE23:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i64(<vscale x 2 x i64> [[TMP65]], <vscale x 2 x i64> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; INTERLEAVE-NEXT:    [[VP_ICMP_ULE24:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i64(<vscale x 2 x i64> [[TMP68]], <vscale x 2 x i64> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[VP_ICMP_ULE25:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i64(<vscale x 2 x i64> [[TMP71]], <vscale x 2 x i64> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[VP_ICMP_ULE26:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i64(<vscale x 2 x i64> [[TMP74]], <vscale x 2 x i64> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[VP_ICMP_ULE27:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i64(<vscale x 2 x i64> [[TMP77]], <vscale x 2 x i64> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[VP_ICMP_ULE28:%.*]] = call <vscale x 2 x i1> @llvm.vp.icmp.nxv2i64(<vscale x 2 x i64> [[TMP80]], <vscale x 2 x i64> [[BROADCAST_SPLAT]], metadata !"ule", <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[TMP81:%.*]] = getelementptr inbounds i32, ptr [[A:%.*]], i64 [[TMP24]]
; INTERLEAVE-NEXT:    [[TMP82:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP29]]
; INTERLEAVE-NEXT:    [[TMP83:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP34]]
; INTERLEAVE-NEXT:    [[TMP84:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP39]]
; INTERLEAVE-NEXT:    [[TMP85:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP44]]
; INTERLEAVE-NEXT:    [[TMP86:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP49]]
; INTERLEAVE-NEXT:    [[TMP87:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP54]]
; INTERLEAVE-NEXT:    [[TMP88:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP59]]
; INTERLEAVE-NEXT:    [[TMP89:%.*]] = getelementptr inbounds i32, ptr [[TMP81]], i32 0
; INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP89]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; INTERLEAVE-NEXT:    [[TMP90:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP91:%.*]] = getelementptr inbounds i32, ptr [[TMP81]], i32 [[TMP90]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD29:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP91]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP5]])
; INTERLEAVE-NEXT:    [[TMP92:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP93:%.*]] = add i32 [[TMP92]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP94:%.*]] = getelementptr inbounds i32, ptr [[TMP81]], i32 [[TMP93]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD30:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP94]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; INTERLEAVE-NEXT:    [[TMP95:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP96:%.*]] = add i32 [[TMP95]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP97:%.*]] = add i32 [[TMP96]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP98:%.*]] = getelementptr inbounds i32, ptr [[TMP81]], i32 [[TMP97]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD31:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP98]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[TMP99:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP100:%.*]] = add i32 [[TMP99]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP101:%.*]] = add i32 [[TMP100]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP102:%.*]] = add i32 [[TMP101]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP103:%.*]] = getelementptr inbounds i32, ptr [[TMP81]], i32 [[TMP102]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD32:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP103]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[TMP104:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP105:%.*]] = add i32 [[TMP104]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP106:%.*]] = add i32 [[TMP105]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP107:%.*]] = add i32 [[TMP106]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP108:%.*]] = add i32 [[TMP107]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP109:%.*]] = getelementptr inbounds i32, ptr [[TMP81]], i32 [[TMP108]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD33:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP109]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[TMP110:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP111:%.*]] = add i32 [[TMP110]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP112:%.*]] = add i32 [[TMP111]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP113:%.*]] = add i32 [[TMP112]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP114:%.*]] = add i32 [[TMP113]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP115:%.*]] = add i32 [[TMP114]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP116:%.*]] = getelementptr inbounds i32, ptr [[TMP81]], i32 [[TMP115]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD34:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP116]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP117:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP118:%.*]] = add i32 [[TMP117]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP119:%.*]] = add i32 [[TMP118]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP120:%.*]] = add i32 [[TMP119]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP121:%.*]] = add i32 [[TMP120]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP122:%.*]] = add i32 [[TMP121]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP123:%.*]] = add i32 [[TMP122]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP124:%.*]] = getelementptr inbounds i32, ptr [[TMP81]], i32 [[TMP123]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD35:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP124]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[TMP125:%.*]] = getelementptr inbounds i32, ptr [[B:%.*]], i64 [[TMP24]]
; INTERLEAVE-NEXT:    [[TMP126:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP29]]
; INTERLEAVE-NEXT:    [[TMP127:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP34]]
; INTERLEAVE-NEXT:    [[TMP128:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP39]]
; INTERLEAVE-NEXT:    [[TMP129:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP44]]
; INTERLEAVE-NEXT:    [[TMP130:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP49]]
; INTERLEAVE-NEXT:    [[TMP131:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP54]]
; INTERLEAVE-NEXT:    [[TMP132:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP59]]
; INTERLEAVE-NEXT:    [[TMP133:%.*]] = getelementptr inbounds i32, ptr [[TMP125]], i32 0
; INTERLEAVE-NEXT:    [[VP_OP_LOAD36:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP133]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; INTERLEAVE-NEXT:    [[TMP134:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP135:%.*]] = getelementptr inbounds i32, ptr [[TMP125]], i32 [[TMP134]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD37:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP135]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP5]])
; INTERLEAVE-NEXT:    [[TMP136:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP137:%.*]] = add i32 [[TMP136]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP138:%.*]] = getelementptr inbounds i32, ptr [[TMP125]], i32 [[TMP137]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD38:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP138]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; INTERLEAVE-NEXT:    [[TMP139:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP140:%.*]] = add i32 [[TMP139]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP141:%.*]] = add i32 [[TMP140]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP142:%.*]] = getelementptr inbounds i32, ptr [[TMP125]], i32 [[TMP141]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD39:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP142]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[TMP143:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP144:%.*]] = add i32 [[TMP143]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP145:%.*]] = add i32 [[TMP144]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP146:%.*]] = add i32 [[TMP145]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP147:%.*]] = getelementptr inbounds i32, ptr [[TMP125]], i32 [[TMP146]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD40:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP147]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[TMP148:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP149:%.*]] = add i32 [[TMP148]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP150:%.*]] = add i32 [[TMP149]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP151:%.*]] = add i32 [[TMP150]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP152:%.*]] = add i32 [[TMP151]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP153:%.*]] = getelementptr inbounds i32, ptr [[TMP125]], i32 [[TMP152]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD41:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP153]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[TMP154:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP155:%.*]] = add i32 [[TMP154]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP156:%.*]] = add i32 [[TMP155]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP157:%.*]] = add i32 [[TMP156]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP158:%.*]] = add i32 [[TMP157]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP159:%.*]] = add i32 [[TMP158]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP160:%.*]] = getelementptr inbounds i32, ptr [[TMP125]], i32 [[TMP159]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD42:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP160]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP161:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP162:%.*]] = add i32 [[TMP161]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP163:%.*]] = add i32 [[TMP162]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP164:%.*]] = add i32 [[TMP163]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP165:%.*]] = add i32 [[TMP164]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP166:%.*]] = add i32 [[TMP165]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP167:%.*]] = add i32 [[TMP166]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP168:%.*]] = getelementptr inbounds i32, ptr [[TMP125]], i32 [[TMP167]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD43:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP168]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[VP_OP:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD36]], <vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; INTERLEAVE-NEXT:    [[VP_OP44:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD37]], <vscale x 2 x i32> [[VP_OP_LOAD29]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP5]])
; INTERLEAVE-NEXT:    [[VP_OP45:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD38]], <vscale x 2 x i32> [[VP_OP_LOAD30]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; INTERLEAVE-NEXT:    [[VP_OP46:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD39]], <vscale x 2 x i32> [[VP_OP_LOAD31]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[VP_OP47:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD40]], <vscale x 2 x i32> [[VP_OP_LOAD32]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[VP_OP48:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD41]], <vscale x 2 x i32> [[VP_OP_LOAD33]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[VP_OP49:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD42]], <vscale x 2 x i32> [[VP_OP_LOAD34]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[VP_OP50:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD43]], <vscale x 2 x i32> [[VP_OP_LOAD35]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[TMP169:%.*]] = getelementptr inbounds i32, ptr [[C:%.*]], i64 [[TMP24]]
; INTERLEAVE-NEXT:    [[TMP170:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP29]]
; INTERLEAVE-NEXT:    [[TMP171:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP34]]
; INTERLEAVE-NEXT:    [[TMP172:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP39]]
; INTERLEAVE-NEXT:    [[TMP173:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP44]]
; INTERLEAVE-NEXT:    [[TMP174:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP49]]
; INTERLEAVE-NEXT:    [[TMP175:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP54]]
; INTERLEAVE-NEXT:    [[TMP176:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP59]]
; INTERLEAVE-NEXT:    [[TMP177:%.*]] = getelementptr inbounds i32, ptr [[TMP169]], i32 0
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP]], ptr [[TMP177]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; INTERLEAVE-NEXT:    [[TMP178:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP179:%.*]] = getelementptr inbounds i32, ptr [[TMP169]], i32 [[TMP178]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP44]], ptr [[TMP179]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP5]])
; INTERLEAVE-NEXT:    [[TMP180:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP181:%.*]] = add i32 [[TMP180]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP182:%.*]] = getelementptr inbounds i32, ptr [[TMP169]], i32 [[TMP181]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP45]], ptr [[TMP182]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; INTERLEAVE-NEXT:    [[TMP183:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP184:%.*]] = add i32 [[TMP183]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP185:%.*]] = add i32 [[TMP184]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP186:%.*]] = getelementptr inbounds i32, ptr [[TMP169]], i32 [[TMP185]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP46]], ptr [[TMP186]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[TMP187:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP188:%.*]] = add i32 [[TMP187]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP189:%.*]] = add i32 [[TMP188]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP190:%.*]] = add i32 [[TMP189]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP191:%.*]] = getelementptr inbounds i32, ptr [[TMP169]], i32 [[TMP190]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP47]], ptr [[TMP191]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[TMP192:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP193:%.*]] = add i32 [[TMP192]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP194:%.*]] = add i32 [[TMP193]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP195:%.*]] = add i32 [[TMP194]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP196:%.*]] = add i32 [[TMP195]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP197:%.*]] = getelementptr inbounds i32, ptr [[TMP169]], i32 [[TMP196]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP48]], ptr [[TMP197]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[TMP198:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP199:%.*]] = add i32 [[TMP198]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP200:%.*]] = add i32 [[TMP199]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP201:%.*]] = add i32 [[TMP200]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP202:%.*]] = add i32 [[TMP201]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP203:%.*]] = add i32 [[TMP202]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP204:%.*]] = getelementptr inbounds i32, ptr [[TMP169]], i32 [[TMP203]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP49]], ptr [[TMP204]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP205:%.*]] = add i32 0, [[TMP2]]
; INTERLEAVE-NEXT:    [[TMP206:%.*]] = add i32 [[TMP205]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP207:%.*]] = add i32 [[TMP206]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP208:%.*]] = add i32 [[TMP207]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP209:%.*]] = add i32 [[TMP208]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP210:%.*]] = add i32 [[TMP209]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP211:%.*]] = add i32 [[TMP210]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP212:%.*]] = getelementptr inbounds i32, ptr [[TMP169]], i32 [[TMP211]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP50]], ptr [[TMP212]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[TMP213:%.*]] = add i32 [[TMP2]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP214:%.*]] = add i32 [[TMP213]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP215:%.*]] = add i32 [[TMP214]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP216:%.*]] = add i32 [[TMP215]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP217:%.*]] = add i32 [[TMP216]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP218:%.*]] = add i32 [[TMP217]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP219:%.*]] = add i32 [[TMP218]], [[TMP23]]
; INTERLEAVE-NEXT:    [[TMP220:%.*]] = zext i32 [[TMP219]] to i64
; INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP220]]
; INTERLEAVE-NEXT:    [[TMP221:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[TMP221]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; INTERLEAVE:       middle.block:
; INTERLEAVE-NEXT:    br i1 true, label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; INTERLEAVE:       scalar.ph:
; INTERLEAVE-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; INTERLEAVE-NEXT:    br label [[FOR_BODY:%.*]]
; INTERLEAVE:       for.body:
; INTERLEAVE-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; INTERLEAVE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP222:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; INTERLEAVE-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP223:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; INTERLEAVE-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP223]], [[TMP222]]
; INTERLEAVE-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX4]], align 4
; INTERLEAVE-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; INTERLEAVE-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
; INTERLEAVE:       for.end.loopexit:
; INTERLEAVE-NEXT:    br label [[FOR_END]]
; INTERLEAVE:       for.end:
; INTERLEAVE-NEXT:    ret void
;
entry:
  %cmp10 = icmp sgt i32 %N, 0
  br i1 %cmp10, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %b, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx2, align 4
  %add = add nsw i32 %1, %0
  %arrayidx4 = getelementptr inbounds i32, i32* %c, i64 %indvars.iv
  store i32 %add, i32* %arrayidx4, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
