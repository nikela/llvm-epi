; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 \
; RUN: -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -passes=loop-vectorize -vector-register-width-factor=8 \
; RUN: -debug-only=loop-vectorize 2>&1 | FileCheck %s
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 \
; RUN: -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -passes=loop-vectorize \
; RUN: -debug-only=loop-vectorize 2>&1 | FileCheck %s --check-prefix=CHECK1
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 -interleave-no-scalar-epilogue=true \
; RUN: -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -passes=loop-vectorize \
; RUN: -debug-only=loop-vectorize 2>&1 | FileCheck %s --check-prefix=INTERLEAVE
; ModuleID = './simple-add.c'
source_filename = "./simple-add.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128-v128:128:128-v256:128:128-v512:128:128-v1024:128:128"
target triple = "riscv64-unknown-linux-gnu"

; CHECK-LABEL: simple_add
; CHECK: VPlan 'Initial VPlan for VF={vscale x 1,vscale x 2,vscale x 4,vscale x 8,vscale x 16},UF>=1' {
; CHECK-NEXT: Live-in vp<%1> = vector-trip-count
; CHECK-EMPTY:
; CHECK-NEXT: Live-in vp<%2> = backedge-taken count
; CHECK-EMPTY:
; CHECK-NEXT: vector.ph:
; CHECK-NEXT: Successor(s): vector loop
; CHECK-EMPTY:
; CHECK-NEXT: <x1> vector loop: {
; CHECK-NEXT:   vector.body:
; CHECK-NEXT:     EMIT vp<%4> = CANONICAL-INDUCTION
; CHECK-NEXT:     EMIT vp<%5> = GENERATE-EXPLICIT-VECTOR-LENGTH vp<%3>
; CHECK-NEXT:     vp<%6>    = SCALAR-STEPS vp<%4>, ir<1>
; CHECK-NEXT:     EMIT vp<%7> = WIDEN-CANONICAL-INDUCTION vp<%4>
; CHECK-NEXT:     EMIT vp<%8> = icmp ule vp<%7> vp<%2>
; CHECK-NEXT:     CLONE ir<%arrayidx> = getelementptr ir<%a>, vp<%6>
; CHECK-NEXT:     PREDICATED-WIDEN ir<%0> = load ir<%arrayidx>, vp<%8>, vp<%5> (ALL-ONES-MASK)
; CHECK-NEXT:     CLONE ir<%arrayidx2> = getelementptr ir<%b>, vp<%6>
; CHECK-NEXT:     PREDICATED-WIDEN ir<%1> = load ir<%arrayidx2>, vp<%8>, vp<%5> (ALL-ONES-MASK)
; CHECK-NEXT:     PREDICATED-WIDEN ir<%add> = add ir<%1>, ir<%0>, vp<%8>, vp<%5>
; CHECK-NEXT:     CLONE ir<%arrayidx4> = getelementptr ir<%c>, vp<%6>
; CHECK-NEXT:     PREDICATED-WIDEN store ir<%arrayidx4>, ir<%add>, vp<%8>, vp<%5> (ALL-ONES-MASK)
; CHECK-NEXT:     EMIT vp<%15> = VF * UF +  vp<%4> vp<%5>
; CHECK-NEXT:     EMIT branch-on-count  vp<%15> vp<%1>
; CHECK-NEXT:   No successors
; CHECK-NEXT: }
; CHECK-NEXT: Successor(s): middle.block
; CHECK-EMPTY:
; CHECK-NEXT: middle.block:
; CHECK-NEXT: No successors
; CHECK-NEXT: }

; Function Attrs: nofree norecurse nounwind
define dso_local void @simple_add(i32 signext %N, i32* noalias nocapture %c, i32* noalias nocapture readonly %a, i32* noalias nocapture readonly %b) local_unnamed_addr {
; CHECK-LABEL: @simple_add(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-NEXT:    [[TMP0:%.*]] = sub i64 -1, [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 8
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ult i64 [[TMP0]], [[TMP2]]
; CHECK-NEXT:    br i1 [[TMP3]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], 1
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 8 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 8 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP4:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 2, i64 2)
; CHECK-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; CHECK-NEXT:    [[TMP7:%.*]] = add i64 [[INDEX]], 0
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <vscale x 8 x i64> poison, i64 [[INDEX]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <vscale x 8 x i64> [[BROADCAST_SPLATINSERT1]], <vscale x 8 x i64> poison, <vscale x 8 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP8:%.*]] = call <vscale x 8 x i64> @llvm.experimental.stepvector.nxv8i64()
; CHECK-NEXT:    [[TMP9:%.*]] = add <vscale x 8 x i64> zeroinitializer, [[TMP8]]
; CHECK-NEXT:    [[VEC_IV:%.*]] = add <vscale x 8 x i64> [[BROADCAST_SPLAT2]], [[TMP9]]
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ule <vscale x 8 x i64> [[VEC_IV]], [[BROADCAST_SPLAT]]
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i32, ptr [[A:%.*]], i64 [[TMP7]]
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i32, ptr [[TMP11]], i32 0
; CHECK-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 8 x i32> @llvm.vp.load.nxv8i32.p0(ptr [[TMP12]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds i32, ptr [[B:%.*]], i64 [[TMP7]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i32, ptr [[TMP13]], i32 0
; CHECK-NEXT:    [[VP_OP_LOAD3:%.*]] = call <vscale x 8 x i32> @llvm.vp.load.nxv8i32.p0(ptr [[TMP14]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[VP_OP:%.*]] = call <vscale x 8 x i32> @llvm.vp.add.nxv8i32(<vscale x 8 x i32> [[VP_OP_LOAD3]], <vscale x 8 x i32> [[VP_OP_LOAD]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i32, ptr [[C:%.*]], i64 [[TMP7]]
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32, ptr [[TMP15]], i32 0
; CHECK-NEXT:    call void @llvm.vp.store.nxv8i32.p0(<vscale x 8 x i32> [[VP_OP]], ptr [[TMP16]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i64 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK-NEXT:    [[TMP17:%.*]] = zext i32 [[TMP6]] to i64
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP17]]
; CHECK-NEXT:    [[TMP18:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[TMP18]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    br i1 true, label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP19:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP20:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP20]], [[TMP19]]
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX4]], align 4
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
; CHECK:       for.end.loopexit:
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
; CHECK1-LABEL: @simple_add(
; CHECK1-NEXT:  entry:
; CHECK1-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK1-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK1:       for.body.preheader:
; CHECK1-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK1-NEXT:    [[TMP0:%.*]] = sub i64 -1, [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 2
; CHECK1-NEXT:    [[TMP3:%.*]] = icmp ult i64 [[TMP0]], [[TMP2]]
; CHECK1-NEXT:    br i1 [[TMP3]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK1:       vector.ph:
; CHECK1-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], 1
; CHECK1-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; CHECK1-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 2 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; CHECK1-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK1:       vector.body:
; CHECK1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK1-NEXT:    [[TMP4:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; CHECK1-NEXT:    [[TMP5:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 2, i64 0)
; CHECK1-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; CHECK1-NEXT:    [[TMP7:%.*]] = add i64 [[INDEX]], 0
; CHECK1-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[INDEX]], i64 0
; CHECK1-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <vscale x 2 x i64> [[BROADCAST_SPLATINSERT1]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; CHECK1-NEXT:    [[TMP8:%.*]] = call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64()
; CHECK1-NEXT:    [[TMP9:%.*]] = add <vscale x 2 x i64> zeroinitializer, [[TMP8]]
; CHECK1-NEXT:    [[VEC_IV:%.*]] = add <vscale x 2 x i64> [[BROADCAST_SPLAT2]], [[TMP9]]
; CHECK1-NEXT:    [[TMP10:%.*]] = icmp ule <vscale x 2 x i64> [[VEC_IV]], [[BROADCAST_SPLAT]]
; CHECK1-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i32, ptr [[A:%.*]], i64 [[TMP7]]
; CHECK1-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i32, ptr [[TMP11]], i32 0
; CHECK1-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP12]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[TMP13:%.*]] = getelementptr inbounds i32, ptr [[B:%.*]], i64 [[TMP7]]
; CHECK1-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i32, ptr [[TMP13]], i32 0
; CHECK1-NEXT:    [[VP_OP_LOAD3:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP14]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[VP_OP:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD3]], <vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i32, ptr [[C:%.*]], i64 [[TMP7]]
; CHECK1-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32, ptr [[TMP15]], i32 0
; CHECK1-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP]], ptr [[TMP16]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[TMP17:%.*]] = zext i32 [[TMP6]] to i64
; CHECK1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP17]]
; CHECK1-NEXT:    [[TMP18:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[TMP18]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK1:       middle.block:
; CHECK1-NEXT:    br i1 true, label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK1:       scalar.ph:
; CHECK1-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK1:       for.body:
; CHECK1-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP19:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; CHECK1-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP20:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; CHECK1-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP20]], [[TMP19]]
; CHECK1-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX4]], align 4
; CHECK1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK1-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
; CHECK1:       for.end.loopexit:
; CHECK1-NEXT:    br label [[FOR_END]]
; CHECK1:       for.end:
; CHECK1-NEXT:    ret void
;
; INTERLEAVE-LABEL: @simple_add(
; INTERLEAVE-NEXT:  entry:
; INTERLEAVE-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[N:%.*]], 0
; INTERLEAVE-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; INTERLEAVE:       for.body.preheader:
; INTERLEAVE-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; INTERLEAVE-NEXT:    [[TMP0:%.*]] = sub i64 -1, [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 16
; INTERLEAVE-NEXT:    [[TMP3:%.*]] = icmp ult i64 [[TMP0]], [[TMP2]]
; INTERLEAVE-NEXT:    br i1 [[TMP3]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; INTERLEAVE:       vector.ph:
; INTERLEAVE-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], 1
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 2 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    br label [[VECTOR_BODY:%.*]]
; INTERLEAVE:       vector.body:
; INTERLEAVE-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; INTERLEAVE-NEXT:    [[TMP4:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; INTERLEAVE-NEXT:    [[TMP5:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; INTERLEAVE-NEXT:    [[TMP7:%.*]] = sub i64 [[TMP4]], [[TMP5]]
; INTERLEAVE-NEXT:    [[TMP8:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP7]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP9:%.*]] = trunc i64 [[TMP8]] to i32
; INTERLEAVE-NEXT:    [[TMP10:%.*]] = sub i64 [[TMP7]], [[TMP8]]
; INTERLEAVE-NEXT:    [[TMP11:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP10]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP12:%.*]] = trunc i64 [[TMP11]] to i32
; INTERLEAVE-NEXT:    [[TMP13:%.*]] = sub i64 [[TMP10]], [[TMP11]]
; INTERLEAVE-NEXT:    [[TMP14:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP13]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP15:%.*]] = trunc i64 [[TMP14]] to i32
; INTERLEAVE-NEXT:    [[TMP16:%.*]] = sub i64 [[TMP13]], [[TMP14]]
; INTERLEAVE-NEXT:    [[TMP17:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP16]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP18:%.*]] = trunc i64 [[TMP17]] to i32
; INTERLEAVE-NEXT:    [[TMP19:%.*]] = sub i64 [[TMP16]], [[TMP17]]
; INTERLEAVE-NEXT:    [[TMP20:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP19]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP21:%.*]] = trunc i64 [[TMP20]] to i32
; INTERLEAVE-NEXT:    [[TMP22:%.*]] = sub i64 [[TMP19]], [[TMP20]]
; INTERLEAVE-NEXT:    [[TMP23:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP22]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP24:%.*]] = trunc i64 [[TMP23]] to i32
; INTERLEAVE-NEXT:    [[TMP25:%.*]] = sub i64 [[TMP22]], [[TMP23]]
; INTERLEAVE-NEXT:    [[TMP26:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP25]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP27:%.*]] = trunc i64 [[TMP26]] to i32
; INTERLEAVE-NEXT:    [[TMP28:%.*]] = add i64 [[INDEX]], 0
; INTERLEAVE-NEXT:    [[TMP29:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP30:%.*]] = mul i64 [[TMP29]], 2
; INTERLEAVE-NEXT:    [[TMP31:%.*]] = add i64 [[TMP30]], 0
; INTERLEAVE-NEXT:    [[TMP32:%.*]] = mul i64 [[TMP31]], 1
; INTERLEAVE-NEXT:    [[TMP33:%.*]] = add i64 [[INDEX]], [[TMP32]]
; INTERLEAVE-NEXT:    [[TMP34:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP35:%.*]] = mul i64 [[TMP34]], 4
; INTERLEAVE-NEXT:    [[TMP36:%.*]] = add i64 [[TMP35]], 0
; INTERLEAVE-NEXT:    [[TMP37:%.*]] = mul i64 [[TMP36]], 1
; INTERLEAVE-NEXT:    [[TMP38:%.*]] = add i64 [[INDEX]], [[TMP37]]
; INTERLEAVE-NEXT:    [[TMP39:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP40:%.*]] = mul i64 [[TMP39]], 6
; INTERLEAVE-NEXT:    [[TMP41:%.*]] = add i64 [[TMP40]], 0
; INTERLEAVE-NEXT:    [[TMP42:%.*]] = mul i64 [[TMP41]], 1
; INTERLEAVE-NEXT:    [[TMP43:%.*]] = add i64 [[INDEX]], [[TMP42]]
; INTERLEAVE-NEXT:    [[TMP44:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP45:%.*]] = mul i64 [[TMP44]], 8
; INTERLEAVE-NEXT:    [[TMP46:%.*]] = add i64 [[TMP45]], 0
; INTERLEAVE-NEXT:    [[TMP47:%.*]] = mul i64 [[TMP46]], 1
; INTERLEAVE-NEXT:    [[TMP48:%.*]] = add i64 [[INDEX]], [[TMP47]]
; INTERLEAVE-NEXT:    [[TMP49:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP50:%.*]] = mul i64 [[TMP49]], 10
; INTERLEAVE-NEXT:    [[TMP51:%.*]] = add i64 [[TMP50]], 0
; INTERLEAVE-NEXT:    [[TMP52:%.*]] = mul i64 [[TMP51]], 1
; INTERLEAVE-NEXT:    [[TMP53:%.*]] = add i64 [[INDEX]], [[TMP52]]
; INTERLEAVE-NEXT:    [[TMP54:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP55:%.*]] = mul i64 [[TMP54]], 12
; INTERLEAVE-NEXT:    [[TMP56:%.*]] = add i64 [[TMP55]], 0
; INTERLEAVE-NEXT:    [[TMP57:%.*]] = mul i64 [[TMP56]], 1
; INTERLEAVE-NEXT:    [[TMP58:%.*]] = add i64 [[INDEX]], [[TMP57]]
; INTERLEAVE-NEXT:    [[TMP59:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP60:%.*]] = mul i64 [[TMP59]], 14
; INTERLEAVE-NEXT:    [[TMP61:%.*]] = add i64 [[TMP60]], 0
; INTERLEAVE-NEXT:    [[TMP62:%.*]] = mul i64 [[TMP61]], 1
; INTERLEAVE-NEXT:    [[TMP63:%.*]] = add i64 [[INDEX]], [[TMP62]]
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[INDEX]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <vscale x 2 x i64> [[BROADCAST_SPLATINSERT1]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP64:%.*]] = call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64()
; INTERLEAVE-NEXT:    [[TMP65:%.*]] = add <vscale x 2 x i64> zeroinitializer, [[TMP64]]
; INTERLEAVE-NEXT:    [[VEC_IV:%.*]] = add <vscale x 2 x i64> [[BROADCAST_SPLAT2]], [[TMP65]]
; INTERLEAVE-NEXT:    [[TMP66:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP67:%.*]] = mul i64 [[TMP66]], 2
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP67]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP68:%.*]] = call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64()
; INTERLEAVE-NEXT:    [[TMP69:%.*]] = add <vscale x 2 x i64> [[DOTSPLAT]], [[TMP68]]
; INTERLEAVE-NEXT:    [[VEC_IV3:%.*]] = add <vscale x 2 x i64> [[BROADCAST_SPLAT2]], [[TMP69]]
; INTERLEAVE-NEXT:    [[TMP70:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP71:%.*]] = mul i64 [[TMP70]], 4
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT4:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP71]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT5:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT4]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP72:%.*]] = call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64()
; INTERLEAVE-NEXT:    [[TMP73:%.*]] = add <vscale x 2 x i64> [[DOTSPLAT5]], [[TMP72]]
; INTERLEAVE-NEXT:    [[VEC_IV6:%.*]] = add <vscale x 2 x i64> [[BROADCAST_SPLAT2]], [[TMP73]]
; INTERLEAVE-NEXT:    [[TMP74:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP75:%.*]] = mul i64 [[TMP74]], 6
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT7:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP75]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT8:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT7]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP76:%.*]] = call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64()
; INTERLEAVE-NEXT:    [[TMP77:%.*]] = add <vscale x 2 x i64> [[DOTSPLAT8]], [[TMP76]]
; INTERLEAVE-NEXT:    [[VEC_IV9:%.*]] = add <vscale x 2 x i64> [[BROADCAST_SPLAT2]], [[TMP77]]
; INTERLEAVE-NEXT:    [[TMP78:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP79:%.*]] = mul i64 [[TMP78]], 8
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT10:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP79]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT11:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT10]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP80:%.*]] = call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64()
; INTERLEAVE-NEXT:    [[TMP81:%.*]] = add <vscale x 2 x i64> [[DOTSPLAT11]], [[TMP80]]
; INTERLEAVE-NEXT:    [[VEC_IV12:%.*]] = add <vscale x 2 x i64> [[BROADCAST_SPLAT2]], [[TMP81]]
; INTERLEAVE-NEXT:    [[TMP82:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP83:%.*]] = mul i64 [[TMP82]], 10
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT13:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP83]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT14:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT13]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP84:%.*]] = call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64()
; INTERLEAVE-NEXT:    [[TMP85:%.*]] = add <vscale x 2 x i64> [[DOTSPLAT14]], [[TMP84]]
; INTERLEAVE-NEXT:    [[VEC_IV15:%.*]] = add <vscale x 2 x i64> [[BROADCAST_SPLAT2]], [[TMP85]]
; INTERLEAVE-NEXT:    [[TMP86:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP87:%.*]] = mul i64 [[TMP86]], 12
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT16:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP87]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT17:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT16]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP88:%.*]] = call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64()
; INTERLEAVE-NEXT:    [[TMP89:%.*]] = add <vscale x 2 x i64> [[DOTSPLAT17]], [[TMP88]]
; INTERLEAVE-NEXT:    [[VEC_IV18:%.*]] = add <vscale x 2 x i64> [[BROADCAST_SPLAT2]], [[TMP89]]
; INTERLEAVE-NEXT:    [[TMP90:%.*]] = call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP91:%.*]] = mul i64 [[TMP90]], 14
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT19:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP91]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT20:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT19]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP92:%.*]] = call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64()
; INTERLEAVE-NEXT:    [[TMP93:%.*]] = add <vscale x 2 x i64> [[DOTSPLAT20]], [[TMP92]]
; INTERLEAVE-NEXT:    [[VEC_IV21:%.*]] = add <vscale x 2 x i64> [[BROADCAST_SPLAT2]], [[TMP93]]
; INTERLEAVE-NEXT:    [[TMP94:%.*]] = icmp ule <vscale x 2 x i64> [[VEC_IV]], [[BROADCAST_SPLAT]]
; INTERLEAVE-NEXT:    [[TMP95:%.*]] = icmp ule <vscale x 2 x i64> [[VEC_IV3]], [[BROADCAST_SPLAT]]
; INTERLEAVE-NEXT:    [[TMP96:%.*]] = icmp ule <vscale x 2 x i64> [[VEC_IV6]], [[BROADCAST_SPLAT]]
; INTERLEAVE-NEXT:    [[TMP97:%.*]] = icmp ule <vscale x 2 x i64> [[VEC_IV9]], [[BROADCAST_SPLAT]]
; INTERLEAVE-NEXT:    [[TMP98:%.*]] = icmp ule <vscale x 2 x i64> [[VEC_IV12]], [[BROADCAST_SPLAT]]
; INTERLEAVE-NEXT:    [[TMP99:%.*]] = icmp ule <vscale x 2 x i64> [[VEC_IV15]], [[BROADCAST_SPLAT]]
; INTERLEAVE-NEXT:    [[TMP100:%.*]] = icmp ule <vscale x 2 x i64> [[VEC_IV18]], [[BROADCAST_SPLAT]]
; INTERLEAVE-NEXT:    [[TMP101:%.*]] = icmp ule <vscale x 2 x i64> [[VEC_IV21]], [[BROADCAST_SPLAT]]
; INTERLEAVE-NEXT:    [[TMP102:%.*]] = getelementptr inbounds i32, ptr [[A:%.*]], i64 [[TMP28]]
; INTERLEAVE-NEXT:    [[TMP103:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP33]]
; INTERLEAVE-NEXT:    [[TMP104:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP38]]
; INTERLEAVE-NEXT:    [[TMP105:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP43]]
; INTERLEAVE-NEXT:    [[TMP106:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP48]]
; INTERLEAVE-NEXT:    [[TMP107:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP53]]
; INTERLEAVE-NEXT:    [[TMP108:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP58]]
; INTERLEAVE-NEXT:    [[TMP109:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[TMP63]]
; INTERLEAVE-NEXT:    [[TMP110:%.*]] = getelementptr inbounds i32, ptr [[TMP102]], i32 0
; INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP110]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[TMP111:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP112:%.*]] = getelementptr inbounds i32, ptr [[TMP102]], i32 [[TMP111]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD22:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP112]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP113:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP114:%.*]] = add i32 [[TMP113]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP115:%.*]] = getelementptr inbounds i32, ptr [[TMP102]], i32 [[TMP114]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD23:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP115]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP116:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP117:%.*]] = add i32 [[TMP116]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP118:%.*]] = add i32 [[TMP117]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP119:%.*]] = getelementptr inbounds i32, ptr [[TMP102]], i32 [[TMP118]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD24:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP119]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP120:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP121:%.*]] = add i32 [[TMP120]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP122:%.*]] = add i32 [[TMP121]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP123:%.*]] = add i32 [[TMP122]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP124:%.*]] = getelementptr inbounds i32, ptr [[TMP102]], i32 [[TMP123]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD25:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP124]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[TMP125:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP126:%.*]] = add i32 [[TMP125]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP127:%.*]] = add i32 [[TMP126]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP128:%.*]] = add i32 [[TMP127]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP129:%.*]] = add i32 [[TMP128]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP130:%.*]] = getelementptr inbounds i32, ptr [[TMP102]], i32 [[TMP129]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD26:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP130]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[TMP131:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP132:%.*]] = add i32 [[TMP131]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP133:%.*]] = add i32 [[TMP132]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP134:%.*]] = add i32 [[TMP133]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP135:%.*]] = add i32 [[TMP134]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP136:%.*]] = add i32 [[TMP135]], [[TMP21]]
; INTERLEAVE-NEXT:    [[TMP137:%.*]] = getelementptr inbounds i32, ptr [[TMP102]], i32 [[TMP136]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD27:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP137]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[TMP138:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP139:%.*]] = add i32 [[TMP138]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP140:%.*]] = add i32 [[TMP139]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP141:%.*]] = add i32 [[TMP140]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP142:%.*]] = add i32 [[TMP141]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP143:%.*]] = add i32 [[TMP142]], [[TMP21]]
; INTERLEAVE-NEXT:    [[TMP144:%.*]] = add i32 [[TMP143]], [[TMP24]]
; INTERLEAVE-NEXT:    [[TMP145:%.*]] = getelementptr inbounds i32, ptr [[TMP102]], i32 [[TMP144]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD28:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP145]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[TMP146:%.*]] = getelementptr inbounds i32, ptr [[B:%.*]], i64 [[TMP28]]
; INTERLEAVE-NEXT:    [[TMP147:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP33]]
; INTERLEAVE-NEXT:    [[TMP148:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP38]]
; INTERLEAVE-NEXT:    [[TMP149:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP43]]
; INTERLEAVE-NEXT:    [[TMP150:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP48]]
; INTERLEAVE-NEXT:    [[TMP151:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP53]]
; INTERLEAVE-NEXT:    [[TMP152:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP58]]
; INTERLEAVE-NEXT:    [[TMP153:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[TMP63]]
; INTERLEAVE-NEXT:    [[TMP154:%.*]] = getelementptr inbounds i32, ptr [[TMP146]], i32 0
; INTERLEAVE-NEXT:    [[VP_OP_LOAD29:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP154]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[TMP155:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP156:%.*]] = getelementptr inbounds i32, ptr [[TMP146]], i32 [[TMP155]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD30:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP156]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP157:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP158:%.*]] = add i32 [[TMP157]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP159:%.*]] = getelementptr inbounds i32, ptr [[TMP146]], i32 [[TMP158]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD31:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP159]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP160:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP161:%.*]] = add i32 [[TMP160]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP162:%.*]] = add i32 [[TMP161]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP163:%.*]] = getelementptr inbounds i32, ptr [[TMP146]], i32 [[TMP162]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD32:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP163]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP164:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP165:%.*]] = add i32 [[TMP164]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP166:%.*]] = add i32 [[TMP165]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP167:%.*]] = add i32 [[TMP166]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP168:%.*]] = getelementptr inbounds i32, ptr [[TMP146]], i32 [[TMP167]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD33:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP168]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[TMP169:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP170:%.*]] = add i32 [[TMP169]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP171:%.*]] = add i32 [[TMP170]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP172:%.*]] = add i32 [[TMP171]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP173:%.*]] = add i32 [[TMP172]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP174:%.*]] = getelementptr inbounds i32, ptr [[TMP146]], i32 [[TMP173]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD34:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP174]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[TMP175:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP176:%.*]] = add i32 [[TMP175]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP177:%.*]] = add i32 [[TMP176]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP178:%.*]] = add i32 [[TMP177]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP179:%.*]] = add i32 [[TMP178]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP180:%.*]] = add i32 [[TMP179]], [[TMP21]]
; INTERLEAVE-NEXT:    [[TMP181:%.*]] = getelementptr inbounds i32, ptr [[TMP146]], i32 [[TMP180]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD35:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP181]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[TMP182:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP183:%.*]] = add i32 [[TMP182]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP184:%.*]] = add i32 [[TMP183]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP185:%.*]] = add i32 [[TMP184]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP186:%.*]] = add i32 [[TMP185]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP187:%.*]] = add i32 [[TMP186]], [[TMP21]]
; INTERLEAVE-NEXT:    [[TMP188:%.*]] = add i32 [[TMP187]], [[TMP24]]
; INTERLEAVE-NEXT:    [[TMP189:%.*]] = getelementptr inbounds i32, ptr [[TMP146]], i32 [[TMP188]]
; INTERLEAVE-NEXT:    [[VP_OP_LOAD36:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0(ptr [[TMP189]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[VP_OP:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD29]], <vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[VP_OP37:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD30]], <vscale x 2 x i32> [[VP_OP_LOAD22]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[VP_OP38:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD31]], <vscale x 2 x i32> [[VP_OP_LOAD23]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[VP_OP39:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD32]], <vscale x 2 x i32> [[VP_OP_LOAD24]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[VP_OP40:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD33]], <vscale x 2 x i32> [[VP_OP_LOAD25]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[VP_OP41:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD34]], <vscale x 2 x i32> [[VP_OP_LOAD26]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[VP_OP42:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD35]], <vscale x 2 x i32> [[VP_OP_LOAD27]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[VP_OP43:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD36]], <vscale x 2 x i32> [[VP_OP_LOAD28]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[TMP190:%.*]] = getelementptr inbounds i32, ptr [[C:%.*]], i64 [[TMP28]]
; INTERLEAVE-NEXT:    [[TMP191:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP33]]
; INTERLEAVE-NEXT:    [[TMP192:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP38]]
; INTERLEAVE-NEXT:    [[TMP193:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP43]]
; INTERLEAVE-NEXT:    [[TMP194:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP48]]
; INTERLEAVE-NEXT:    [[TMP195:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP53]]
; INTERLEAVE-NEXT:    [[TMP196:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP58]]
; INTERLEAVE-NEXT:    [[TMP197:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[TMP63]]
; INTERLEAVE-NEXT:    [[TMP198:%.*]] = getelementptr inbounds i32, ptr [[TMP190]], i32 0
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP]], ptr [[TMP198]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP6]])
; INTERLEAVE-NEXT:    [[TMP199:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP200:%.*]] = getelementptr inbounds i32, ptr [[TMP190]], i32 [[TMP199]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP37]], ptr [[TMP200]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP9]])
; INTERLEAVE-NEXT:    [[TMP201:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP202:%.*]] = add i32 [[TMP201]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP203:%.*]] = getelementptr inbounds i32, ptr [[TMP190]], i32 [[TMP202]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP38]], ptr [[TMP203]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP12]])
; INTERLEAVE-NEXT:    [[TMP204:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP205:%.*]] = add i32 [[TMP204]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP206:%.*]] = add i32 [[TMP205]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP207:%.*]] = getelementptr inbounds i32, ptr [[TMP190]], i32 [[TMP206]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP39]], ptr [[TMP207]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP15]])
; INTERLEAVE-NEXT:    [[TMP208:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP209:%.*]] = add i32 [[TMP208]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP210:%.*]] = add i32 [[TMP209]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP211:%.*]] = add i32 [[TMP210]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP212:%.*]] = getelementptr inbounds i32, ptr [[TMP190]], i32 [[TMP211]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP40]], ptr [[TMP212]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP18]])
; INTERLEAVE-NEXT:    [[TMP213:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP214:%.*]] = add i32 [[TMP213]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP215:%.*]] = add i32 [[TMP214]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP216:%.*]] = add i32 [[TMP215]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP217:%.*]] = add i32 [[TMP216]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP218:%.*]] = getelementptr inbounds i32, ptr [[TMP190]], i32 [[TMP217]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP41]], ptr [[TMP218]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP21]])
; INTERLEAVE-NEXT:    [[TMP219:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP220:%.*]] = add i32 [[TMP219]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP221:%.*]] = add i32 [[TMP220]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP222:%.*]] = add i32 [[TMP221]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP223:%.*]] = add i32 [[TMP222]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP224:%.*]] = add i32 [[TMP223]], [[TMP21]]
; INTERLEAVE-NEXT:    [[TMP225:%.*]] = getelementptr inbounds i32, ptr [[TMP190]], i32 [[TMP224]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP42]], ptr [[TMP225]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP24]])
; INTERLEAVE-NEXT:    [[TMP226:%.*]] = add i32 0, [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP227:%.*]] = add i32 [[TMP226]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP228:%.*]] = add i32 [[TMP227]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP229:%.*]] = add i32 [[TMP228]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP230:%.*]] = add i32 [[TMP229]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP231:%.*]] = add i32 [[TMP230]], [[TMP21]]
; INTERLEAVE-NEXT:    [[TMP232:%.*]] = add i32 [[TMP231]], [[TMP24]]
; INTERLEAVE-NEXT:    [[TMP233:%.*]] = getelementptr inbounds i32, ptr [[TMP190]], i32 [[TMP232]]
; INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0(<vscale x 2 x i32> [[VP_OP43]], ptr [[TMP233]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i64 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP27]])
; INTERLEAVE-NEXT:    [[TMP234:%.*]] = add i32 [[TMP6]], [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP235:%.*]] = add i32 [[TMP234]], [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP236:%.*]] = add i32 [[TMP235]], [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP237:%.*]] = add i32 [[TMP236]], [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP238:%.*]] = add i32 [[TMP237]], [[TMP21]]
; INTERLEAVE-NEXT:    [[TMP239:%.*]] = add i32 [[TMP238]], [[TMP24]]
; INTERLEAVE-NEXT:    [[TMP240:%.*]] = add i32 [[TMP239]], [[TMP27]]
; INTERLEAVE-NEXT:    [[TMP241:%.*]] = zext i32 [[TMP240]] to i64
; INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP241]]
; INTERLEAVE-NEXT:    [[TMP242:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[TMP242]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; INTERLEAVE:       middle.block:
; INTERLEAVE-NEXT:    br i1 true, label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; INTERLEAVE:       scalar.ph:
; INTERLEAVE-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[WIDE_TRIP_COUNT]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; INTERLEAVE-NEXT:    br label [[FOR_BODY:%.*]]
; INTERLEAVE:       for.body:
; INTERLEAVE-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; INTERLEAVE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[A]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP243:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; INTERLEAVE-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[B]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP244:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; INTERLEAVE-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP244]], [[TMP243]]
; INTERLEAVE-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds i32, ptr [[C]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX4]], align 4
; INTERLEAVE-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; INTERLEAVE-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
; INTERLEAVE:       for.end.loopexit:
; INTERLEAVE-NEXT:    br label [[FOR_END]]
; INTERLEAVE:       for.end:
; INTERLEAVE-NEXT:    ret void
;
entry:
  %cmp10 = icmp sgt i32 %N, 0
  br i1 %cmp10, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %b, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx2, align 4
  %add = add nsw i32 %1, %0
  %arrayidx4 = getelementptr inbounds i32, i32* %c, i64 %indvars.iv
  store i32 %add, i32* %arrayidx4, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
