; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -passes=loop-vectorize -vector-register-width-factor=8 -riscv-v-vector-bits-min=64 < %s -o - \
; RUN:    | FileCheck %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -passes=loop-vectorize -riscv-v-vector-bits-min=64 < %s -o - \
; RUN:    | FileCheck %s --check-prefix=CHECK1
define dso_local void @add_ref(i64 %N, i128* noalias nocapture %c, i128* noalias nocapture readonly %a, i128* noalias nocapture readonly %b) {
; CHECK-LABEL: @add_ref(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP8:%.*]] = icmp sgt i64 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP8]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[I_09:%.*]] = phi i64 [ [[INC:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i128, ptr [[A:%.*]], i64 [[I_09]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i128, ptr [[ARRAYIDX]], align 16
; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i128, ptr [[B:%.*]], i64 [[I_09]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i128, ptr [[ARRAYIDX1]], align 16
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i128 [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i128, ptr [[C:%.*]], i64 [[I_09]]
; CHECK-NEXT:    store i128 [[ADD]], ptr [[ARRAYIDX2]], align 16
; CHECK-NEXT:    [[INC]] = add nuw nsw i64 [[I_09]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INC]], [[N]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END_LOOPEXIT:%.*]], label [[FOR_BODY]]
; CHECK:       for.end.loopexit:
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
; CHECK1-LABEL: @add_ref(
; CHECK1-NEXT:  entry:
; CHECK1-NEXT:    [[CMP8:%.*]] = icmp sgt i64 [[N:%.*]], 0
; CHECK1-NEXT:    br i1 [[CMP8]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK1:       for.body.preheader:
; CHECK1-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK1:       for.body:
; CHECK1-NEXT:    [[I_09:%.*]] = phi i64 [ [[INC:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i128, ptr [[A:%.*]], i64 [[I_09]]
; CHECK1-NEXT:    [[TMP0:%.*]] = load i128, ptr [[ARRAYIDX]], align 16
; CHECK1-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i128, ptr [[B:%.*]], i64 [[I_09]]
; CHECK1-NEXT:    [[TMP1:%.*]] = load i128, ptr [[ARRAYIDX1]], align 16
; CHECK1-NEXT:    [[ADD:%.*]] = add nsw i128 [[TMP1]], [[TMP0]]
; CHECK1-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i128, ptr [[C:%.*]], i64 [[I_09]]
; CHECK1-NEXT:    store i128 [[ADD]], ptr [[ARRAYIDX2]], align 16
; CHECK1-NEXT:    [[INC]] = add nuw nsw i64 [[I_09]], 1
; CHECK1-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INC]], [[N]]
; CHECK1-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END_LOOPEXIT:%.*]], label [[FOR_BODY]]
; CHECK1:       for.end.loopexit:
; CHECK1-NEXT:    br label [[FOR_END]]
; CHECK1:       for.end:
; CHECK1-NEXT:    ret void
;
entry:
  %cmp8 = icmp sgt i64 %N, 0
  br i1 %cmp8, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.09 = phi i64 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds i128, i128* %a, i64 %i.09
  %0 = load i128, i128* %arrayidx, align 16
  %arrayidx1 = getelementptr inbounds i128, i128* %b, i64 %i.09
  %1 = load i128, i128* %arrayidx1, align 16
  %add = add nsw i128 %1, %0
  %arrayidx2 = getelementptr inbounds i128, i128* %c, i64 %i.09
  store i128 %add, i128* %arrayidx2, align 16
  %inc = add nuw nsw i64 %i.09, 1
  %exitcond.not = icmp eq i64 %inc, %N
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
