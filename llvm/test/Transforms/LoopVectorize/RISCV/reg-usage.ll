; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; REQUIRES: asserts
; RUN: opt -loop-vectorize -mtriple riscv64-linux-gnu \
; RUN:   -mattr=+v,+d -debug-only=loop-vectorize \
; RUN:   -riscv-v-vector-bits-min=128 -force-vector-width=1 \
; RUN:   -S < %s 2>&1 | FileCheck %s --check-prefix=CHECK-SCALAR
; RUN: opt -loop-vectorize -mtriple riscv64-linux-gnu \
; RUN:   -mattr=+v,+d -debug-only=loop-vectorize \
; RUN:   -riscv-v-vector-bits-min=128 -riscv-v-register-bit-width-lmul=1 \
; RUN:   -S < %s 2>&1 | FileCheck %s --check-prefix=CHECK-LMUL1
; RUN: opt -loop-vectorize -mtriple riscv64-linux-gnu \
; RUN:   -mattr=+v,+d -debug-only=loop-vectorize \
; RUN:   -riscv-v-vector-bits-min=128 -riscv-v-register-bit-width-lmul=2 \
; RUN:   -S < %s 2>&1 | FileCheck %s --check-prefix=CHECK-LMUL2
; RUN: opt -loop-vectorize -mtriple riscv64-linux-gnu \
; RUN:   -mattr=+v,+d -debug-only=loop-vectorize \
; RUN:   -riscv-v-vector-bits-min=128 -riscv-v-register-bit-width-lmul=4 \
; RUN:   -S < %s 2>&1 | FileCheck %s --check-prefix=CHECK-LMUL4
; RUN: opt -loop-vectorize -mtriple riscv64-linux-gnu \
; RUN:   -mattr=+v,+d -debug-only=loop-vectorize \
; RUN:   -riscv-v-vector-bits-min=128 -riscv-v-register-bit-width-lmul=8 \
; RUN:   -S < %s 2>&1 | FileCheck %s --check-prefix=CHECK-LMUL8

; CHECK-LABEL: LV: Checking a loop in 'goo'
; CHECK-SCALAR:      LV(REG): Found max usage: 1 item
; CHECK-SCALAR-NEXT: LV(REG): RegisterClass: RISCV::GPRRC, 3 registers
; CHECK-LMUL1:       LV(REG): Found max usage: 2 item
; CHECK-LMUL1-NEXT:  LV(REG): RegisterClass: RISCV::GPRRC, 2 registers
; CHECK-LMUL1-NEXT:  LV(REG): RegisterClass: RISCV::VRRC, 2 registers
; CHECK-LMUL2:       LV(REG): Found max usage: 2 item
; CHECK-LMUL2-NEXT:  LV(REG): RegisterClass: RISCV::GPRRC, 2 registers
; CHECK-LMUL2-NEXT:  LV(REG): RegisterClass: RISCV::VRRC, 4 registers
; CHECK-LMUL4:       LV(REG): Found max usage: 2 item
; CHECK-LMUL4-NEXT:  LV(REG): RegisterClass: RISCV::GPRRC, 2 registers
; CHECK-LMUL4-NEXT:  LV(REG): RegisterClass: RISCV::VRRC, 8 registers
; CHECK-LMUL8:       LV(REG): Found max usage: 2 item
; CHECK-LMUL8-NEXT:  LV(REG): RegisterClass: RISCV::GPRRC, 2 registers
; CHECK-LMUL8-NEXT:  LV(REG): RegisterClass: RISCV::VRRC, 16 registers
;


define void @add(float* noalias nocapture readonly %src1, float* noalias nocapture readonly %src2, i32 signext %size, float* noalias nocapture writeonly %result) {
; CHECK-LABEL: add
; CHECK-SCALAR-LABEL: @add(
; CHECK-SCALAR-NEXT:  entry:
; CHECK-SCALAR-NEXT:    [[CONV:%.*]] = zext i32 [[SIZE:%.*]] to i64
; CHECK-SCALAR-NEXT:    [[CMP10_NOT:%.*]] = icmp eq i32 [[SIZE]], 0
; CHECK-SCALAR-NEXT:    br i1 [[CMP10_NOT]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; CHECK-SCALAR:       for.body.preheader:
; CHECK-SCALAR-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK-SCALAR:       for.cond.cleanup.loopexit:
; CHECK-SCALAR-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK-SCALAR:       for.cond.cleanup:
; CHECK-SCALAR-NEXT:    ret void
; CHECK-SCALAR:       for.body:
; CHECK-SCALAR-NEXT:    [[I_011:%.*]] = phi i64 [ [[ADD4:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-SCALAR-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[SRC1:%.*]], i64 [[I_011]]
; CHECK-SCALAR-NEXT:    [[TMP0:%.*]] = load float, float* [[ARRAYIDX]], align 4
; CHECK-SCALAR-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, float* [[SRC2:%.*]], i64 [[I_011]]
; CHECK-SCALAR-NEXT:    [[TMP1:%.*]] = load float, float* [[ARRAYIDX2]], align 4
; CHECK-SCALAR-NEXT:    [[ADD:%.*]] = fadd float [[TMP0]], [[TMP1]]
; CHECK-SCALAR-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds float, float* [[RESULT:%.*]], i64 [[I_011]]
; CHECK-SCALAR-NEXT:    store float [[ADD]], float* [[ARRAYIDX3]], align 4
; CHECK-SCALAR-NEXT:    [[ADD4]] = add nuw nsw i64 [[I_011]], 1
; CHECK-SCALAR-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[ADD4]], [[CONV]]
; CHECK-SCALAR-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]]
;
; CHECK-LMUL1-LABEL: @add(
; CHECK-LMUL1-NEXT:  entry:
; CHECK-LMUL1-NEXT:    [[CONV:%.*]] = zext i32 [[SIZE:%.*]] to i64
; CHECK-LMUL1-NEXT:    [[CMP10_NOT:%.*]] = icmp eq i32 [[SIZE]], 0
; CHECK-LMUL1-NEXT:    br i1 [[CMP10_NOT]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; CHECK-LMUL1:       for.body.preheader:
; CHECK-LMUL1-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL1-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 4
; CHECK-LMUL1-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[CONV]], [[TMP1]]
; CHECK-LMUL1-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-LMUL1:       vector.ph:
; CHECK-LMUL1-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL1-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 4
; CHECK-LMUL1-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[CONV]], [[TMP3]]
; CHECK-LMUL1-NEXT:    [[N_VEC:%.*]] = sub i64 [[CONV]], [[N_MOD_VF]]
; CHECK-LMUL1-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-LMUL1:       vector.body:
; CHECK-LMUL1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-LMUL1-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 0
; CHECK-LMUL1-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL1-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 2
; CHECK-LMUL1-NEXT:    [[TMP7:%.*]] = add i64 [[TMP6]], 0
; CHECK-LMUL1-NEXT:    [[TMP8:%.*]] = mul i64 [[TMP7]], 1
; CHECK-LMUL1-NEXT:    [[TMP9:%.*]] = add i64 [[INDEX]], [[TMP8]]
; CHECK-LMUL1-NEXT:    [[TMP10:%.*]] = getelementptr inbounds float, float* [[SRC1:%.*]], i64 [[TMP4]]
; CHECK-LMUL1-NEXT:    [[TMP11:%.*]] = getelementptr inbounds float, float* [[SRC1]], i64 [[TMP9]]
; CHECK-LMUL1-NEXT:    [[TMP12:%.*]] = getelementptr inbounds float, float* [[TMP10]], i32 0
; CHECK-LMUL1-NEXT:    [[TMP13:%.*]] = bitcast float* [[TMP12]] to <vscale x 2 x float>*
; CHECK-LMUL1-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 2 x float>, <vscale x 2 x float>* [[TMP13]], align 4
; CHECK-LMUL1-NEXT:    [[TMP14:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL1-NEXT:    [[TMP15:%.*]] = mul i32 [[TMP14]], 2
; CHECK-LMUL1-NEXT:    [[TMP16:%.*]] = getelementptr inbounds float, float* [[TMP10]], i32 [[TMP15]]
; CHECK-LMUL1-NEXT:    [[TMP17:%.*]] = bitcast float* [[TMP16]] to <vscale x 2 x float>*
; CHECK-LMUL1-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 2 x float>, <vscale x 2 x float>* [[TMP17]], align 4
; CHECK-LMUL1-NEXT:    [[TMP18:%.*]] = getelementptr inbounds float, float* [[SRC2:%.*]], i64 [[TMP4]]
; CHECK-LMUL1-NEXT:    [[TMP19:%.*]] = getelementptr inbounds float, float* [[SRC2]], i64 [[TMP9]]
; CHECK-LMUL1-NEXT:    [[TMP20:%.*]] = getelementptr inbounds float, float* [[TMP18]], i32 0
; CHECK-LMUL1-NEXT:    [[TMP21:%.*]] = bitcast float* [[TMP20]] to <vscale x 2 x float>*
; CHECK-LMUL1-NEXT:    [[WIDE_LOAD2:%.*]] = load <vscale x 2 x float>, <vscale x 2 x float>* [[TMP21]], align 4
; CHECK-LMUL1-NEXT:    [[TMP22:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL1-NEXT:    [[TMP23:%.*]] = mul i32 [[TMP22]], 2
; CHECK-LMUL1-NEXT:    [[TMP24:%.*]] = getelementptr inbounds float, float* [[TMP18]], i32 [[TMP23]]
; CHECK-LMUL1-NEXT:    [[TMP25:%.*]] = bitcast float* [[TMP24]] to <vscale x 2 x float>*
; CHECK-LMUL1-NEXT:    [[WIDE_LOAD3:%.*]] = load <vscale x 2 x float>, <vscale x 2 x float>* [[TMP25]], align 4
; CHECK-LMUL1-NEXT:    [[TMP26:%.*]] = fadd <vscale x 2 x float> [[WIDE_LOAD]], [[WIDE_LOAD2]]
; CHECK-LMUL1-NEXT:    [[TMP27:%.*]] = fadd <vscale x 2 x float> [[WIDE_LOAD1]], [[WIDE_LOAD3]]
; CHECK-LMUL1-NEXT:    [[TMP28:%.*]] = getelementptr inbounds float, float* [[RESULT:%.*]], i64 [[TMP4]]
; CHECK-LMUL1-NEXT:    [[TMP29:%.*]] = getelementptr inbounds float, float* [[RESULT]], i64 [[TMP9]]
; CHECK-LMUL1-NEXT:    [[TMP30:%.*]] = getelementptr inbounds float, float* [[TMP28]], i32 0
; CHECK-LMUL1-NEXT:    [[TMP31:%.*]] = bitcast float* [[TMP30]] to <vscale x 2 x float>*
; CHECK-LMUL1-NEXT:    store <vscale x 2 x float> [[TMP26]], <vscale x 2 x float>* [[TMP31]], align 4
; CHECK-LMUL1-NEXT:    [[TMP32:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL1-NEXT:    [[TMP33:%.*]] = mul i32 [[TMP32]], 2
; CHECK-LMUL1-NEXT:    [[TMP34:%.*]] = getelementptr inbounds float, float* [[TMP28]], i32 [[TMP33]]
; CHECK-LMUL1-NEXT:    [[TMP35:%.*]] = bitcast float* [[TMP34]] to <vscale x 2 x float>*
; CHECK-LMUL1-NEXT:    store <vscale x 2 x float> [[TMP27]], <vscale x 2 x float>* [[TMP35]], align 4
; CHECK-LMUL1-NEXT:    [[TMP36:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL1-NEXT:    [[TMP37:%.*]] = mul i64 [[TMP36]], 4
; CHECK-LMUL1-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP37]]
; CHECK-LMUL1-NEXT:    [[TMP38:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-LMUL1-NEXT:    br i1 [[TMP38]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK-LMUL1:       middle.block:
; CHECK-LMUL1-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[CONV]], [[N_VEC]]
; CHECK-LMUL1-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK-LMUL1:       scalar.ph:
; CHECK-LMUL1-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-LMUL1-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK-LMUL1:       for.cond.cleanup.loopexit:
; CHECK-LMUL1-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK-LMUL1:       for.cond.cleanup:
; CHECK-LMUL1-NEXT:    ret void
; CHECK-LMUL1:       for.body:
; CHECK-LMUL1-NEXT:    [[I_011:%.*]] = phi i64 [ [[ADD4:%.*]], [[FOR_BODY]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; CHECK-LMUL1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[SRC1]], i64 [[I_011]]
; CHECK-LMUL1-NEXT:    [[TMP39:%.*]] = load float, float* [[ARRAYIDX]], align 4
; CHECK-LMUL1-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, float* [[SRC2]], i64 [[I_011]]
; CHECK-LMUL1-NEXT:    [[TMP40:%.*]] = load float, float* [[ARRAYIDX2]], align 4
; CHECK-LMUL1-NEXT:    [[ADD:%.*]] = fadd float [[TMP39]], [[TMP40]]
; CHECK-LMUL1-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds float, float* [[RESULT]], i64 [[I_011]]
; CHECK-LMUL1-NEXT:    store float [[ADD]], float* [[ARRAYIDX3]], align 4
; CHECK-LMUL1-NEXT:    [[ADD4]] = add nuw nsw i64 [[I_011]], 1
; CHECK-LMUL1-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[ADD4]], [[CONV]]
; CHECK-LMUL1-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
;
; CHECK-LMUL2-LABEL: @add(
; CHECK-LMUL2-NEXT:  entry:
; CHECK-LMUL2-NEXT:    [[CONV:%.*]] = zext i32 [[SIZE:%.*]] to i64
; CHECK-LMUL2-NEXT:    [[CMP10_NOT:%.*]] = icmp eq i32 [[SIZE]], 0
; CHECK-LMUL2-NEXT:    br i1 [[CMP10_NOT]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; CHECK-LMUL2:       for.body.preheader:
; CHECK-LMUL2-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL2-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 8
; CHECK-LMUL2-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[CONV]], [[TMP1]]
; CHECK-LMUL2-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-LMUL2:       vector.ph:
; CHECK-LMUL2-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL2-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 8
; CHECK-LMUL2-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[CONV]], [[TMP3]]
; CHECK-LMUL2-NEXT:    [[N_VEC:%.*]] = sub i64 [[CONV]], [[N_MOD_VF]]
; CHECK-LMUL2-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-LMUL2:       vector.body:
; CHECK-LMUL2-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-LMUL2-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 0
; CHECK-LMUL2-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL2-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 4
; CHECK-LMUL2-NEXT:    [[TMP7:%.*]] = add i64 [[TMP6]], 0
; CHECK-LMUL2-NEXT:    [[TMP8:%.*]] = mul i64 [[TMP7]], 1
; CHECK-LMUL2-NEXT:    [[TMP9:%.*]] = add i64 [[INDEX]], [[TMP8]]
; CHECK-LMUL2-NEXT:    [[TMP10:%.*]] = getelementptr inbounds float, float* [[SRC1:%.*]], i64 [[TMP4]]
; CHECK-LMUL2-NEXT:    [[TMP11:%.*]] = getelementptr inbounds float, float* [[SRC1]], i64 [[TMP9]]
; CHECK-LMUL2-NEXT:    [[TMP12:%.*]] = getelementptr inbounds float, float* [[TMP10]], i32 0
; CHECK-LMUL2-NEXT:    [[TMP13:%.*]] = bitcast float* [[TMP12]] to <vscale x 4 x float>*
; CHECK-LMUL2-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 4 x float>, <vscale x 4 x float>* [[TMP13]], align 4
; CHECK-LMUL2-NEXT:    [[TMP14:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL2-NEXT:    [[TMP15:%.*]] = mul i32 [[TMP14]], 4
; CHECK-LMUL2-NEXT:    [[TMP16:%.*]] = getelementptr inbounds float, float* [[TMP10]], i32 [[TMP15]]
; CHECK-LMUL2-NEXT:    [[TMP17:%.*]] = bitcast float* [[TMP16]] to <vscale x 4 x float>*
; CHECK-LMUL2-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 4 x float>, <vscale x 4 x float>* [[TMP17]], align 4
; CHECK-LMUL2-NEXT:    [[TMP18:%.*]] = getelementptr inbounds float, float* [[SRC2:%.*]], i64 [[TMP4]]
; CHECK-LMUL2-NEXT:    [[TMP19:%.*]] = getelementptr inbounds float, float* [[SRC2]], i64 [[TMP9]]
; CHECK-LMUL2-NEXT:    [[TMP20:%.*]] = getelementptr inbounds float, float* [[TMP18]], i32 0
; CHECK-LMUL2-NEXT:    [[TMP21:%.*]] = bitcast float* [[TMP20]] to <vscale x 4 x float>*
; CHECK-LMUL2-NEXT:    [[WIDE_LOAD2:%.*]] = load <vscale x 4 x float>, <vscale x 4 x float>* [[TMP21]], align 4
; CHECK-LMUL2-NEXT:    [[TMP22:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL2-NEXT:    [[TMP23:%.*]] = mul i32 [[TMP22]], 4
; CHECK-LMUL2-NEXT:    [[TMP24:%.*]] = getelementptr inbounds float, float* [[TMP18]], i32 [[TMP23]]
; CHECK-LMUL2-NEXT:    [[TMP25:%.*]] = bitcast float* [[TMP24]] to <vscale x 4 x float>*
; CHECK-LMUL2-NEXT:    [[WIDE_LOAD3:%.*]] = load <vscale x 4 x float>, <vscale x 4 x float>* [[TMP25]], align 4
; CHECK-LMUL2-NEXT:    [[TMP26:%.*]] = fadd <vscale x 4 x float> [[WIDE_LOAD]], [[WIDE_LOAD2]]
; CHECK-LMUL2-NEXT:    [[TMP27:%.*]] = fadd <vscale x 4 x float> [[WIDE_LOAD1]], [[WIDE_LOAD3]]
; CHECK-LMUL2-NEXT:    [[TMP28:%.*]] = getelementptr inbounds float, float* [[RESULT:%.*]], i64 [[TMP4]]
; CHECK-LMUL2-NEXT:    [[TMP29:%.*]] = getelementptr inbounds float, float* [[RESULT]], i64 [[TMP9]]
; CHECK-LMUL2-NEXT:    [[TMP30:%.*]] = getelementptr inbounds float, float* [[TMP28]], i32 0
; CHECK-LMUL2-NEXT:    [[TMP31:%.*]] = bitcast float* [[TMP30]] to <vscale x 4 x float>*
; CHECK-LMUL2-NEXT:    store <vscale x 4 x float> [[TMP26]], <vscale x 4 x float>* [[TMP31]], align 4
; CHECK-LMUL2-NEXT:    [[TMP32:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL2-NEXT:    [[TMP33:%.*]] = mul i32 [[TMP32]], 4
; CHECK-LMUL2-NEXT:    [[TMP34:%.*]] = getelementptr inbounds float, float* [[TMP28]], i32 [[TMP33]]
; CHECK-LMUL2-NEXT:    [[TMP35:%.*]] = bitcast float* [[TMP34]] to <vscale x 4 x float>*
; CHECK-LMUL2-NEXT:    store <vscale x 4 x float> [[TMP27]], <vscale x 4 x float>* [[TMP35]], align 4
; CHECK-LMUL2-NEXT:    [[TMP36:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL2-NEXT:    [[TMP37:%.*]] = mul i64 [[TMP36]], 8
; CHECK-LMUL2-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP37]]
; CHECK-LMUL2-NEXT:    [[TMP38:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-LMUL2-NEXT:    br i1 [[TMP38]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK-LMUL2:       middle.block:
; CHECK-LMUL2-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[CONV]], [[N_VEC]]
; CHECK-LMUL2-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK-LMUL2:       scalar.ph:
; CHECK-LMUL2-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-LMUL2-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK-LMUL2:       for.cond.cleanup.loopexit:
; CHECK-LMUL2-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK-LMUL2:       for.cond.cleanup:
; CHECK-LMUL2-NEXT:    ret void
; CHECK-LMUL2:       for.body:
; CHECK-LMUL2-NEXT:    [[I_011:%.*]] = phi i64 [ [[ADD4:%.*]], [[FOR_BODY]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; CHECK-LMUL2-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[SRC1]], i64 [[I_011]]
; CHECK-LMUL2-NEXT:    [[TMP39:%.*]] = load float, float* [[ARRAYIDX]], align 4
; CHECK-LMUL2-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, float* [[SRC2]], i64 [[I_011]]
; CHECK-LMUL2-NEXT:    [[TMP40:%.*]] = load float, float* [[ARRAYIDX2]], align 4
; CHECK-LMUL2-NEXT:    [[ADD:%.*]] = fadd float [[TMP39]], [[TMP40]]
; CHECK-LMUL2-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds float, float* [[RESULT]], i64 [[I_011]]
; CHECK-LMUL2-NEXT:    store float [[ADD]], float* [[ARRAYIDX3]], align 4
; CHECK-LMUL2-NEXT:    [[ADD4]] = add nuw nsw i64 [[I_011]], 1
; CHECK-LMUL2-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[ADD4]], [[CONV]]
; CHECK-LMUL2-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
;
; CHECK-LMUL4-LABEL: @add(
; CHECK-LMUL4-NEXT:  entry:
; CHECK-LMUL4-NEXT:    [[CONV:%.*]] = zext i32 [[SIZE:%.*]] to i64
; CHECK-LMUL4-NEXT:    [[CMP10_NOT:%.*]] = icmp eq i32 [[SIZE]], 0
; CHECK-LMUL4-NEXT:    br i1 [[CMP10_NOT]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; CHECK-LMUL4:       for.body.preheader:
; CHECK-LMUL4-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL4-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 16
; CHECK-LMUL4-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[CONV]], [[TMP1]]
; CHECK-LMUL4-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-LMUL4:       vector.ph:
; CHECK-LMUL4-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL4-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 16
; CHECK-LMUL4-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[CONV]], [[TMP3]]
; CHECK-LMUL4-NEXT:    [[N_VEC:%.*]] = sub i64 [[CONV]], [[N_MOD_VF]]
; CHECK-LMUL4-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-LMUL4:       vector.body:
; CHECK-LMUL4-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-LMUL4-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 0
; CHECK-LMUL4-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL4-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 8
; CHECK-LMUL4-NEXT:    [[TMP7:%.*]] = add i64 [[TMP6]], 0
; CHECK-LMUL4-NEXT:    [[TMP8:%.*]] = mul i64 [[TMP7]], 1
; CHECK-LMUL4-NEXT:    [[TMP9:%.*]] = add i64 [[INDEX]], [[TMP8]]
; CHECK-LMUL4-NEXT:    [[TMP10:%.*]] = getelementptr inbounds float, float* [[SRC1:%.*]], i64 [[TMP4]]
; CHECK-LMUL4-NEXT:    [[TMP11:%.*]] = getelementptr inbounds float, float* [[SRC1]], i64 [[TMP9]]
; CHECK-LMUL4-NEXT:    [[TMP12:%.*]] = getelementptr inbounds float, float* [[TMP10]], i32 0
; CHECK-LMUL4-NEXT:    [[TMP13:%.*]] = bitcast float* [[TMP12]] to <vscale x 8 x float>*
; CHECK-LMUL4-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 8 x float>, <vscale x 8 x float>* [[TMP13]], align 4
; CHECK-LMUL4-NEXT:    [[TMP14:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL4-NEXT:    [[TMP15:%.*]] = mul i32 [[TMP14]], 8
; CHECK-LMUL4-NEXT:    [[TMP16:%.*]] = getelementptr inbounds float, float* [[TMP10]], i32 [[TMP15]]
; CHECK-LMUL4-NEXT:    [[TMP17:%.*]] = bitcast float* [[TMP16]] to <vscale x 8 x float>*
; CHECK-LMUL4-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 8 x float>, <vscale x 8 x float>* [[TMP17]], align 4
; CHECK-LMUL4-NEXT:    [[TMP18:%.*]] = getelementptr inbounds float, float* [[SRC2:%.*]], i64 [[TMP4]]
; CHECK-LMUL4-NEXT:    [[TMP19:%.*]] = getelementptr inbounds float, float* [[SRC2]], i64 [[TMP9]]
; CHECK-LMUL4-NEXT:    [[TMP20:%.*]] = getelementptr inbounds float, float* [[TMP18]], i32 0
; CHECK-LMUL4-NEXT:    [[TMP21:%.*]] = bitcast float* [[TMP20]] to <vscale x 8 x float>*
; CHECK-LMUL4-NEXT:    [[WIDE_LOAD2:%.*]] = load <vscale x 8 x float>, <vscale x 8 x float>* [[TMP21]], align 4
; CHECK-LMUL4-NEXT:    [[TMP22:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL4-NEXT:    [[TMP23:%.*]] = mul i32 [[TMP22]], 8
; CHECK-LMUL4-NEXT:    [[TMP24:%.*]] = getelementptr inbounds float, float* [[TMP18]], i32 [[TMP23]]
; CHECK-LMUL4-NEXT:    [[TMP25:%.*]] = bitcast float* [[TMP24]] to <vscale x 8 x float>*
; CHECK-LMUL4-NEXT:    [[WIDE_LOAD3:%.*]] = load <vscale x 8 x float>, <vscale x 8 x float>* [[TMP25]], align 4
; CHECK-LMUL4-NEXT:    [[TMP26:%.*]] = fadd <vscale x 8 x float> [[WIDE_LOAD]], [[WIDE_LOAD2]]
; CHECK-LMUL4-NEXT:    [[TMP27:%.*]] = fadd <vscale x 8 x float> [[WIDE_LOAD1]], [[WIDE_LOAD3]]
; CHECK-LMUL4-NEXT:    [[TMP28:%.*]] = getelementptr inbounds float, float* [[RESULT:%.*]], i64 [[TMP4]]
; CHECK-LMUL4-NEXT:    [[TMP29:%.*]] = getelementptr inbounds float, float* [[RESULT]], i64 [[TMP9]]
; CHECK-LMUL4-NEXT:    [[TMP30:%.*]] = getelementptr inbounds float, float* [[TMP28]], i32 0
; CHECK-LMUL4-NEXT:    [[TMP31:%.*]] = bitcast float* [[TMP30]] to <vscale x 8 x float>*
; CHECK-LMUL4-NEXT:    store <vscale x 8 x float> [[TMP26]], <vscale x 8 x float>* [[TMP31]], align 4
; CHECK-LMUL4-NEXT:    [[TMP32:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL4-NEXT:    [[TMP33:%.*]] = mul i32 [[TMP32]], 8
; CHECK-LMUL4-NEXT:    [[TMP34:%.*]] = getelementptr inbounds float, float* [[TMP28]], i32 [[TMP33]]
; CHECK-LMUL4-NEXT:    [[TMP35:%.*]] = bitcast float* [[TMP34]] to <vscale x 8 x float>*
; CHECK-LMUL4-NEXT:    store <vscale x 8 x float> [[TMP27]], <vscale x 8 x float>* [[TMP35]], align 4
; CHECK-LMUL4-NEXT:    [[TMP36:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL4-NEXT:    [[TMP37:%.*]] = mul i64 [[TMP36]], 16
; CHECK-LMUL4-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP37]]
; CHECK-LMUL4-NEXT:    [[TMP38:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-LMUL4-NEXT:    br i1 [[TMP38]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK-LMUL4:       middle.block:
; CHECK-LMUL4-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[CONV]], [[N_VEC]]
; CHECK-LMUL4-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK-LMUL4:       scalar.ph:
; CHECK-LMUL4-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-LMUL4-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK-LMUL4:       for.cond.cleanup.loopexit:
; CHECK-LMUL4-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK-LMUL4:       for.cond.cleanup:
; CHECK-LMUL4-NEXT:    ret void
; CHECK-LMUL4:       for.body:
; CHECK-LMUL4-NEXT:    [[I_011:%.*]] = phi i64 [ [[ADD4:%.*]], [[FOR_BODY]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; CHECK-LMUL4-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[SRC1]], i64 [[I_011]]
; CHECK-LMUL4-NEXT:    [[TMP39:%.*]] = load float, float* [[ARRAYIDX]], align 4
; CHECK-LMUL4-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, float* [[SRC2]], i64 [[I_011]]
; CHECK-LMUL4-NEXT:    [[TMP40:%.*]] = load float, float* [[ARRAYIDX2]], align 4
; CHECK-LMUL4-NEXT:    [[ADD:%.*]] = fadd float [[TMP39]], [[TMP40]]
; CHECK-LMUL4-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds float, float* [[RESULT]], i64 [[I_011]]
; CHECK-LMUL4-NEXT:    store float [[ADD]], float* [[ARRAYIDX3]], align 4
; CHECK-LMUL4-NEXT:    [[ADD4]] = add nuw nsw i64 [[I_011]], 1
; CHECK-LMUL4-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[ADD4]], [[CONV]]
; CHECK-LMUL4-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
;
; CHECK-LMUL8-LABEL: @add(
; CHECK-LMUL8-NEXT:  entry:
; CHECK-LMUL8-NEXT:    [[CONV:%.*]] = zext i32 [[SIZE:%.*]] to i64
; CHECK-LMUL8-NEXT:    [[CMP10_NOT:%.*]] = icmp eq i32 [[SIZE]], 0
; CHECK-LMUL8-NEXT:    br i1 [[CMP10_NOT]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; CHECK-LMUL8:       for.body.preheader:
; CHECK-LMUL8-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL8-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 16
; CHECK-LMUL8-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[CONV]], [[TMP1]]
; CHECK-LMUL8-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-LMUL8:       vector.ph:
; CHECK-LMUL8-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL8-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 16
; CHECK-LMUL8-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[CONV]], [[TMP3]]
; CHECK-LMUL8-NEXT:    [[N_VEC:%.*]] = sub i64 [[CONV]], [[N_MOD_VF]]
; CHECK-LMUL8-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-LMUL8:       vector.body:
; CHECK-LMUL8-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-LMUL8-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 0
; CHECK-LMUL8-NEXT:    [[TMP5:%.*]] = getelementptr inbounds float, float* [[SRC1:%.*]], i64 [[TMP4]]
; CHECK-LMUL8-NEXT:    [[TMP6:%.*]] = getelementptr inbounds float, float* [[TMP5]], i32 0
; CHECK-LMUL8-NEXT:    [[TMP7:%.*]] = bitcast float* [[TMP6]] to <vscale x 16 x float>*
; CHECK-LMUL8-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 16 x float>, <vscale x 16 x float>* [[TMP7]], align 4
; CHECK-LMUL8-NEXT:    [[TMP8:%.*]] = getelementptr inbounds float, float* [[SRC2:%.*]], i64 [[TMP4]]
; CHECK-LMUL8-NEXT:    [[TMP9:%.*]] = getelementptr inbounds float, float* [[TMP8]], i32 0
; CHECK-LMUL8-NEXT:    [[TMP10:%.*]] = bitcast float* [[TMP9]] to <vscale x 16 x float>*
; CHECK-LMUL8-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 16 x float>, <vscale x 16 x float>* [[TMP10]], align 4
; CHECK-LMUL8-NEXT:    [[TMP11:%.*]] = fadd <vscale x 16 x float> [[WIDE_LOAD]], [[WIDE_LOAD1]]
; CHECK-LMUL8-NEXT:    [[TMP12:%.*]] = getelementptr inbounds float, float* [[RESULT:%.*]], i64 [[TMP4]]
; CHECK-LMUL8-NEXT:    [[TMP13:%.*]] = getelementptr inbounds float, float* [[TMP12]], i32 0
; CHECK-LMUL8-NEXT:    [[TMP14:%.*]] = bitcast float* [[TMP13]] to <vscale x 16 x float>*
; CHECK-LMUL8-NEXT:    store <vscale x 16 x float> [[TMP11]], <vscale x 16 x float>* [[TMP14]], align 4
; CHECK-LMUL8-NEXT:    [[TMP15:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL8-NEXT:    [[TMP16:%.*]] = mul i64 [[TMP15]], 16
; CHECK-LMUL8-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP16]]
; CHECK-LMUL8-NEXT:    [[TMP17:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-LMUL8-NEXT:    br i1 [[TMP17]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK-LMUL8:       middle.block:
; CHECK-LMUL8-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[CONV]], [[N_VEC]]
; CHECK-LMUL8-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK-LMUL8:       scalar.ph:
; CHECK-LMUL8-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-LMUL8-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK-LMUL8:       for.cond.cleanup.loopexit:
; CHECK-LMUL8-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK-LMUL8:       for.cond.cleanup:
; CHECK-LMUL8-NEXT:    ret void
; CHECK-LMUL8:       for.body:
; CHECK-LMUL8-NEXT:    [[I_011:%.*]] = phi i64 [ [[ADD4:%.*]], [[FOR_BODY]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; CHECK-LMUL8-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[SRC1]], i64 [[I_011]]
; CHECK-LMUL8-NEXT:    [[TMP18:%.*]] = load float, float* [[ARRAYIDX]], align 4
; CHECK-LMUL8-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, float* [[SRC2]], i64 [[I_011]]
; CHECK-LMUL8-NEXT:    [[TMP19:%.*]] = load float, float* [[ARRAYIDX2]], align 4
; CHECK-LMUL8-NEXT:    [[ADD:%.*]] = fadd float [[TMP18]], [[TMP19]]
; CHECK-LMUL8-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds float, float* [[RESULT]], i64 [[I_011]]
; CHECK-LMUL8-NEXT:    store float [[ADD]], float* [[ARRAYIDX3]], align 4
; CHECK-LMUL8-NEXT:    [[ADD4]] = add nuw nsw i64 [[I_011]], 1
; CHECK-LMUL8-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[ADD4]], [[CONV]]
; CHECK-LMUL8-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
;

entry:
  %conv = zext i32 %size to i64
  %cmp10.not = icmp eq i32 %size, 0
  br i1 %cmp10.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:
  ret void

for.body:
  %i.011 = phi i64 [ %add4, %for.body ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds float, float* %src1, i64 %i.011
  %0 = load float, float* %arrayidx, align 4
  %arrayidx2 = getelementptr inbounds float, float* %src2, i64 %i.011
  %1 = load float, float* %arrayidx2, align 4
  %add = fadd float %0, %1
  %arrayidx3 = getelementptr inbounds float, float* %result, i64 %i.011
  store float %add, float* %arrayidx3, align 4
  %add4 = add nuw nsw i64 %i.011, 1
  %exitcond.not = icmp eq i64 %add4, %conv
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

define void @goo(i32** nocapture noundef %a, i32 noundef signext %n) {
; CHECK-SCALAR-LABEL: @goo(
; CHECK-SCALAR-NEXT:  entry:
; CHECK-SCALAR-NEXT:    [[CMP3:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-SCALAR-NEXT:    br i1 [[CMP3]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK-SCALAR:       for.body.preheader:
; CHECK-SCALAR-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-SCALAR-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK-SCALAR:       for.cond.cleanup.loopexit:
; CHECK-SCALAR-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK-SCALAR:       for.cond.cleanup:
; CHECK-SCALAR-NEXT:    ret void
; CHECK-SCALAR:       for.body:
; CHECK-SCALAR-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-SCALAR-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32*, i32** [[A:%.*]], i64 [[INDVARS_IV]]
; CHECK-SCALAR-NEXT:    [[TMP0:%.*]] = load i32*, i32** [[ARRAYIDX]], align 8
; CHECK-SCALAR-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, i32* [[TMP0]], i64 1
; CHECK-SCALAR-NEXT:    store i32* [[ADD_PTR]], i32** [[ARRAYIDX]], align 8
; CHECK-SCALAR-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-SCALAR-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-SCALAR-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]]
;
; CHECK-LMUL1-LABEL: @goo(
; CHECK-LMUL1-NEXT:  entry:
; CHECK-LMUL1-NEXT:    [[CMP3:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-LMUL1-NEXT:    br i1 [[CMP3]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK-LMUL1:       for.body.preheader:
; CHECK-LMUL1-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-LMUL1-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL1-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 2
; CHECK-LMUL1-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[WIDE_TRIP_COUNT]], [[TMP1]]
; CHECK-LMUL1-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-LMUL1:       vector.ph:
; CHECK-LMUL1-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL1-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 2
; CHECK-LMUL1-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], [[TMP3]]
; CHECK-LMUL1-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; CHECK-LMUL1-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-LMUL1:       vector.body:
; CHECK-LMUL1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-LMUL1-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 0
; CHECK-LMUL1-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL1-NEXT:    [[TMP6:%.*]] = add i64 [[TMP5]], 0
; CHECK-LMUL1-NEXT:    [[TMP7:%.*]] = mul i64 [[TMP6]], 1
; CHECK-LMUL1-NEXT:    [[TMP8:%.*]] = add i64 [[INDEX]], [[TMP7]]
; CHECK-LMUL1-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i32*, i32** [[A:%.*]], i64 [[TMP4]]
; CHECK-LMUL1-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i32*, i32** [[A]], i64 [[TMP8]]
; CHECK-LMUL1-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i32*, i32** [[TMP9]], i32 0
; CHECK-LMUL1-NEXT:    [[TMP12:%.*]] = bitcast i32** [[TMP11]] to <vscale x 1 x i32*>*
; CHECK-LMUL1-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 1 x i32*>, <vscale x 1 x i32*>* [[TMP12]], align 8
; CHECK-LMUL1-NEXT:    [[TMP13:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL1-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i32*, i32** [[TMP9]], i32 [[TMP13]]
; CHECK-LMUL1-NEXT:    [[TMP15:%.*]] = bitcast i32** [[TMP14]] to <vscale x 1 x i32*>*
; CHECK-LMUL1-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 1 x i32*>, <vscale x 1 x i32*>* [[TMP15]], align 8
; CHECK-LMUL1-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32, <vscale x 1 x i32*> [[WIDE_LOAD]], i64 1
; CHECK-LMUL1-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i32, <vscale x 1 x i32*> [[WIDE_LOAD1]], i64 1
; CHECK-LMUL1-NEXT:    [[TMP18:%.*]] = bitcast i32** [[TMP11]] to <vscale x 1 x i32*>*
; CHECK-LMUL1-NEXT:    store <vscale x 1 x i32*> [[TMP16]], <vscale x 1 x i32*>* [[TMP18]], align 8
; CHECK-LMUL1-NEXT:    [[TMP19:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL1-NEXT:    [[TMP20:%.*]] = getelementptr inbounds i32*, i32** [[TMP9]], i32 [[TMP19]]
; CHECK-LMUL1-NEXT:    [[TMP21:%.*]] = bitcast i32** [[TMP20]] to <vscale x 1 x i32*>*
; CHECK-LMUL1-NEXT:    store <vscale x 1 x i32*> [[TMP17]], <vscale x 1 x i32*>* [[TMP21]], align 8
; CHECK-LMUL1-NEXT:    [[TMP22:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL1-NEXT:    [[TMP23:%.*]] = mul i64 [[TMP22]], 2
; CHECK-LMUL1-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP23]]
; CHECK-LMUL1-NEXT:    [[TMP24:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-LMUL1-NEXT:    br i1 [[TMP24]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; CHECK-LMUL1:       middle.block:
; CHECK-LMUL1-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT]], [[N_VEC]]
; CHECK-LMUL1-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK-LMUL1:       scalar.ph:
; CHECK-LMUL1-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-LMUL1-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK-LMUL1:       for.cond.cleanup.loopexit:
; CHECK-LMUL1-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK-LMUL1:       for.cond.cleanup:
; CHECK-LMUL1-NEXT:    ret void
; CHECK-LMUL1:       for.body:
; CHECK-LMUL1-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-LMUL1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32*, i32** [[A]], i64 [[INDVARS_IV]]
; CHECK-LMUL1-NEXT:    [[TMP25:%.*]] = load i32*, i32** [[ARRAYIDX]], align 8
; CHECK-LMUL1-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, i32* [[TMP25]], i64 1
; CHECK-LMUL1-NEXT:    store i32* [[ADD_PTR]], i32** [[ARRAYIDX]], align 8
; CHECK-LMUL1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-LMUL1-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-LMUL1-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]
;
; CHECK-LMUL2-LABEL: @goo(
; CHECK-LMUL2-NEXT:  entry:
; CHECK-LMUL2-NEXT:    [[CMP3:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-LMUL2-NEXT:    br i1 [[CMP3]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK-LMUL2:       for.body.preheader:
; CHECK-LMUL2-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-LMUL2-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL2-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 4
; CHECK-LMUL2-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[WIDE_TRIP_COUNT]], [[TMP1]]
; CHECK-LMUL2-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-LMUL2:       vector.ph:
; CHECK-LMUL2-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL2-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 4
; CHECK-LMUL2-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], [[TMP3]]
; CHECK-LMUL2-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; CHECK-LMUL2-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-LMUL2:       vector.body:
; CHECK-LMUL2-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-LMUL2-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 0
; CHECK-LMUL2-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL2-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 2
; CHECK-LMUL2-NEXT:    [[TMP7:%.*]] = add i64 [[TMP6]], 0
; CHECK-LMUL2-NEXT:    [[TMP8:%.*]] = mul i64 [[TMP7]], 1
; CHECK-LMUL2-NEXT:    [[TMP9:%.*]] = add i64 [[INDEX]], [[TMP8]]
; CHECK-LMUL2-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i32*, i32** [[A:%.*]], i64 [[TMP4]]
; CHECK-LMUL2-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i32*, i32** [[A]], i64 [[TMP9]]
; CHECK-LMUL2-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i32*, i32** [[TMP10]], i32 0
; CHECK-LMUL2-NEXT:    [[TMP13:%.*]] = bitcast i32** [[TMP12]] to <vscale x 2 x i32*>*
; CHECK-LMUL2-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 2 x i32*>, <vscale x 2 x i32*>* [[TMP13]], align 8
; CHECK-LMUL2-NEXT:    [[TMP14:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL2-NEXT:    [[TMP15:%.*]] = mul i32 [[TMP14]], 2
; CHECK-LMUL2-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32*, i32** [[TMP10]], i32 [[TMP15]]
; CHECK-LMUL2-NEXT:    [[TMP17:%.*]] = bitcast i32** [[TMP16]] to <vscale x 2 x i32*>*
; CHECK-LMUL2-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 2 x i32*>, <vscale x 2 x i32*>* [[TMP17]], align 8
; CHECK-LMUL2-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i32, <vscale x 2 x i32*> [[WIDE_LOAD]], i64 1
; CHECK-LMUL2-NEXT:    [[TMP19:%.*]] = getelementptr inbounds i32, <vscale x 2 x i32*> [[WIDE_LOAD1]], i64 1
; CHECK-LMUL2-NEXT:    [[TMP20:%.*]] = bitcast i32** [[TMP12]] to <vscale x 2 x i32*>*
; CHECK-LMUL2-NEXT:    store <vscale x 2 x i32*> [[TMP18]], <vscale x 2 x i32*>* [[TMP20]], align 8
; CHECK-LMUL2-NEXT:    [[TMP21:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL2-NEXT:    [[TMP22:%.*]] = mul i32 [[TMP21]], 2
; CHECK-LMUL2-NEXT:    [[TMP23:%.*]] = getelementptr inbounds i32*, i32** [[TMP10]], i32 [[TMP22]]
; CHECK-LMUL2-NEXT:    [[TMP24:%.*]] = bitcast i32** [[TMP23]] to <vscale x 2 x i32*>*
; CHECK-LMUL2-NEXT:    store <vscale x 2 x i32*> [[TMP19]], <vscale x 2 x i32*>* [[TMP24]], align 8
; CHECK-LMUL2-NEXT:    [[TMP25:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL2-NEXT:    [[TMP26:%.*]] = mul i64 [[TMP25]], 4
; CHECK-LMUL2-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP26]]
; CHECK-LMUL2-NEXT:    [[TMP27:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-LMUL2-NEXT:    br i1 [[TMP27]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; CHECK-LMUL2:       middle.block:
; CHECK-LMUL2-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT]], [[N_VEC]]
; CHECK-LMUL2-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK-LMUL2:       scalar.ph:
; CHECK-LMUL2-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-LMUL2-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK-LMUL2:       for.cond.cleanup.loopexit:
; CHECK-LMUL2-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK-LMUL2:       for.cond.cleanup:
; CHECK-LMUL2-NEXT:    ret void
; CHECK-LMUL2:       for.body:
; CHECK-LMUL2-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-LMUL2-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32*, i32** [[A]], i64 [[INDVARS_IV]]
; CHECK-LMUL2-NEXT:    [[TMP28:%.*]] = load i32*, i32** [[ARRAYIDX]], align 8
; CHECK-LMUL2-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, i32* [[TMP28]], i64 1
; CHECK-LMUL2-NEXT:    store i32* [[ADD_PTR]], i32** [[ARRAYIDX]], align 8
; CHECK-LMUL2-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-LMUL2-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-LMUL2-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]
;
; CHECK-LMUL4-LABEL: @goo(
; CHECK-LMUL4-NEXT:  entry:
; CHECK-LMUL4-NEXT:    [[CMP3:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-LMUL4-NEXT:    br i1 [[CMP3]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK-LMUL4:       for.body.preheader:
; CHECK-LMUL4-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-LMUL4-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL4-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 8
; CHECK-LMUL4-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[WIDE_TRIP_COUNT]], [[TMP1]]
; CHECK-LMUL4-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-LMUL4:       vector.ph:
; CHECK-LMUL4-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL4-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 8
; CHECK-LMUL4-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], [[TMP3]]
; CHECK-LMUL4-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; CHECK-LMUL4-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-LMUL4:       vector.body:
; CHECK-LMUL4-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-LMUL4-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 0
; CHECK-LMUL4-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL4-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 4
; CHECK-LMUL4-NEXT:    [[TMP7:%.*]] = add i64 [[TMP6]], 0
; CHECK-LMUL4-NEXT:    [[TMP8:%.*]] = mul i64 [[TMP7]], 1
; CHECK-LMUL4-NEXT:    [[TMP9:%.*]] = add i64 [[INDEX]], [[TMP8]]
; CHECK-LMUL4-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i32*, i32** [[A:%.*]], i64 [[TMP4]]
; CHECK-LMUL4-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i32*, i32** [[A]], i64 [[TMP9]]
; CHECK-LMUL4-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i32*, i32** [[TMP10]], i32 0
; CHECK-LMUL4-NEXT:    [[TMP13:%.*]] = bitcast i32** [[TMP12]] to <vscale x 4 x i32*>*
; CHECK-LMUL4-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 4 x i32*>, <vscale x 4 x i32*>* [[TMP13]], align 8
; CHECK-LMUL4-NEXT:    [[TMP14:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL4-NEXT:    [[TMP15:%.*]] = mul i32 [[TMP14]], 4
; CHECK-LMUL4-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32*, i32** [[TMP10]], i32 [[TMP15]]
; CHECK-LMUL4-NEXT:    [[TMP17:%.*]] = bitcast i32** [[TMP16]] to <vscale x 4 x i32*>*
; CHECK-LMUL4-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 4 x i32*>, <vscale x 4 x i32*>* [[TMP17]], align 8
; CHECK-LMUL4-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i32, <vscale x 4 x i32*> [[WIDE_LOAD]], i64 1
; CHECK-LMUL4-NEXT:    [[TMP19:%.*]] = getelementptr inbounds i32, <vscale x 4 x i32*> [[WIDE_LOAD1]], i64 1
; CHECK-LMUL4-NEXT:    [[TMP20:%.*]] = bitcast i32** [[TMP12]] to <vscale x 4 x i32*>*
; CHECK-LMUL4-NEXT:    store <vscale x 4 x i32*> [[TMP18]], <vscale x 4 x i32*>* [[TMP20]], align 8
; CHECK-LMUL4-NEXT:    [[TMP21:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL4-NEXT:    [[TMP22:%.*]] = mul i32 [[TMP21]], 4
; CHECK-LMUL4-NEXT:    [[TMP23:%.*]] = getelementptr inbounds i32*, i32** [[TMP10]], i32 [[TMP22]]
; CHECK-LMUL4-NEXT:    [[TMP24:%.*]] = bitcast i32** [[TMP23]] to <vscale x 4 x i32*>*
; CHECK-LMUL4-NEXT:    store <vscale x 4 x i32*> [[TMP19]], <vscale x 4 x i32*>* [[TMP24]], align 8
; CHECK-LMUL4-NEXT:    [[TMP25:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL4-NEXT:    [[TMP26:%.*]] = mul i64 [[TMP25]], 8
; CHECK-LMUL4-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP26]]
; CHECK-LMUL4-NEXT:    [[TMP27:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-LMUL4-NEXT:    br i1 [[TMP27]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; CHECK-LMUL4:       middle.block:
; CHECK-LMUL4-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT]], [[N_VEC]]
; CHECK-LMUL4-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK-LMUL4:       scalar.ph:
; CHECK-LMUL4-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-LMUL4-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK-LMUL4:       for.cond.cleanup.loopexit:
; CHECK-LMUL4-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK-LMUL4:       for.cond.cleanup:
; CHECK-LMUL4-NEXT:    ret void
; CHECK-LMUL4:       for.body:
; CHECK-LMUL4-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-LMUL4-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32*, i32** [[A]], i64 [[INDVARS_IV]]
; CHECK-LMUL4-NEXT:    [[TMP28:%.*]] = load i32*, i32** [[ARRAYIDX]], align 8
; CHECK-LMUL4-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, i32* [[TMP28]], i64 1
; CHECK-LMUL4-NEXT:    store i32* [[ADD_PTR]], i32** [[ARRAYIDX]], align 8
; CHECK-LMUL4-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-LMUL4-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-LMUL4-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]
;
; CHECK-LMUL8-LABEL: @goo(
; CHECK-LMUL8-NEXT:  entry:
; CHECK-LMUL8-NEXT:    [[CMP3:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-LMUL8-NEXT:    br i1 [[CMP3]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK-LMUL8:       for.body.preheader:
; CHECK-LMUL8-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-LMUL8-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL8-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 16
; CHECK-LMUL8-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[WIDE_TRIP_COUNT]], [[TMP1]]
; CHECK-LMUL8-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-LMUL8:       vector.ph:
; CHECK-LMUL8-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL8-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 16
; CHECK-LMUL8-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[WIDE_TRIP_COUNT]], [[TMP3]]
; CHECK-LMUL8-NEXT:    [[N_VEC:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[N_MOD_VF]]
; CHECK-LMUL8-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-LMUL8:       vector.body:
; CHECK-LMUL8-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-LMUL8-NEXT:    [[TMP4:%.*]] = add i64 [[INDEX]], 0
; CHECK-LMUL8-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL8-NEXT:    [[TMP6:%.*]] = mul i64 [[TMP5]], 8
; CHECK-LMUL8-NEXT:    [[TMP7:%.*]] = add i64 [[TMP6]], 0
; CHECK-LMUL8-NEXT:    [[TMP8:%.*]] = mul i64 [[TMP7]], 1
; CHECK-LMUL8-NEXT:    [[TMP9:%.*]] = add i64 [[INDEX]], [[TMP8]]
; CHECK-LMUL8-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i32*, i32** [[A:%.*]], i64 [[TMP4]]
; CHECK-LMUL8-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i32*, i32** [[A]], i64 [[TMP9]]
; CHECK-LMUL8-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i32*, i32** [[TMP10]], i32 0
; CHECK-LMUL8-NEXT:    [[TMP13:%.*]] = bitcast i32** [[TMP12]] to <vscale x 8 x i32*>*
; CHECK-LMUL8-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 8 x i32*>, <vscale x 8 x i32*>* [[TMP13]], align 8
; CHECK-LMUL8-NEXT:    [[TMP14:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL8-NEXT:    [[TMP15:%.*]] = mul i32 [[TMP14]], 8
; CHECK-LMUL8-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i32*, i32** [[TMP10]], i32 [[TMP15]]
; CHECK-LMUL8-NEXT:    [[TMP17:%.*]] = bitcast i32** [[TMP16]] to <vscale x 8 x i32*>*
; CHECK-LMUL8-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 8 x i32*>, <vscale x 8 x i32*>* [[TMP17]], align 8
; CHECK-LMUL8-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i32, <vscale x 8 x i32*> [[WIDE_LOAD]], i64 1
; CHECK-LMUL8-NEXT:    [[TMP19:%.*]] = getelementptr inbounds i32, <vscale x 8 x i32*> [[WIDE_LOAD1]], i64 1
; CHECK-LMUL8-NEXT:    [[TMP20:%.*]] = bitcast i32** [[TMP12]] to <vscale x 8 x i32*>*
; CHECK-LMUL8-NEXT:    store <vscale x 8 x i32*> [[TMP18]], <vscale x 8 x i32*>* [[TMP20]], align 8
; CHECK-LMUL8-NEXT:    [[TMP21:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-LMUL8-NEXT:    [[TMP22:%.*]] = mul i32 [[TMP21]], 8
; CHECK-LMUL8-NEXT:    [[TMP23:%.*]] = getelementptr inbounds i32*, i32** [[TMP10]], i32 [[TMP22]]
; CHECK-LMUL8-NEXT:    [[TMP24:%.*]] = bitcast i32** [[TMP23]] to <vscale x 8 x i32*>*
; CHECK-LMUL8-NEXT:    store <vscale x 8 x i32*> [[TMP19]], <vscale x 8 x i32*>* [[TMP24]], align 8
; CHECK-LMUL8-NEXT:    [[TMP25:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LMUL8-NEXT:    [[TMP26:%.*]] = mul i64 [[TMP25]], 16
; CHECK-LMUL8-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], [[TMP26]]
; CHECK-LMUL8-NEXT:    [[TMP27:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-LMUL8-NEXT:    br i1 [[TMP27]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP4:![0-9]+]]
; CHECK-LMUL8:       middle.block:
; CHECK-LMUL8-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT]], [[N_VEC]]
; CHECK-LMUL8-NEXT:    br i1 [[CMP_N]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK-LMUL8:       scalar.ph:
; CHECK-LMUL8-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-LMUL8-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK-LMUL8:       for.cond.cleanup.loopexit:
; CHECK-LMUL8-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK-LMUL8:       for.cond.cleanup:
; CHECK-LMUL8-NEXT:    ret void
; CHECK-LMUL8:       for.body:
; CHECK-LMUL8-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-LMUL8-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32*, i32** [[A]], i64 [[INDVARS_IV]]
; CHECK-LMUL8-NEXT:    [[TMP28:%.*]] = load i32*, i32** [[ARRAYIDX]], align 8
; CHECK-LMUL8-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, i32* [[TMP28]], i64 1
; CHECK-LMUL8-NEXT:    store i32* [[ADD_PTR]], i32** [[ARRAYIDX]], align 8
; CHECK-LMUL8-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-LMUL8-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-LMUL8-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP_LOOPEXIT]], label [[FOR_BODY]], !llvm.loop [[LOOP5:![0-9]+]]
;
entry:
  %cmp3 = icmp sgt i32 %n, 0
  br i1 %cmp3, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv
  %0 = load i32*, i32** %arrayidx, align 8
  %add.ptr = getelementptr inbounds i32, i32* %0, i64 1
  store i32* %add.ptr, i32** %arrayidx, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}
