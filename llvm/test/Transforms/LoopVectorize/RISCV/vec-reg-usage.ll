; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+experimental-v \
; RUN:   -prefer-predicate-over-epilogue=predicate-dont-vectorize -S \
; RUN:   -loop-vectorize -vector-register-width-factor=8 -debug-only=loop-vectorize 2>&1 \
; RUN:   | FileCheck %s
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+experimental-v \
; RUN:   -prefer-predicate-over-epilogue=predicate-dont-vectorize -S \
; RUN:   -loop-vectorize -debug-only=loop-vectorize 2>&1 \
; RUN:   | FileCheck %s --check-prefix=CHECK1

;Check that register usage for VF=8 is >32, thus selecting MaxVF=4.
;void highRegUage(int N, double *restrict c, double *restrict a,
;                 double *restrict b, double *restrict e, double *restrict f,
;                 double *restrict g) {
;  int i;
;  for (i = 1; i < N + 1; i++) {
;    c[i] = a[i] + b[i];
;    e[i] = a[i] - b[i] + c[i];
;    f[i] = a[i] * b[i] + c[i] - e[i];
;    g[i] = a[i] * c[i] + b[i] + e[i] - f[i];
;  }
;}

; CHECK-LABEL: highRegUage
; CHECK: LV: The Smallest and Widest types: 64 / 64 bits.
; CHECK: LV: The Widest register safe to use is: 512 bits.
; CHECK: LV(REG): Calculating max register usage:
; CHECK: LV(REG): VF = vscale x 2
; CHECK-NEXT: LV(REG): Found max usage: 2 item
; CHECK-NEXT: LV(REG): RegisterClass: Generic::ScalarRC, 2 registers
; CHECK-NEXT: LV(REG): RegisterClass: Generic::VectorRC, 10 registers
; CHECK-NEXT: LV(REG): Found invariant usage: 1 item
; CHECK-NEXT: LV(REG): RegisterClass: Generic::VectorRC, 2 registers
; CHECK-NEXT: LV(REG): VF = vscale x 4
; CHECK-NEXT: LV(REG): Found max usage: 2 item
; CHECK-NEXT: LV(REG): RegisterClass: Generic::ScalarRC, 2 registers
; CHECK-NEXT: LV(REG): RegisterClass: Generic::VectorRC, 20 registers
; CHECK-NEXT: LV(REG): Found invariant usage: 1 item
; CHECK-NEXT: LV(REG): RegisterClass: Generic::VectorRC, 4 registers
; CHECK-NEXT: LV(REG): VF = vscale x 8
; CHECK-NEXT: LV(REG): Found max usage: 2 item
; CHECK-NEXT: LV(REG): RegisterClass: Generic::ScalarRC, 2 registers
; CHECK-NEXT: LV(REG): RegisterClass: Generic::VectorRC, 40 registers
; CHECK-NEXT: LV(REG): Found invariant usage: 1 item
; CHECK-NEXT: LV(REG): RegisterClass: Generic::VectorRC, 8 registers
; CHECK: LV: Selecting VF: vscale x 4.
;
; ModuleID = './vec-reg-usage.c'
source_filename = "./vec-reg-usage.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128-v128:128:128-v256:128:128-v512:128:128-v1024:128:128"
target triple = "riscv64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind
define dso_local void @highRegUage(i32 signext %N, double* noalias nocapture %c, double* noalias nocapture readonly %a, double* noalias nocapture readonly %b, double* noalias nocapture %e, double* noalias nocapture %f, double* noalias nocapture %g) local_unnamed_addr {
; CHECK-LABEL: @highRegUage(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP_NOT75:%.*]] = icmp slt i32 [[N:%.*]], 1
; CHECK-NEXT:    br i1 [[CMP_NOT75]], label [[FOR_END:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[TMP0:%.*]] = add nuw i32 [[N]], 1
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = add nsw i64 [[WIDE_TRIP_COUNT]], -1
; CHECK-NEXT:    br i1 false, label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[IND_END:%.*]] = add i64 1, [[TMP1]]
; CHECK-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = sub i64 [[TMP1]], 1
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[OFFSET_IDX:%.*]] = add i64 1, [[INDEX]]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[OFFSET_IDX]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT1]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-NEXT:    [[STEPVEC_BASE:%.*]] = call <vscale x 4 x i64> @llvm.experimental.vector.stepvector.nxv4i64()
; CHECK-NEXT:    [[INDUCTION:%.*]] = add <vscale x 4 x i64> [[BROADCAST_SPLAT2]], [[STEPVEC_BASE]]
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 0
; CHECK-NEXT:    [[TMP4:%.*]] = add i64 [[TMP3]], 0
; CHECK-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP4]], 1
; CHECK-NEXT:    [[TMP6:%.*]] = add i64 [[OFFSET_IDX]], [[TMP5]]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT3:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[INDEX]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT4:%.*]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT3]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-NEXT:    [[STEPVECTOR:%.*]] = call <vscale x 4 x i64> @llvm.experimental.vector.stepvector.nxv4i64()
; CHECK-NEXT:    [[VEC_IV:%.*]] = add <vscale x 4 x i64> [[BROADCAST_SPLAT4]], [[STEPVECTOR]]
; CHECK-NEXT:    [[TMP7:%.*]] = icmp ule <vscale x 4 x i64> [[VEC_IV]], [[BROADCAST_SPLAT]]
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds double, double* [[A:%.*]], i64 [[TMP6]]
; CHECK-NEXT:    [[TMP9:%.*]] = sub i64 [[TMP1]], [[INDEX]]
; CHECK-NEXT:    [[TMP10:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP9]], i64 3, i64 2)
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP12:%.*]] = mul i32 [[TMP11]], 0
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds double, double* [[TMP8]], i32 [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast double* [[TMP13]] to <vscale x 4 x double>*
; CHECK-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 4 x i1> poison, i1 true, i32 0
; CHECK-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 4 x i1> [[DOTSPLATINSERT]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP15:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 4 x double> @llvm.vp.load.nxv4f64.p0nxv4f64(<vscale x 4 x double>* [[TMP14]], i32 8, <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP15]])
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds double, double* [[B:%.*]], i64 [[TMP6]]
; CHECK-NEXT:    [[TMP17:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP18:%.*]] = mul i32 [[TMP17]], 0
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr inbounds double, double* [[TMP16]], i32 [[TMP18]]
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast double* [[TMP19]] to <vscale x 4 x double>*
; CHECK-NEXT:    [[TMP21:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP_LOAD7:%.*]] = call <vscale x 4 x double> @llvm.vp.load.nxv4f64.p0nxv4f64(<vscale x 4 x double>* [[TMP20]], i32 8, <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP21]])
; CHECK-NEXT:    [[TMP22:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP:%.*]] = call <vscale x 4 x double> @llvm.vp.fadd.nxv4f64(<vscale x 4 x double> [[VP_OP_LOAD]], <vscale x 4 x double> [[VP_OP_LOAD7]], metadata !"round.tonearest", metadata !"fpexcept.ignore", <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP22]])
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr inbounds double, double* [[C:%.*]], i64 [[TMP6]]
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP25:%.*]] = mul i32 [[TMP24]], 0
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr inbounds double, double* [[TMP23]], i32 [[TMP25]]
; CHECK-NEXT:    [[TMP27:%.*]] = bitcast double* [[TMP26]] to <vscale x 4 x double>*
; CHECK-NEXT:    [[TMP28:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    call void @llvm.vp.store.nxv4f64.p0nxv4f64(<vscale x 4 x double> [[VP_OP]], <vscale x 4 x double>* [[TMP27]], i32 8, <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP28]])
; CHECK-NEXT:    [[TMP29:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP14:%.*]] = call <vscale x 4 x double> @llvm.vp.fsub.nxv4f64(<vscale x 4 x double> [[VP_OP_LOAD]], <vscale x 4 x double> [[VP_OP_LOAD7]], metadata !"round.tonearest", metadata !"fpexcept.ignore", <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP29]])
; CHECK-NEXT:    [[TMP30:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP17:%.*]] = call <vscale x 4 x double> @llvm.vp.fadd.nxv4f64(<vscale x 4 x double> [[VP_OP14]], <vscale x 4 x double> [[VP_OP]], metadata !"round.tonearest", metadata !"fpexcept.ignore", <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP30]])
; CHECK-NEXT:    [[TMP31:%.*]] = getelementptr inbounds double, double* [[E:%.*]], i64 [[TMP6]]
; CHECK-NEXT:    [[TMP32:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP33:%.*]] = mul i32 [[TMP32]], 0
; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr inbounds double, double* [[TMP31]], i32 [[TMP33]]
; CHECK-NEXT:    [[TMP35:%.*]] = bitcast double* [[TMP34]] to <vscale x 4 x double>*
; CHECK-NEXT:    [[TMP36:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    call void @llvm.vp.store.nxv4f64.p0nxv4f64(<vscale x 4 x double> [[VP_OP17]], <vscale x 4 x double>* [[TMP35]], i32 8, <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP36]])
; CHECK-NEXT:    [[TMP37:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP22:%.*]] = call <vscale x 4 x double> @llvm.vp.fmul.nxv4f64(<vscale x 4 x double> [[VP_OP_LOAD]], <vscale x 4 x double> [[VP_OP_LOAD7]], metadata !"round.tonearest", metadata !"fpexcept.ignore", <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP37]])
; CHECK-NEXT:    [[TMP38:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP25:%.*]] = call <vscale x 4 x double> @llvm.vp.fadd.nxv4f64(<vscale x 4 x double> [[VP_OP22]], <vscale x 4 x double> [[VP_OP]], metadata !"round.tonearest", metadata !"fpexcept.ignore", <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP38]])
; CHECK-NEXT:    [[TMP39:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP28:%.*]] = call <vscale x 4 x double> @llvm.vp.fsub.nxv4f64(<vscale x 4 x double> [[VP_OP25]], <vscale x 4 x double> [[VP_OP17]], metadata !"round.tonearest", metadata !"fpexcept.ignore", <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP39]])
; CHECK-NEXT:    [[TMP40:%.*]] = getelementptr inbounds double, double* [[F:%.*]], i64 [[TMP6]]
; CHECK-NEXT:    [[TMP41:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP42:%.*]] = mul i32 [[TMP41]], 0
; CHECK-NEXT:    [[TMP43:%.*]] = getelementptr inbounds double, double* [[TMP40]], i32 [[TMP42]]
; CHECK-NEXT:    [[TMP44:%.*]] = bitcast double* [[TMP43]] to <vscale x 4 x double>*
; CHECK-NEXT:    [[TMP45:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    call void @llvm.vp.store.nxv4f64.p0nxv4f64(<vscale x 4 x double> [[VP_OP28]], <vscale x 4 x double>* [[TMP44]], i32 8, <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP45]])
; CHECK-NEXT:    [[TMP46:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP33:%.*]] = call <vscale x 4 x double> @llvm.vp.fmul.nxv4f64(<vscale x 4 x double> [[VP_OP_LOAD]], <vscale x 4 x double> [[VP_OP]], metadata !"round.tonearest", metadata !"fpexcept.ignore", <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP46]])
; CHECK-NEXT:    [[TMP47:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP36:%.*]] = call <vscale x 4 x double> @llvm.vp.fadd.nxv4f64(<vscale x 4 x double> [[VP_OP_LOAD7]], <vscale x 4 x double> [[VP_OP33]], metadata !"round.tonearest", metadata !"fpexcept.ignore", <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP47]])
; CHECK-NEXT:    [[TMP48:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP39:%.*]] = call <vscale x 4 x double> @llvm.vp.fadd.nxv4f64(<vscale x 4 x double> [[VP_OP17]], <vscale x 4 x double> [[VP_OP36]], metadata !"round.tonearest", metadata !"fpexcept.ignore", <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP48]])
; CHECK-NEXT:    [[TMP49:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP42:%.*]] = call <vscale x 4 x double> @llvm.vp.fsub.nxv4f64(<vscale x 4 x double> [[VP_OP39]], <vscale x 4 x double> [[VP_OP28]], metadata !"round.tonearest", metadata !"fpexcept.ignore", <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP49]])
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr inbounds double, double* [[G:%.*]], i64 [[TMP6]]
; CHECK-NEXT:    [[TMP51:%.*]] = call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP52:%.*]] = mul i32 [[TMP51]], 0
; CHECK-NEXT:    [[TMP53:%.*]] = getelementptr inbounds double, double* [[TMP50]], i32 [[TMP52]]
; CHECK-NEXT:    [[TMP54:%.*]] = bitcast double* [[TMP53]] to <vscale x 4 x double>*
; CHECK-NEXT:    [[TMP55:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    call void @llvm.vp.store.nxv4f64.p0nxv4f64(<vscale x 4 x double> [[VP_OP42]], <vscale x 4 x double>* [[TMP54]], i32 8, <vscale x 4 x i1> [[DOTSPLAT]], i32 [[TMP55]])
; CHECK-NEXT:    [[TMP56:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP57:%.*]] = mul i64 [[TMP56]], 4
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP10]]
; CHECK-NEXT:    [[TMP58:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[TMP1]]
; CHECK-NEXT:    br i1 [[TMP58]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], [[LOOP0:!llvm.loop !.*]]
; CHECK:       middle.block:
; CHECK-NEXT:    br i1 true, label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ 1, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, double* [[A]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP59:%.*]] = load double, double* [[ARRAYIDX]], align 8
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, double* [[B]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP60:%.*]] = load double, double* [[ARRAYIDX2]], align 8
; CHECK-NEXT:    [[ADD3:%.*]] = fadd double [[TMP59]], [[TMP60]]
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds double, double* [[C]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store double [[ADD3]], double* [[ARRAYIDX5]], align 8
; CHECK-NEXT:    [[SUB:%.*]] = fsub double [[TMP59]], [[TMP60]]
; CHECK-NEXT:    [[ADD12:%.*]] = fadd double [[SUB]], [[ADD3]]
; CHECK-NEXT:    [[ARRAYIDX14:%.*]] = getelementptr inbounds double, double* [[E]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store double [[ADD12]], double* [[ARRAYIDX14]], align 8
; CHECK-NEXT:    [[MUL:%.*]] = fmul double [[TMP59]], [[TMP60]]
; CHECK-NEXT:    [[ADD21:%.*]] = fadd double [[MUL]], [[ADD3]]
; CHECK-NEXT:    [[SUB24:%.*]] = fsub double [[ADD21]], [[ADD12]]
; CHECK-NEXT:    [[ARRAYIDX26:%.*]] = getelementptr inbounds double, double* [[F]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store double [[SUB24]], double* [[ARRAYIDX26]], align 8
; CHECK-NEXT:    [[MUL31:%.*]] = fmul double [[TMP59]], [[ADD3]]
; CHECK-NEXT:    [[ADD34:%.*]] = fadd double [[TMP60]], [[MUL31]]
; CHECK-NEXT:    [[ADD37:%.*]] = fadd double [[ADD12]], [[ADD34]]
; CHECK-NEXT:    [[SUB40:%.*]] = fsub double [[ADD37]], [[SUB24]]
; CHECK-NEXT:    [[ARRAYIDX42:%.*]] = getelementptr inbounds double, double* [[G]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store double [[SUB40]], double* [[ARRAYIDX42]], align 8
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], [[LOOP2:!llvm.loop !.*]]
; CHECK:       for.end.loopexit:
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
; CHECK1-LABEL: @highRegUage(
; CHECK1-NEXT:  entry:
; CHECK1-NEXT:    [[CMP_NOT75:%.*]] = icmp slt i32 [[N:%.*]], 1
; CHECK1-NEXT:    br i1 [[CMP_NOT75]], label [[FOR_END:%.*]], label [[FOR_BODY_PREHEADER:%.*]]
; CHECK1:       for.body.preheader:
; CHECK1-NEXT:    [[TMP0:%.*]] = add nuw i32 [[N]], 1
; CHECK1-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[TMP0]] to i64
; CHECK1-NEXT:    [[TMP1:%.*]] = add nsw i64 [[WIDE_TRIP_COUNT]], -1
; CHECK1-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i64 [[TMP1]], [[TMP2]]
; CHECK1-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK1:       vector.ph:
; CHECK1-NEXT:    [[TMP3:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[TMP1]], [[TMP3]]
; CHECK1-NEXT:    [[N_VEC:%.*]] = sub i64 [[TMP1]], [[N_MOD_VF]]
; CHECK1-NEXT:    [[IND_END:%.*]] = add i64 1, [[N_VEC]]
; CHECK1-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK1:       vector.body:
; CHECK1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK1-NEXT:    [[OFFSET_IDX:%.*]] = add i64 1, [[INDEX]]
; CHECK1-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 1 x i64> poison, i64 [[OFFSET_IDX]], i32 0
; CHECK1-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 1 x i64> [[BROADCAST_SPLATINSERT]], <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer
; CHECK1-NEXT:    [[STEPVEC_BASE:%.*]] = call <vscale x 1 x i64> @llvm.experimental.vector.stepvector.nxv1i64()
; CHECK1-NEXT:    [[INDUCTION:%.*]] = add <vscale x 1 x i64> [[BROADCAST_SPLAT]], [[STEPVEC_BASE]]
; CHECK1-NEXT:    [[TMP4:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP4]], 0
; CHECK1-NEXT:    [[TMP6:%.*]] = add i64 [[TMP5]], 0
; CHECK1-NEXT:    [[TMP7:%.*]] = mul i64 [[TMP6]], 1
; CHECK1-NEXT:    [[TMP8:%.*]] = add i64 [[OFFSET_IDX]], [[TMP7]]
; CHECK1-NEXT:    [[TMP9:%.*]] = getelementptr inbounds double, double* [[A:%.*]], i64 [[TMP8]]
; CHECK1-NEXT:    [[TMP10:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP11:%.*]] = mul i32 [[TMP10]], 0
; CHECK1-NEXT:    [[TMP12:%.*]] = getelementptr inbounds double, double* [[TMP9]], i32 [[TMP11]]
; CHECK1-NEXT:    [[TMP13:%.*]] = bitcast double* [[TMP12]] to <vscale x 1 x double>*
; CHECK1-NEXT:    [[WIDE_LOAD:%.*]] = load <vscale x 1 x double>, <vscale x 1 x double>* [[TMP13]], align 8
; CHECK1-NEXT:    [[TMP14:%.*]] = getelementptr inbounds double, double* [[B:%.*]], i64 [[TMP8]]
; CHECK1-NEXT:    [[TMP15:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP16:%.*]] = mul i32 [[TMP15]], 0
; CHECK1-NEXT:    [[TMP17:%.*]] = getelementptr inbounds double, double* [[TMP14]], i32 [[TMP16]]
; CHECK1-NEXT:    [[TMP18:%.*]] = bitcast double* [[TMP17]] to <vscale x 1 x double>*
; CHECK1-NEXT:    [[WIDE_LOAD1:%.*]] = load <vscale x 1 x double>, <vscale x 1 x double>* [[TMP18]], align 8
; CHECK1-NEXT:    [[TMP19:%.*]] = fadd <vscale x 1 x double> [[WIDE_LOAD]], [[WIDE_LOAD1]]
; CHECK1-NEXT:    [[TMP20:%.*]] = getelementptr inbounds double, double* [[C:%.*]], i64 [[TMP8]]
; CHECK1-NEXT:    [[TMP21:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP22:%.*]] = mul i32 [[TMP21]], 0
; CHECK1-NEXT:    [[TMP23:%.*]] = getelementptr inbounds double, double* [[TMP20]], i32 [[TMP22]]
; CHECK1-NEXT:    [[TMP24:%.*]] = bitcast double* [[TMP23]] to <vscale x 1 x double>*
; CHECK1-NEXT:    store <vscale x 1 x double> [[TMP19]], <vscale x 1 x double>* [[TMP24]], align 8
; CHECK1-NEXT:    [[TMP25:%.*]] = fsub <vscale x 1 x double> [[WIDE_LOAD]], [[WIDE_LOAD1]]
; CHECK1-NEXT:    [[TMP26:%.*]] = fadd <vscale x 1 x double> [[TMP25]], [[TMP19]]
; CHECK1-NEXT:    [[TMP27:%.*]] = getelementptr inbounds double, double* [[E:%.*]], i64 [[TMP8]]
; CHECK1-NEXT:    [[TMP28:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP29:%.*]] = mul i32 [[TMP28]], 0
; CHECK1-NEXT:    [[TMP30:%.*]] = getelementptr inbounds double, double* [[TMP27]], i32 [[TMP29]]
; CHECK1-NEXT:    [[TMP31:%.*]] = bitcast double* [[TMP30]] to <vscale x 1 x double>*
; CHECK1-NEXT:    store <vscale x 1 x double> [[TMP26]], <vscale x 1 x double>* [[TMP31]], align 8
; CHECK1-NEXT:    [[TMP32:%.*]] = fmul <vscale x 1 x double> [[WIDE_LOAD]], [[WIDE_LOAD1]]
; CHECK1-NEXT:    [[TMP33:%.*]] = fadd <vscale x 1 x double> [[TMP32]], [[TMP19]]
; CHECK1-NEXT:    [[TMP34:%.*]] = fsub <vscale x 1 x double> [[TMP33]], [[TMP26]]
; CHECK1-NEXT:    [[TMP35:%.*]] = getelementptr inbounds double, double* [[F:%.*]], i64 [[TMP8]]
; CHECK1-NEXT:    [[TMP36:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP37:%.*]] = mul i32 [[TMP36]], 0
; CHECK1-NEXT:    [[TMP38:%.*]] = getelementptr inbounds double, double* [[TMP35]], i32 [[TMP37]]
; CHECK1-NEXT:    [[TMP39:%.*]] = bitcast double* [[TMP38]] to <vscale x 1 x double>*
; CHECK1-NEXT:    store <vscale x 1 x double> [[TMP34]], <vscale x 1 x double>* [[TMP39]], align 8
; CHECK1-NEXT:    [[TMP40:%.*]] = fmul <vscale x 1 x double> [[WIDE_LOAD]], [[TMP19]]
; CHECK1-NEXT:    [[TMP41:%.*]] = fadd <vscale x 1 x double> [[WIDE_LOAD1]], [[TMP40]]
; CHECK1-NEXT:    [[TMP42:%.*]] = fadd <vscale x 1 x double> [[TMP26]], [[TMP41]]
; CHECK1-NEXT:    [[TMP43:%.*]] = fsub <vscale x 1 x double> [[TMP42]], [[TMP34]]
; CHECK1-NEXT:    [[TMP44:%.*]] = getelementptr inbounds double, double* [[G:%.*]], i64 [[TMP8]]
; CHECK1-NEXT:    [[TMP45:%.*]] = call i32 @llvm.vscale.i32()
; CHECK1-NEXT:    [[TMP46:%.*]] = mul i32 [[TMP45]], 0
; CHECK1-NEXT:    [[TMP47:%.*]] = getelementptr inbounds double, double* [[TMP44]], i32 [[TMP46]]
; CHECK1-NEXT:    [[TMP48:%.*]] = bitcast double* [[TMP47]] to <vscale x 1 x double>*
; CHECK1-NEXT:    store <vscale x 1 x double> [[TMP43]], <vscale x 1 x double>* [[TMP48]], align 8
; CHECK1-NEXT:    [[TMP49:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP50:%.*]] = call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[INDEX_VSCALE:%.*]] = mul i64 [[TMP50]], [[TMP49]]
; CHECK1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[INDEX_VSCALE]]
; CHECK1-NEXT:    [[TMP51:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK1-NEXT:    br i1 [[TMP51]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], [[LOOP0:!llvm.loop !.*]]
; CHECK1:       middle.block:
; CHECK1-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[TMP1]], [[N_VEC]]
; CHECK1-NEXT:    br i1 [[CMP_N]], label [[FOR_END_LOOPEXIT:%.*]], label [[SCALAR_PH]]
; CHECK1:       scalar.ph:
; CHECK1-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[IND_END]], [[MIDDLE_BLOCK]] ], [ 1, [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK1:       for.body:
; CHECK1-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, double* [[A]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP52:%.*]] = load double, double* [[ARRAYIDX]], align 8
; CHECK1-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, double* [[B]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP53:%.*]] = load double, double* [[ARRAYIDX2]], align 8
; CHECK1-NEXT:    [[ADD3:%.*]] = fadd double [[TMP52]], [[TMP53]]
; CHECK1-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds double, double* [[C]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store double [[ADD3]], double* [[ARRAYIDX5]], align 8
; CHECK1-NEXT:    [[SUB:%.*]] = fsub double [[TMP52]], [[TMP53]]
; CHECK1-NEXT:    [[ADD12:%.*]] = fadd double [[SUB]], [[ADD3]]
; CHECK1-NEXT:    [[ARRAYIDX14:%.*]] = getelementptr inbounds double, double* [[E]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store double [[ADD12]], double* [[ARRAYIDX14]], align 8
; CHECK1-NEXT:    [[MUL:%.*]] = fmul double [[TMP52]], [[TMP53]]
; CHECK1-NEXT:    [[ADD21:%.*]] = fadd double [[MUL]], [[ADD3]]
; CHECK1-NEXT:    [[SUB24:%.*]] = fsub double [[ADD21]], [[ADD12]]
; CHECK1-NEXT:    [[ARRAYIDX26:%.*]] = getelementptr inbounds double, double* [[F]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store double [[SUB24]], double* [[ARRAYIDX26]], align 8
; CHECK1-NEXT:    [[MUL31:%.*]] = fmul double [[TMP52]], [[ADD3]]
; CHECK1-NEXT:    [[ADD34:%.*]] = fadd double [[TMP53]], [[MUL31]]
; CHECK1-NEXT:    [[ADD37:%.*]] = fadd double [[ADD12]], [[ADD34]]
; CHECK1-NEXT:    [[SUB40:%.*]] = fsub double [[ADD37]], [[SUB24]]
; CHECK1-NEXT:    [[ARRAYIDX42:%.*]] = getelementptr inbounds double, double* [[G]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store double [[SUB40]], double* [[ARRAYIDX42]], align 8
; CHECK1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK1-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END_LOOPEXIT]], label [[FOR_BODY]], [[LOOP2:!llvm.loop !.*]]
; CHECK1:       for.end.loopexit:
; CHECK1-NEXT:    br label [[FOR_END]]
; CHECK1:       for.end:
; CHECK1-NEXT:    ret void
;
entry:
  %cmp.not75 = icmp slt i32 %N, 1
  br i1 %cmp.not75, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add nuw i32 %N, 1
  %wide.trip.count = zext i32 %0 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 1, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %a, i64 %indvars.iv
  %1 = load double, double* %arrayidx, align 8
  %arrayidx2 = getelementptr inbounds double, double* %b, i64 %indvars.iv
  %2 = load double, double* %arrayidx2, align 8
  %add3 = fadd double %1, %2
  %arrayidx5 = getelementptr inbounds double, double* %c, i64 %indvars.iv
  store double %add3, double* %arrayidx5, align 8
  %sub = fsub double %1, %2
  %add12 = fadd double %sub, %add3
  %arrayidx14 = getelementptr inbounds double, double* %e, i64 %indvars.iv
  store double %add12, double* %arrayidx14, align 8
  %mul = fmul double %1, %2
  %add21 = fadd double %mul, %add3
  %sub24 = fsub double %add21, %add12
  %arrayidx26 = getelementptr inbounds double, double* %f, i64 %indvars.iv
  store double %sub24, double* %arrayidx26, align 8
  %mul31 = fmul double %1, %add3
  %add34 = fadd double %2, %mul31
  %add37 = fadd double %add12, %add34
  %sub40 = fsub double %add37, %sub24
  %arrayidx42 = getelementptr inbounds double, double* %g, i64 %indvars.iv
  store double %sub40, double* %arrayidx42, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
