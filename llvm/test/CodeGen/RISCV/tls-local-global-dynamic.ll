; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple riscv32 -relocation-model=pic < %s \
; RUN:     | FileCheck --check-prefix=RV32 %s
; RUN: llc -mtriple riscv64 -relocation-model=pic < %s \
; RUN:     | FileCheck --check-prefix=RV64 %s

@x = thread_local global i32 42, align 4

define void @test_1() nounwind {
; RV32-LABEL: test_1:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    addi sp, sp, -16
; RV32-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; RV32-NEXT:  .Lpcrel_hi0:
; RV32-NEXT:    auipc a0, %tls_gd_pcrel_hi(x)
; RV32-NEXT:    addi a0, a0, %pcrel_lo(.Lpcrel_hi0)
; RV32-NEXT:    call __tls_get_addr@plt
; RV32-NEXT:    lw a1, 0(a0)
; RV32-NEXT:    addi a1, a1, 1
; RV32-NEXT:    sw a1, 0(a0)
; RV32-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; RV32-NEXT:    addi sp, sp, 16
; RV32-NEXT:    ret
;
; RV64-LABEL: test_1:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    addi sp, sp, -16
; RV64-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; RV64-NEXT:  .Lpcrel_hi0:
; RV64-NEXT:    auipc a0, %tls_gd_pcrel_hi(x)
; RV64-NEXT:    addi a0, a0, %pcrel_lo(.Lpcrel_hi0)
; RV64-NEXT:    call __tls_get_addr@plt
; RV64-NEXT:    lw a1, 0(a0)
; RV64-NEXT:    addiw a1, a1, 1
; RV64-NEXT:    sw a1, 0(a0)
; RV64-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; RV64-NEXT:    addi sp, sp, 16
; RV64-NEXT:    ret
entry:
  %0 = load i32, i32* @x, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @x, align 4
  ret void
}

@y = thread_local(localdynamic) global i32 42, align 4

define void @test_2() nounwind {
; RV32-LABEL: test_2:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    addi sp, sp, -16
; RV32-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; RV32-NEXT:  .Lpcrel_hi1:
; RV32-NEXT:    auipc a0, %tls_gd_pcrel_hi(y)
; RV32-NEXT:    addi a0, a0, %pcrel_lo(.Lpcrel_hi1)
; RV32-NEXT:    call __tls_get_addr@plt
; RV32-NEXT:    lw a1, 0(a0)
; RV32-NEXT:    addi a1, a1, 1
; RV32-NEXT:    sw a1, 0(a0)
; RV32-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; RV32-NEXT:    addi sp, sp, 16
; RV32-NEXT:    ret
;
; RV64-LABEL: test_2:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    addi sp, sp, -16
; RV64-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; RV64-NEXT:  .Lpcrel_hi1:
; RV64-NEXT:    auipc a0, %tls_gd_pcrel_hi(y)
; RV64-NEXT:    addi a0, a0, %pcrel_lo(.Lpcrel_hi1)
; RV64-NEXT:    call __tls_get_addr@plt
; RV64-NEXT:    lw a1, 0(a0)
; RV64-NEXT:    addiw a1, a1, 1
; RV64-NEXT:    sw a1, 0(a0)
; RV64-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; RV64-NEXT:    addi sp, sp, 16
; RV64-NEXT:    ret
entry:
  %0 = load i32, i32* @y, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @y, align 4
  ret void
}
