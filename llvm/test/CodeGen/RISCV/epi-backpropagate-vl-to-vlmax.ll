; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple riscv64 -mattr +m,+f,+d,+a,+c,+experimental-v < %s \
; RUN:     -epi-pipeline -disable-vpred-sdags | FileCheck --check-prefix=ENABLED %s
; RUN: llc -mtriple riscv64 -mattr +m,+f,+d,+a,+c,+experimental-v < %s \
; RUN:     --epi-disable-vl-backpropagation \
; RUN:     -epi-pipeline -disable-vpred-sdags | FileCheck --check-prefix=DISABLED %s

define <vscale x 1 x i64> @test.1(<vscale x 1 x i64> %a, <vscale x 1 x i64> %b, <vscale x 1 x i64> %c, i32 %evl) nounwind
; ENABLED-LABEL: test.1:
; ENABLED:       # %bb.0:
; ENABLED-NEXT:    vsetvli zero, a0, e64,m1,ta,mu
; ENABLED-NEXT:    vadd.vv v25, v16, v17
; ENABLED-NEXT:    vadd.vv v16, v25, v18
; ENABLED-NEXT:    ret
;
; DISABLED-LABEL: test.1:
; DISABLED:       # %bb.0:
; DISABLED-NEXT:    vsetvli a1, zero, e64,m1,ta,mu
; DISABLED-NEXT:    vadd.vv v25, v16, v17
; DISABLED-NEXT:    vsetvli a0, a0, e64,m1,ta,mu
; DISABLED-NEXT:    vadd.vv v16, v25, v18
; DISABLED-NEXT:    ret
{
  %x1 = add <vscale x 1 x i64> %a, %b
  %x2 = call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> %x1, <vscale x 1 x i64> %c,
     <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> undef, i1 true, i32 0), <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer),
     i32 %evl)

  ret <vscale x 1 x i64> %x2
}

define <vscale x 1 x i64> @test.2(<vscale x 1 x i64> %a, <vscale x 1 x i64> %b, <vscale x 1 x i64> %c, i32 %evl) nounwind
; ENABLED-LABEL: test.2:
; ENABLED:       # %bb.0:
; ENABLED-NEXT:    vsetvli a1, zero, e64,m1,ta,mu
; ENABLED-NEXT:    vadd.vv v25, v16, v17
; ENABLED-NEXT:    addi a0, a0, 1
; ENABLED-NEXT:    vsetvli zero, a0, e64,m1,ta,mu
; ENABLED-NEXT:    vadd.vv v16, v25, v18
; ENABLED-NEXT:    ret
;
; DISABLED-LABEL: test.2:
; DISABLED:       # %bb.0:
; DISABLED-NEXT:    vsetvli a1, zero, e64,m1,ta,mu
; DISABLED-NEXT:    vadd.vv v25, v16, v17
; DISABLED-NEXT:    addi a0, a0, 1
; DISABLED-NEXT:    vsetvli a0, a0, e64,m1,ta,mu
; DISABLED-NEXT:    vadd.vv v16, v25, v18
; DISABLED-NEXT:    ret
{
  %x1 = add <vscale x 1 x i64> %a, %b
  %evl2 = add i32 %evl, 1
  %x2 = call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> %x1, <vscale x 1 x i64> %c,
     <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> undef, i1 true, i32 0), <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer),
     i32 %evl2)

  ret <vscale x 1 x i64> %x2
}

define <vscale x 1 x i64> @test.3(<vscale x 1 x i64> %a, <vscale x 1 x i64> %b, <vscale x 1 x i64> %c, i32 %evl) nounwind
; ENABLED-LABEL: test.3:
; ENABLED:       # %bb.0:
; ENABLED-NEXT:    addi a0, a0, 1
; ENABLED-NEXT:    vsetvli zero, a0, e64,m1,ta,mu
; ENABLED-NEXT:    vadd.vv v25, v16, v17
; ENABLED-NEXT:    vadd.vv v16, v25, v18
; ENABLED-NEXT:    ret
;
; DISABLED-LABEL: test.3:
; DISABLED:       # %bb.0:
; DISABLED-NEXT:    addi a0, a0, 1
; DISABLED-NEXT:    vsetvli a1, zero, e64,m1,ta,mu
; DISABLED-NEXT:    vadd.vv v25, v16, v17
; DISABLED-NEXT:    vsetvli a0, a0, e64,m1,ta,mu
; DISABLED-NEXT:    vadd.vv v16, v25, v18
; DISABLED-NEXT:    ret
{
  %evl2 = add i32 %evl, 1
  %x1 = add <vscale x 1 x i64> %a, %b
  %x2 = call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> %x1, <vscale x 1 x i64> %c,
     <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> undef, i1 true, i32 0), <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer),
     i32 %evl2)

  ret <vscale x 1 x i64> %x2
}

declare <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> %a, <vscale x 1 x i64> %b, <vscale x 1 x i1> %mask, i32 %evl)
