; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple riscv64 -mattr=+f,+d,+experimental-v -verify-machineinstrs < %s \
; RUN:    -epi-pipeline | FileCheck %s

define <vscale x 1 x i64> @nxv1i64(i64* %ptr, <vscale x 1 x i64> %indices, <vscale x 1 x i1> %mask, <vscale x 1 x i64> %passthru) {
; CHECK-LABEL: nxv1i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e64, m1, ta, mu
; CHECK-NEXT:    vsll.vi v8, v8, 3
; CHECK-NEXT:    vluxei64.v v9, (a0), v8, v0.t
; CHECK-NEXT:    vmv1r.v v8, v9
; CHECK-NEXT:    ret
  %1 = getelementptr i64, i64* %ptr, <vscale x 1 x i64> %indices
  %2 = call <vscale x 1 x i64> @llvm.masked.gather.nxv1i64.nxv1p0i64(<vscale x 1 x i64*> %1, i32 8, <vscale x 1 x i1> %mask, <vscale x 1 x i64> %passthru)
  ret <vscale x 1 x i64> %2
}

; FIXME: Enable when gather of element types <i64 is supported.

;define <vscale x 2 x float> @nxv2f32(float* %ptr, <vscale x 2 x i32> %indices, <vscale x 2 x i1> %mask, <vscale x 2 x float> %passthru) {
;  %1 = getelementptr float, float* %ptr, <vscale x 2 x i32> %indices
;  %2 = call <vscale x 2 x float> @llvm.masked.gather.nxv2f32.nxv2p0f32(<vscale x 2 x float*> %1, i32 4, <vscale x 2 x i1> %mask, <vscale x 2 x float> %passthru)
;  ret <vscale x 2 x float> %2
;}

;define <vscale x 16 x i8> @nxv16i8(i8* %ptr, <vscale x 16 x i8> %indices, <vscale x 16 x i1> %mask, <vscale x 16 x i8> %passthru) {
;  %1 = getelementptr i8, i8* %ptr, <vscale x 16 x i8> %indices
;  %2 = call <vscale x 16 x i8> @llvm.masked.gather.nxv16i8.nxv16p0i8(<vscale x 16 x i8*> %1, i32 1, <vscale x 16 x i1> %mask, <vscale x 16 x i8> %passthru)
;  ret <vscale x 16 x i8> %2
;}

;define <vscale x 16 x i16> @nxv16i16(i16* %ptr, <vscale x 16 x i16> %indices, <vscale x 16 x i1> %mask, <vscale x 16 x i16> %passthru) {
;  %1 = getelementptr i16, i16* %ptr, <vscale x 16 x i16> %indices
;  %2 = call <vscale x 16 x i16> @llvm.masked.gather.nxv16i16.nxv16p0i16(<vscale x 16 x i16*> %1, i32 2, <vscale x 16 x i1> %mask, <vscale x 16 x i16> %passthru)
;  ret <vscale x 16 x i16> %2
;}

define <vscale x 8 x double> @nxv8f64(double* %ptr, <vscale x 8 x i64> %indices, <vscale x 8 x i1> %mask, <vscale x 8 x double> %passthru) {
; CHECK-LABEL: nxv8f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e64, m8, ta, mu
; CHECK-NEXT:    vsll.vi v8, v8, 3
; CHECK-NEXT:    vluxei64.v v16, (a0), v8, v0.t
; CHECK-NEXT:    vmv8r.v v8, v16
; CHECK-NEXT:    ret
  %1 = getelementptr double, double* %ptr, <vscale x 8 x i64> %indices
  %2 = call <vscale x 8 x double> @llvm.masked.gather.nxv8f64.nxv8p0f64(<vscale x 8 x double*> %1, i32 8, <vscale x 8 x i1> %mask, <vscale x 8 x double> %passthru)
  ret <vscale x 8 x double> %2
}

define <vscale x 2 x i32> @nxv2xi32(i32* %ptr, <vscale x 2 x i64> %indices, <vscale x 2 x i1> %mask, <vscale x 2 x i32> %passthru) {
; CHECK-LABEL: nxv2xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e64, m2, ta, mu
; CHECK-NEXT:    vsll.vi v8, v8, 2
; CHECK-NEXT:    vsetvli zero, zero, e32, m1, ta, mu
; CHECK-NEXT:    vluxei64.v v10, (a0), v8, v0.t
; CHECK-NEXT:    vmv1r.v v8, v10
; CHECK-NEXT:    ret
  %1 = getelementptr i32, i32* %ptr, <vscale x 2 x i64> %indices
  %2 = call <vscale x 2 x i32> @llvm.masked.gather.nxv2i32.nxv2p0i32(<vscale x 2 x i32*> %1, i32 4, <vscale x 2 x i1> %mask, <vscale x 2 x i32> %passthru)
  ret <vscale x 2 x i32> %2
}

define <vscale x 2 x i32> @nxv2xi32_full(<vscale x 2 x i32*> %ptr, <vscale x 2 x i1> %mask, <vscale x 2 x i32> %passthru) {
; CHECK-LABEL: nxv2xi32_full:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli a0, zero, e32, m1, ta, mu
; CHECK-NEXT:    vluxei64.v v10, (zero), v8, v0.t
; CHECK-NEXT:    vmv1r.v v8, v10
; CHECK-NEXT:    ret
entry:
  %x = call <vscale x 2 x i32> @llvm.masked.gather.nxv2i32.nxv2p0i32(<vscale x 2 x i32*> %ptr, i32 4,
          <vscale x 2 x i1> %mask,
          <vscale x 2 x i32> %passthru)
  ret <vscale x 2 x i32> %x
}

; LMUL=1
declare <vscale x 1 x i64> @llvm.masked.gather.nxv1i64.nxv1p0i64(<vscale x 1 x i64*>, i32, <vscale x 1 x i1>, <vscale x 1 x i64>)
declare <vscale x 2 x i32> @llvm.masked.gather.nxv2i32.nxv2p0i32(<vscale x 2 x i32*>, i32, <vscale x 2 x i1>, <vscale x 2 x i32>)
declare <vscale x 2 x float> @llvm.masked.gather.nxv2f32.nxv2p0f32(<vscale x 2 x float*>, i32, <vscale x 2 x i1>, <vscale x 2 x float>)

; LMUL>1
declare <vscale x 16 x i8> @llvm.masked.gather.nxv16i8.nxv16p0i8(<vscale x 16 x i8*>, i32, <vscale x 16 x i1>, <vscale x 16 x i8>)
declare <vscale x 16 x i16> @llvm.masked.gather.nxv16i16.nxv16p0i16(<vscale x 16 x i16*>, i32, <vscale x 16 x i1>, <vscale x 16 x i16>)
declare <vscale x 8 x double> @llvm.masked.gather.nxv8f64.nxv8p0f64(<vscale x 8 x double*>, i32, <vscale x 8 x i1>, <vscale x 8 x double>)
