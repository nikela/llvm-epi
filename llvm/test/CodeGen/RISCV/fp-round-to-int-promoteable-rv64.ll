; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64-unknown-linux-gnu -mattr=+m,+a,+f,+d \
; RUN:   --target-abi=lp64d < %s | FileCheck %s

; FIXME - Add tests for the constrained versions!

define i32 @lround_i32_f32(float %x) nounwind {
; CHECK-LABEL: lround_i32_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcvt.w.s a0, fa0, rmm
; CHECK-NEXT:    ret
   %y = call i32 @llvm.lround.i32.f32(float %x)
   ret i32 %y
}

define i32 @lround_i32_f64(double %x) nounwind {
; CHECK-LABEL: lround_i32_f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcvt.w.d a0, fa0, rmm
; CHECK-NEXT:    ret
    %y = call i32 @llvm.lround.i32.f64(double %x)
    ret i32 %y
}

declare i32 @llvm.lround.i32.f32(float %x)
declare i32 @llvm.lround.i32.f64(double %x)

define i32 @lrint_i32_f32(float %x) nounwind {
; CHECK-LABEL: lrint_i32_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcvt.w.s a0, fa0
; CHECK-NEXT:    ret
   %y = call i32 @llvm.lrint.i32.f32(float %x)
   ret i32 %y
}

define i32 @lrint_i32_f64(double %x) nounwind {
; CHECK-LABEL: lrint_i32_f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcvt.w.d a0, fa0
; CHECK-NEXT:    ret
    %y = call i32 @llvm.lrint.i32.f64(double %x)
    ret i32 %y
}

declare i32 @llvm.lrint.i32.f32(float %x)
declare i32 @llvm.lrint.i32.f64(double %x)

; i16 cases

define i16 @lround_i16_f32(float %x) nounwind {
; CHECK-LABEL: lround_i16_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcvt.w.s a0, fa0, rmm
; CHECK-NEXT:    ret
   %y = call i16 @llvm.lround.i16.f32(float %x)
   ret i16 %y
}

define i16 @lround_i16_f64(double %x) nounwind {
; CHECK-LABEL: lround_i16_f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcvt.w.d a0, fa0, rmm
; CHECK-NEXT:    ret
    %y = call i16 @llvm.lround.i16.f64(double %x)
    ret i16 %y
}

declare i16 @llvm.lround.i16.f32(float %x)
declare i16 @llvm.lround.i16.f64(double %x)

define i16 @lrint_i16_f32(float %x) nounwind {
; CHECK-LABEL: lrint_i16_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcvt.w.s a0, fa0
; CHECK-NEXT:    ret
   %y = call i16 @llvm.lrint.i16.f32(float %x)
   ret i16 %y
}

define i16 @lrint_i16_f64(double %x) nounwind {
; CHECK-LABEL: lrint_i16_f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcvt.w.d a0, fa0
; CHECK-NEXT:    ret
    %y = call i16 @llvm.lrint.i16.f64(double %x)
    ret i16 %y
}

declare i16 @llvm.lrint.i16.f32(float %x)
declare i16 @llvm.lrint.i16.f64(double %x)

; i8 cases

define i8 @lround_i8_f32(float %x) nounwind {
; CHECK-LABEL: lround_i8_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcvt.w.s a0, fa0, rmm
; CHECK-NEXT:    ret
   %y = call i8 @llvm.lround.i8.f32(float %x)
   ret i8 %y
}

define i8 @lround_i8_f64(double %x) nounwind {
; CHECK-LABEL: lround_i8_f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcvt.w.d a0, fa0, rmm
; CHECK-NEXT:    ret
    %y = call i8 @llvm.lround.i8.f64(double %x)
    ret i8 %y
}

declare i8 @llvm.lround.i8.f32(float %x)
declare i8 @llvm.lround.i8.f64(double %x)

define i8 @lrint_i8_f32(float %x) nounwind {
; CHECK-LABEL: lrint_i8_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcvt.w.s a0, fa0
; CHECK-NEXT:    ret
   %y = call i8 @llvm.lrint.i8.f32(float %x)
   ret i8 %y
}

define i8 @lrint_i8_f64(double %x) nounwind {
; CHECK-LABEL: lrint_i8_f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fcvt.w.d a0, fa0
; CHECK-NEXT:    ret
    %y = call i8 @llvm.lrint.i8.f64(double %x)
    ret i8 %y
}

declare i8 @llvm.lrint.i8.f32(float %x)
declare i8 @llvm.lrint.i8.f64(double %x)
