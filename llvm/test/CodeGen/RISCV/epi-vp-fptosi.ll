; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+c,+v < %s -epi-pipeline | \
; RUN:     FileCheck %s

define <vscale x 2 x i32> @fptosi.i32.f32(<vscale x 2 x float> %a, i32 zeroext %gvl)
; CHECK-LABEL: fptosi.i32.f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; CHECK-NEXT:    vfcvt.rtz.x.f.v v8, v8
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i32> @llvm.vp.fptosi.nxv2i32.nxv2f32(<vscale x 2 x float> %a,
            <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> undef, i1 true, i32 0), <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer),
            i32 %gvl)
  ret <vscale x 2 x i32> %b
}

define <vscale x 2 x i32> @fptosi.i32.f32.mask(<vscale x 2 x float> %a, <vscale x 2 x i1> %mask, i32 zeroext %gvl)
; CHECK-LABEL: fptosi.i32.f32.mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; CHECK-NEXT:    vfcvt.rtz.x.f.v v8, v8, v0.t
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i32> @llvm.vp.fptosi.nxv2i32.nxv2f32(
               <vscale x 2 x float> %a,
               <vscale x 2 x i1> %mask,
               i32 %gvl)
  ret <vscale x 2 x i32> %b
}

declare <vscale x 2 x i32> @llvm.vp.fptosi.nxv2i32.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x i1> %mask, i32 %gvl)

define <vscale x 2 x i64> @fptosi.i64.f32(<vscale x 2 x float> %a, i32 zeroext %gvl)
; CHECK-LABEL: fptosi.i64.f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; CHECK-NEXT:    vfwcvt.rtz.x.f.v v10, v8
; CHECK-NEXT:    vmv2r.v v8, v10
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i64> @llvm.vp.fptosi.nxv2i64.nxv2f32(<vscale x 2 x float> %a,
            <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> undef, i1 true, i32 0), <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer),
            i32 %gvl)
  ret <vscale x 2 x i64> %b
}

define <vscale x 2 x i64> @fptosi.i64.f32.mask(<vscale x 2 x float> %a, <vscale x 2 x i1> %mask, i32 zeroext %gvl)
; CHECK-LABEL: fptosi.i64.f32.mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; CHECK-NEXT:    vfwcvt.rtz.x.f.v v10, v8, v0.t
; CHECK-NEXT:    vmv2r.v v8, v10
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i64> @llvm.vp.fptosi.nxv2i64.nxv2f32(
               <vscale x 2 x float> %a,
               <vscale x 2 x i1> %mask,
               i32 %gvl)
  ret <vscale x 2 x i64> %b
}

declare <vscale x 2 x i64> @llvm.vp.fptosi.nxv2i64.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x i1> %mask, i32 %gvl)

define <vscale x 2 x i32> @fptosi.i32.f64(<vscale x 2 x double> %a, i32 zeroext %gvl)
; CHECK-LABEL: fptosi.i32.f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; CHECK-NEXT:    vfncvt.rtz.x.f.w v10, v8
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i32> @llvm.vp.fptosi.nxv2i32.nxv2f64(<vscale x 2 x double> %a,
            <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> undef, i1 true, i32 0), <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer),
            i32 %gvl)
  ret <vscale x 2 x i32> %b
}

define <vscale x 2 x i32> @fptosi.i32.f64.mask(<vscale x 2 x double> %a, <vscale x 2 x i1> %mask, i32 zeroext %gvl)
; CHECK-LABEL: fptosi.i32.f64.mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; CHECK-NEXT:    vfncvt.rtz.x.f.w v10, v8, v0.t
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i32> @llvm.vp.fptosi.nxv2i32.nxv2f64(
               <vscale x 2 x double> %a,
               <vscale x 2 x i1> %mask,
               i32 %gvl)
  ret <vscale x 2 x i32> %b
}

declare <vscale x 2 x i32> @llvm.vp.fptosi.nxv2i32.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x i1> %mask, i32 %gvl)

define <vscale x 4 x i8> @test_vp_fptosi_nxv4i8_nxv4f32(<vscale x 4 x float> %a, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_fptosi_nxv4i8_nxv4f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, m1, ta, ma
; CHECK-NEXT:    vfncvt.rtz.x.f.w v10, v8
; CHECK-NEXT:    vsetvli zero, zero, e8, mf2, ta, ma
; CHECK-NEXT:    vnsrl.wi v8, v10, 0
; CHECK-NEXT:    ret
    %m.first = insertelement <vscale x 4 x i1> undef, i1 1, i32 0
    %m.splat = shufflevector <vscale x 4 x i1> %m.first, <vscale x 4 x i1> undef, <vscale x 4 x i32> zeroinitializer
    %x = call <vscale x 4 x i8> @llvm.vp.fptosi.nxv4i8.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x i1> %m.splat, i32 %evl)
    ret <vscale x 4 x i8> %x
}

define <vscale x 4 x i8> @test_vp_fptosi_nxv4i8_nxv4f32_mask(<vscale x 4 x float> %a, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_fptosi_nxv4i8_nxv4f32_mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, m1, ta, ma
; CHECK-NEXT:    vfncvt.rtz.x.f.w v10, v8, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e8, mf2, ta, ma
; CHECK-NEXT:    vnsrl.wi v8, v10, 0, v0.t
; CHECK-NEXT:    ret
    %x = call <vscale x 4 x i8> @llvm.vp.fptosi.nxv4i8.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x i1> %m, i32 %evl)
    ret <vscale x 4 x i8> %x
}

define <vscale x 4 x i8> @test_vp_fptosi_nxv4i8_nxv4f64(<vscale x 4 x double> %a, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_fptosi_nxv4i8_nxv4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; CHECK-NEXT:    vfncvt.rtz.x.f.w v12, v8
; CHECK-NEXT:    vsetvli zero, zero, e16, m1, ta, ma
; CHECK-NEXT:    vnsrl.wi v8, v12, 0
; CHECK-NEXT:    vsetvli zero, zero, e8, mf2, ta, ma
; CHECK-NEXT:    vnsrl.wi v8, v8, 0
; CHECK-NEXT:    ret
    %m.first = insertelement <vscale x 4 x i1> undef, i1 1, i32 0
    %m.splat = shufflevector <vscale x 4 x i1> %m.first, <vscale x 4 x i1> undef, <vscale x 4 x i32> zeroinitializer
    %x = call <vscale x 4 x i8> @llvm.vp.fptosi.nxv4i8.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x i1> %m.splat, i32 %evl)
    ret <vscale x 4 x i8> %x
}

define <vscale x 4 x i8> @test_vp_fptosi_nxv4i8_nxv4f64_mask(<vscale x 4 x double> %a, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_fptosi_nxv4i8_nxv4f64_mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; CHECK-NEXT:    vfncvt.rtz.x.f.w v12, v8, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e16, m1, ta, ma
; CHECK-NEXT:    vnsrl.wi v8, v12, 0, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e8, mf2, ta, ma
; CHECK-NEXT:    vnsrl.wi v8, v8, 0, v0.t
; CHECK-NEXT:    ret
    %x = call <vscale x 4 x i8> @llvm.vp.fptosi.nxv4i8.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x i1> %m, i32 %evl)
    ret <vscale x 4 x i8> %x
}

define <vscale x 4 x i16> @test_vp_fptosi_nxv4i16_nxv4f64(<vscale x 4 x double> %a, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_fptosi_nxv4i16_nxv4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; CHECK-NEXT:    vfncvt.rtz.x.f.w v12, v8
; CHECK-NEXT:    vsetvli zero, zero, e16, m1, ta, ma
; CHECK-NEXT:    vnsrl.wi v8, v12, 0
; CHECK-NEXT:    ret
    %m.first = insertelement <vscale x 4 x i1> undef, i1 1, i32 0
    %m.splat = shufflevector <vscale x 4 x i1> %m.first, <vscale x 4 x i1> undef, <vscale x 4 x i32> zeroinitializer
    %x = call <vscale x 4 x i16> @llvm.vp.fptosi.nxv4i16.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x i1> %m.splat, i32 %evl)
    ret <vscale x 4 x i16> %x
}

define <vscale x 4 x i16> @test_vp_fptosi_nxv4i16_nxv4f64_mask(<vscale x 4 x double> %a, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_fptosi_nxv4i16_nxv4f64_mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; CHECK-NEXT:    vfncvt.rtz.x.f.w v12, v8, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e16, m1, ta, ma
; CHECK-NEXT:    vnsrl.wi v8, v12, 0, v0.t
; CHECK-NEXT:    ret
    %x = call <vscale x 4 x i16> @llvm.vp.fptosi.nxv4i16.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x i1> %m, i32 %evl)
    ret <vscale x 4 x i16> %x
}

declare <vscale x 4 x i8> @llvm.vp.fptosi.nxv4i8.nxv4f32(<vscale x 4 x float> %op, <vscale x 4 x i1> %mask, i32 %evl)
declare <vscale x 4 x i8> @llvm.vp.fptosi.nxv4i8.nxv4f64(<vscale x 4 x double> %op, <vscale x 4 x i1> %mask, i32 %evl)
declare <vscale x 4 x i16> @llvm.vp.fptosi.nxv4i16.nxv4f64(<vscale x 4 x double> %op, <vscale x 4 x i1> %mask, i32 %evl)
