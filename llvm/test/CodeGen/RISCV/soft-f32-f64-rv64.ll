; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+f -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RISCV32F
; RUN: llc -mtriple=riscv32 -mattr=+d -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RISCV32D
; RUN: llc -mtriple=riscv64 -mattr=+f -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RISCV64F
; RUN: llc -mtriple=riscv64 -mattr=+d -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RISCV64D

define double @foo_double(double %a, double %b) nounwind {
; RISCV32F-LABEL: foo_double:
; RISCV32F:       # %bb.0:
; RISCV32F-NEXT:    addi sp, sp, -16
; RISCV32F-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; RISCV32F-NEXT:    call __adddf3@plt
; RISCV32F-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; RISCV32F-NEXT:    addi sp, sp, 16
; RISCV32F-NEXT:    ret
;
; RISCV32D-LABEL: foo_double:
; RISCV32D:       # %bb.0:
; RISCV32D-NEXT:    fadd.d fa0, fa0, fa1
; RISCV32D-NEXT:    ret
;
; RISCV64F-LABEL: foo_double:
; RISCV64F:       # %bb.0:
; RISCV64F-NEXT:    addi sp, sp, -16
; RISCV64F-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; RISCV64F-NEXT:    call __adddf3@plt
; RISCV64F-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; RISCV64F-NEXT:    addi sp, sp, 16
; RISCV64F-NEXT:    ret
;
; RISCV64D-LABEL: foo_double:
; RISCV64D:       # %bb.0:
; RISCV64D-NEXT:    fadd.d fa0, fa0, fa1
; RISCV64D-NEXT:    ret
    %1 = fadd double %a, %b
    ret double %1
}

define float @foo_float(float %a, float %b) nounwind {
; RISCV32F-LABEL: foo_float:
; RISCV32F:       # %bb.0:
; RISCV32F-NEXT:    fmv.w.x ft0, a1
; RISCV32F-NEXT:    fmv.w.x ft1, a0
; RISCV32F-NEXT:    fadd.s ft0, ft1, ft0
; RISCV32F-NEXT:    fmv.x.w a0, ft0
; RISCV32F-NEXT:    ret
;
; RISCV32D-LABEL: foo_float:
; RISCV32D:       # %bb.0:
; RISCV32D-NEXT:    fadd.s fa0, fa0, fa1
; RISCV32D-NEXT:    ret
;
; RISCV64F-LABEL: foo_float:
; RISCV64F:       # %bb.0:
; RISCV64F-NEXT:    fmv.w.x ft0, a1
; RISCV64F-NEXT:    fmv.w.x ft1, a0
; RISCV64F-NEXT:    fadd.s ft0, ft1, ft0
; RISCV64F-NEXT:    fmv.x.w a0, ft0
; RISCV64F-NEXT:    ret
;
; RISCV64D-LABEL: foo_float:
; RISCV64D:       # %bb.0:
; RISCV64D-NEXT:    fadd.s fa0, fa0, fa1
; RISCV64D-NEXT:    ret
    %1 = fadd float %a, %b
    ret float %1
}
