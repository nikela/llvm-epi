; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+v,+f,+d -target-abi lp64d \
; RUN:    -verify-machineinstrs < %s -epi-pipeline | FileCheck %s

define <vscale x 1 x i64> @insert_nxv1i64(<vscale x 1 x i64> %merge, i64 %e, i64 %idx)
; CHECK-LABEL: insert_nxv1i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a2, zero, e64, m1, ta, ma
; CHECK-NEXT:    vmv.s.x v9, a0
; CHECK-NEXT:    addi a0, a1, 1
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, tu, ma
; CHECK-NEXT:    vslideup.vx v8, v9, a1
; CHECK-NEXT:    ret
{
  %v = insertelement <vscale x 1 x i64> %merge, i64 %e, i64 %idx
  ret <vscale x 1 x i64> %v
}

define <vscale x 2 x i32> @insert_nxv2i32(<vscale x 2 x i32> %merge, i32 %e, i64 %idx)
; CHECK-LABEL: insert_nxv2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a2, zero, e32, m1, ta, ma
; CHECK-NEXT:    vmv.s.x v9, a0
; CHECK-NEXT:    addi a0, a1, 1
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, tu, ma
; CHECK-NEXT:    vslideup.vx v8, v9, a1
; CHECK-NEXT:    ret
{
  %v = insertelement <vscale x 2 x i32> %merge, i32 %e, i64 %idx
  ret <vscale x 2 x i32> %v
}

define <vscale x 2 x i64> @insert_nxv2i64(<vscale x 2 x i64> %merge, i64 %e, i64 %idx)
; CHECK-LABEL: insert_nxv2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a2, zero, e64, m1, ta, ma
; CHECK-NEXT:    vmv.s.x v10, a0
; CHECK-NEXT:    addi a0, a1, 1
; CHECK-NEXT:    vsetvli zero, a0, e64, m2, tu, ma
; CHECK-NEXT:    vslideup.vx v8, v10, a1
; CHECK-NEXT:    ret
{
  %v = insertelement <vscale x 2 x i64> %merge, i64 %e, i64 %idx
  ret <vscale x 2 x i64> %v
}

define <vscale x 1 x double> @insert_nxv1f64(<vscale x 1 x double> %merge, double %e, i64 %idx)
; CHECK-LABEL: insert_nxv1f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e64, m1, ta, ma
; CHECK-NEXT:    vfmv.s.f v9, fa0
; CHECK-NEXT:    addi a1, a0, 1
; CHECK-NEXT:    vsetvli zero, a1, e64, m1, tu, ma
; CHECK-NEXT:    vslideup.vx v8, v9, a0
; CHECK-NEXT:    ret
{
  %v = insertelement <vscale x 1 x double> %merge, double %e, i64 %idx
  ret <vscale x 1 x double> %v
}

define <vscale x 2 x float> @insert_nxv2f32(<vscale x 2 x float> %merge, float %e, i64 %idx)
; CHECK-LABEL: insert_nxv2f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e32, m1, ta, ma
; CHECK-NEXT:    vfmv.s.f v9, fa0
; CHECK-NEXT:    addi a1, a0, 1
; CHECK-NEXT:    vsetvli zero, a1, e32, m1, tu, ma
; CHECK-NEXT:    vslideup.vx v8, v9, a0
; CHECK-NEXT:    ret
{
  %v = insertelement <vscale x 2 x float> %merge, float %e, i64 %idx
  ret <vscale x 2 x float> %v
}

define <vscale x 2 x double> @insert_nxv2f64(<vscale x 2 x double> %merge, double %e, i64 %idx)
; CHECK-LABEL: insert_nxv2f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e64, m1, ta, ma
; CHECK-NEXT:    vfmv.s.f v10, fa0
; CHECK-NEXT:    addi a1, a0, 1
; CHECK-NEXT:    vsetvli zero, a1, e64, m2, tu, ma
; CHECK-NEXT:    vslideup.vx v8, v10, a0
; CHECK-NEXT:    ret
{
  %v = insertelement <vscale x 2 x double> %merge, double %e, i64 %idx
  ret <vscale x 2 x double> %v
}

define <vscale x 4 x float> @insert_nxv4f32(<vscale x 4 x float> %merge, float %e, i64 %idx)
; CHECK-LABEL: insert_nxv4f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e32, m1, ta, ma
; CHECK-NEXT:    vfmv.s.f v10, fa0
; CHECK-NEXT:    addi a1, a0, 1
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, tu, ma
; CHECK-NEXT:    vslideup.vx v8, v10, a0
; CHECK-NEXT:    ret
{
  %v = insertelement <vscale x 4 x float> %merge, float %e, i64 %idx
  ret <vscale x 4 x float> %v
}
