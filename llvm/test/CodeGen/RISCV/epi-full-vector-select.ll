; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+f,+d,+experimental-v -verify-machineinstrs -O0 \
; RUN:    < %s -epi-pipeline | FileCheck --check-prefix=CHECK-O0 %s
; RUN: llc -mtriple=riscv64 -mattr=+f,+d,+experimental-v -verify-machineinstrs -O2 \
; RUN:    < %s -epi-pipeline | FileCheck --check-prefix=CHECK-O2 %s

@scratch = global i8 0, align 16

define void @test_select_int(<vscale x 1 x i64> %a, <vscale x 1 x i64> %b, <vscale x 1 x i1> %m) nounwind {
; CHECK-O0-LABEL: test_select_int:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    vsetvli a1, zero, e64,m1,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O0-NEXT:    vs1r.v v25, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_int:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a0, %hi(scratch)
; CHECK-O2-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O2-NEXT:    vsetvli a1, zero, e64,m1,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O2-NEXT:    vs1r.v v25, (a0)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 1 x i64>*

  %select = select <vscale x 1 x i1> %m, <vscale x 1 x i64> %a, <vscale x 1 x i64> %b
  store <vscale x 1 x i64> %select, <vscale x 1 x i64>* %store_addr

  ret void
}

define void @test_select_int_2(<vscale x 2 x i32> %a, <vscale x 2 x i32> %b, <vscale x 2 x i1> %m) nounwind {
; CHECK-O0-LABEL: test_select_int_2:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    vsetvli a1, zero, e32,m1,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O0-NEXT:    vs1r.v v25, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_int_2:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a0, %hi(scratch)
; CHECK-O2-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O2-NEXT:    vsetvli a1, zero, e32,m1,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O2-NEXT:    vs1r.v v25, (a0)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x i32>*

  %select = select <vscale x 2 x i1> %m, <vscale x 2 x i32> %a, <vscale x 2 x i32> %b
  store <vscale x 2 x i32> %select, <vscale x 2 x i32>* %store_addr

  ret void
}

define void @test_select_int_3(<vscale x 2 x i64> %a, <vscale x 2 x i64> %b, <vscale x 2 x i1> %m) nounwind {
; CHECK-O0-LABEL: test_select_int_3:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    vsetvli a1, zero, e64,m2,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v26, v10, v8, v0
; CHECK-O0-NEXT:    vs2r.v v26, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_int_3:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a0, %hi(scratch)
; CHECK-O2-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O2-NEXT:    vsetvli a1, zero, e64,m2,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v26, v10, v8, v0
; CHECK-O2-NEXT:    vs2r.v v26, (a0)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x i64>*

  %select = select <vscale x 2 x i1> %m, <vscale x 2 x i64> %a, <vscale x 2 x i64> %b
  store <vscale x 2 x i64> %select, <vscale x 2 x i64>* %store_addr

  ret void
}

define void @test_select_fp(<vscale x 1 x double> %a, <vscale x 1 x double> %b, <vscale x 1 x i1> %m) nounwind {
; CHECK-O0-LABEL: test_select_fp:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    vsetvli a1, zero, e64,m1,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O0-NEXT:    vs1r.v v25, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_fp:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a0, %hi(scratch)
; CHECK-O2-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O2-NEXT:    vsetvli a1, zero, e64,m1,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O2-NEXT:    vs1r.v v25, (a0)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 1 x double>*

  %select = select <vscale x 1 x i1> %m, <vscale x 1 x double> %a, <vscale x 1 x double> %b
  store <vscale x 1 x double> %select, <vscale x 1 x double>* %store_addr

  ret void
}

define void @test_select_fp_2(<vscale x 2 x float> %a, <vscale x 2 x float> %b, <vscale x 2 x i1> %m) nounwind {
; CHECK-O0-LABEL: test_select_fp_2:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    vsetvli a1, zero, e32,m1,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O0-NEXT:    vs1r.v v25, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_fp_2:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a0, %hi(scratch)
; CHECK-O2-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O2-NEXT:    vsetvli a1, zero, e32,m1,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O2-NEXT:    vs1r.v v25, (a0)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x float>*

  %select = select <vscale x 2 x i1> %m, <vscale x 2 x float> %a, <vscale x 2 x float> %b
  store <vscale x 2 x float> %select, <vscale x 2 x float>* %store_addr

  ret void
}

define void @test_select_fp_3(<vscale x 2 x double> %a, <vscale x 2 x double> %b, <vscale x 2 x i1> %m) nounwind {
; CHECK-O0-LABEL: test_select_fp_3:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    vsetvli a1, zero, e64,m2,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v26, v10, v8, v0
; CHECK-O0-NEXT:    vs2r.v v26, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_fp_3:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a0, %hi(scratch)
; CHECK-O2-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O2-NEXT:    vsetvli a1, zero, e64,m2,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v26, v10, v8, v0
; CHECK-O2-NEXT:    vs2r.v v26, (a0)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x double>*

  %select = select <vscale x 2 x i1> %m, <vscale x 2 x double> %a, <vscale x 2 x double> %b
  store <vscale x 2 x double> %select, <vscale x 2 x double>* %store_addr

  ret void
}

; FIXME enable when whole-vector mask select operations are supported.
;define void @test_select_mask(<vscale x 1 x i1> %a, <vscale x 1 x i1> %b, <vscale x 1 x i1> %m) nounwind {
;  %store_addr = bitcast i8* @scratch to <vscale x 1 x i1>*
;
;  %select = select <vscale x 1 x i1> %m, <vscale x 1 x i1> %a, <vscale x 1 x i1> %b
;  store <vscale x 1 x i1> %select, <vscale x 1 x i1>* %store_addr
;
;  ret void
;}

;define void @test_select_mask_2(<vscale x 2 x i1> %a, <vscale x 2 x i1> %b, <vscale x 2 x i1> %m) nounwind {
;  %store_addr = bitcast i8* @scratch to <vscale x 2 x i1>*
;
;  %select = select <vscale x 2 x i1> %m, <vscale x 2 x i1> %a, <vscale x 2 x i1> %b
;  store <vscale x 2 x i1> %select, <vscale x 2 x i1>* %store_addr
;
;  ret void
;}

;define void @test_select_mask_3(<vscale x 2 x i1> %a, <vscale x 2 x i1> %b, <vscale x 2 x i1> %m) nounwind {
;  %store_addr = bitcast i8* @scratch to <vscale x 2 x i1>*
;
;  %select = select <vscale x 2 x i1> %m, <vscale x 2 x i1> %a, <vscale x 2 x i1> %b
;  store <vscale x 2 x i1> %select, <vscale x 2 x i1>* %store_addr
;
;  ret void
;}

define void @test_select_scalar_int(<vscale x 1 x i64> %a, <vscale x 1 x i64> %b, i1 zeroext %m) nounwind {
; CHECK-O0-LABEL: test_select_scalar_int:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    mv a2, a0
; CHECK-O0-NEXT:    # kill: def $x10 killed $x12
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    mv a1, zero
; CHECK-O0-NEXT:    sub a1, a1, a2
; CHECK-O0-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O0-NEXT:    vmv.v.x v0, a1
; CHECK-O0-NEXT:    vsetvli a1, zero, e64,m1,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O0-NEXT:    vs1r.v v25, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_scalar_int:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a1, %hi(scratch)
; CHECK-O2-NEXT:    addi a1, a1, %lo(scratch)
; CHECK-O2-NEXT:    neg a0, a0
; CHECK-O2-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O2-NEXT:    vmv.v.x v0, a0
; CHECK-O2-NEXT:    vsetvli a0, zero, e64,m1,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O2-NEXT:    vs1r.v v25, (a1)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 1 x i64>*

  %select = select i1 %m, <vscale x 1 x i64> %a, <vscale x 1 x i64> %b
  store <vscale x 1 x i64> %select, <vscale x 1 x i64>* %store_addr

  ret void
}

define void @test_select_scalar_int_2(<vscale x 2 x i32> %a, <vscale x 2 x i32> %b, i1 zeroext %m) nounwind {
; CHECK-O0-LABEL: test_select_scalar_int_2:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    mv a2, a0
; CHECK-O0-NEXT:    # kill: def $x10 killed $x12
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    mv a1, zero
; CHECK-O0-NEXT:    sub a1, a1, a2
; CHECK-O0-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O0-NEXT:    vmv.v.x v0, a1
; CHECK-O0-NEXT:    vsetvli a1, zero, e32,m1,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O0-NEXT:    vs1r.v v25, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_scalar_int_2:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a1, %hi(scratch)
; CHECK-O2-NEXT:    addi a1, a1, %lo(scratch)
; CHECK-O2-NEXT:    neg a0, a0
; CHECK-O2-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O2-NEXT:    vmv.v.x v0, a0
; CHECK-O2-NEXT:    vsetvli a0, zero, e32,m1,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O2-NEXT:    vs1r.v v25, (a1)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x i32>*

  %select = select i1 %m, <vscale x 2 x i32> %a, <vscale x 2 x i32> %b
  store <vscale x 2 x i32> %select, <vscale x 2 x i32>* %store_addr

  ret void
}

define void @test_select_scalar_int_3(<vscale x 2 x i64> %a, <vscale x 2 x i64> %b, i1 zeroext %m) nounwind {
; CHECK-O0-LABEL: test_select_scalar_int_3:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    mv a2, a0
; CHECK-O0-NEXT:    # kill: def $x10 killed $x12
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    mv a1, zero
; CHECK-O0-NEXT:    sub a1, a1, a2
; CHECK-O0-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O0-NEXT:    vmv.v.x v0, a1
; CHECK-O0-NEXT:    vsetvli a1, zero, e64,m2,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v26, v10, v8, v0
; CHECK-O0-NEXT:    vs2r.v v26, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_scalar_int_3:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a1, %hi(scratch)
; CHECK-O2-NEXT:    addi a1, a1, %lo(scratch)
; CHECK-O2-NEXT:    neg a0, a0
; CHECK-O2-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O2-NEXT:    vmv.v.x v0, a0
; CHECK-O2-NEXT:    vsetvli a0, zero, e64,m2,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v26, v10, v8, v0
; CHECK-O2-NEXT:    vs2r.v v26, (a1)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x i64>*

  %select = select i1 %m, <vscale x 2 x i64> %a, <vscale x 2 x i64> %b
  store <vscale x 2 x i64> %select, <vscale x 2 x i64>* %store_addr

  ret void
}

define void @test_select_scalar_int_4(<vscale x 8 x i64> %a, <vscale x 8 x i64> %b, i1 zeroext %m) nounwind {
; CHECK-O0-LABEL: test_select_scalar_int_4:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    mv a2, a0
; CHECK-O0-NEXT:    # kill: def $x10 killed $x12
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    mv a1, zero
; CHECK-O0-NEXT:    sub a1, a1, a2
; CHECK-O0-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O0-NEXT:    vmv.v.x v0, a1
; CHECK-O0-NEXT:    vsetvli zero, zero, e64,m8,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v8, v16, v8, v0
; CHECK-O0-NEXT:    vs8r.v v8, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_scalar_int_4:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a1, %hi(scratch)
; CHECK-O2-NEXT:    addi a1, a1, %lo(scratch)
; CHECK-O2-NEXT:    neg a0, a0
; CHECK-O2-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O2-NEXT:    vmv.v.x v0, a0
; CHECK-O2-NEXT:    vsetvli zero, zero, e64,m8,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v8, v16, v8, v0
; CHECK-O2-NEXT:    vs8r.v v8, (a1)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 8 x i64>*

  %select = select i1 %m, <vscale x 8 x i64> %a, <vscale x 8 x i64> %b
  store <vscale x 8 x i64> %select, <vscale x 8 x i64>* %store_addr

  ret void
}

define void @test_select_scalar_int_5(<vscale x 16 x i32> %a, <vscale x 16 x i32> %b, i1 zeroext %m) nounwind {
; CHECK-O0-LABEL: test_select_scalar_int_5:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    mv a2, a0
; CHECK-O0-NEXT:    # kill: def $x10 killed $x12
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    mv a1, zero
; CHECK-O0-NEXT:    sub a1, a1, a2
; CHECK-O0-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O0-NEXT:    vmv.v.x v0, a1
; CHECK-O0-NEXT:    vsetvli a1, zero, e32,m8,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v8, v16, v8, v0
; CHECK-O0-NEXT:    vs8r.v v8, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_scalar_int_5:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a1, %hi(scratch)
; CHECK-O2-NEXT:    addi a1, a1, %lo(scratch)
; CHECK-O2-NEXT:    neg a0, a0
; CHECK-O2-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O2-NEXT:    vmv.v.x v0, a0
; CHECK-O2-NEXT:    vsetvli a0, zero, e32,m8,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v8, v16, v8, v0
; CHECK-O2-NEXT:    vs8r.v v8, (a1)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 16 x i32>*

  %select = select i1 %m, <vscale x 16 x i32> %a, <vscale x 16 x i32> %b
  store <vscale x 16 x i32> %select, <vscale x 16 x i32>* %store_addr

  ret void
}

define void @test_select_scalar_int_6(<vscale x 32 x i16> %a, <vscale x 32 x i16> %b, i1 zeroext %m) nounwind {
; CHECK-O0-LABEL: test_select_scalar_int_6:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    mv a2, a0
; CHECK-O0-NEXT:    # kill: def $x10 killed $x12
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    mv a1, zero
; CHECK-O0-NEXT:    sub a1, a1, a2
; CHECK-O0-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O0-NEXT:    vmv.v.x v0, a1
; CHECK-O0-NEXT:    vsetvli a1, zero, e16,m8,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v8, v16, v8, v0
; CHECK-O0-NEXT:    vs8r.v v8, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_scalar_int_6:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a1, %hi(scratch)
; CHECK-O2-NEXT:    addi a1, a1, %lo(scratch)
; CHECK-O2-NEXT:    neg a0, a0
; CHECK-O2-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O2-NEXT:    vmv.v.x v0, a0
; CHECK-O2-NEXT:    vsetvli a0, zero, e16,m8,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v8, v16, v8, v0
; CHECK-O2-NEXT:    vs8r.v v8, (a1)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 32 x i16>*

  %select = select i1 %m, <vscale x 32 x i16> %a, <vscale x 32 x i16> %b
  store <vscale x 32 x i16> %select, <vscale x 32 x i16>* %store_addr

  ret void
}

; FIXME enable when nxv64i8 is supported
;define void @test_select_scalar_int_7(<vscale x 64 x i8> %a, <vscale x 64 x i8> %b, i1 zeroext %m) nounwind {
;  %store_addr = bitcast i8* @scratch to <vscale x 64 x i8>*
;
;  %select = select i1 %m, <vscale x 64 x i8> %a, <vscale x 64 x i8> %b
;  store <vscale x 64 x i8> %select, <vscale x 64 x i8>* %store_addr
;
;  ret void
;}

define void @test_select_scalar_fp(<vscale x 1 x double> %a, <vscale x 1 x double> %b, i1 zeroext %m) nounwind {
; CHECK-O0-LABEL: test_select_scalar_fp:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    mv a2, a0
; CHECK-O0-NEXT:    # kill: def $x10 killed $x12
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    mv a1, zero
; CHECK-O0-NEXT:    sub a1, a1, a2
; CHECK-O0-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O0-NEXT:    vmv.v.x v0, a1
; CHECK-O0-NEXT:    vsetvli a1, zero, e64,m1,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O0-NEXT:    vs1r.v v25, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_scalar_fp:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a1, %hi(scratch)
; CHECK-O2-NEXT:    addi a1, a1, %lo(scratch)
; CHECK-O2-NEXT:    neg a0, a0
; CHECK-O2-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O2-NEXT:    vmv.v.x v0, a0
; CHECK-O2-NEXT:    vsetvli a0, zero, e64,m1,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O2-NEXT:    vs1r.v v25, (a1)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 1 x double>*

  %select = select i1 %m, <vscale x 1 x double> %a, <vscale x 1 x double> %b
  store <vscale x 1 x double> %select, <vscale x 1 x double>* %store_addr

  ret void
}

define void @test_select_scalar_fp_2(<vscale x 2 x float> %a, <vscale x 2 x float> %b, i1 zeroext %m) nounwind {
; CHECK-O0-LABEL: test_select_scalar_fp_2:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    mv a2, a0
; CHECK-O0-NEXT:    # kill: def $x10 killed $x12
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    mv a1, zero
; CHECK-O0-NEXT:    sub a1, a1, a2
; CHECK-O0-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O0-NEXT:    vmv.v.x v0, a1
; CHECK-O0-NEXT:    vsetvli a1, zero, e32,m1,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O0-NEXT:    vs1r.v v25, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_scalar_fp_2:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a1, %hi(scratch)
; CHECK-O2-NEXT:    addi a1, a1, %lo(scratch)
; CHECK-O2-NEXT:    neg a0, a0
; CHECK-O2-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O2-NEXT:    vmv.v.x v0, a0
; CHECK-O2-NEXT:    vsetvli a0, zero, e32,m1,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v25, v9, v8, v0
; CHECK-O2-NEXT:    vs1r.v v25, (a1)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x float>*

  %select = select i1 %m, <vscale x 2 x float> %a, <vscale x 2 x float> %b
  store <vscale x 2 x float> %select, <vscale x 2 x float>* %store_addr

  ret void
}

define void @test_select_scalar_fp_3(<vscale x 2 x double> %a, <vscale x 2 x double> %b, i1 zeroext %m) nounwind {
; CHECK-O0-LABEL: test_select_scalar_fp_3:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    mv a2, a0
; CHECK-O0-NEXT:    # kill: def $x10 killed $x12
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    mv a1, zero
; CHECK-O0-NEXT:    sub a1, a1, a2
; CHECK-O0-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O0-NEXT:    vmv.v.x v0, a1
; CHECK-O0-NEXT:    vsetvli a1, zero, e64,m2,ta,mu
; CHECK-O0-NEXT:    vmerge.vvm v26, v10, v8, v0
; CHECK-O0-NEXT:    vs2r.v v26, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_scalar_fp_3:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a1, %hi(scratch)
; CHECK-O2-NEXT:    addi a1, a1, %lo(scratch)
; CHECK-O2-NEXT:    neg a0, a0
; CHECK-O2-NEXT:    vsetvli a2, zero, e8,m1,ta,mu
; CHECK-O2-NEXT:    vmv.v.x v0, a0
; CHECK-O2-NEXT:    vsetvli a0, zero, e64,m2,ta,mu
; CHECK-O2-NEXT:    vmerge.vvm v26, v10, v8, v0
; CHECK-O2-NEXT:    vs2r.v v26, (a1)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x double>*

  %select = select i1 %m, <vscale x 2 x double> %a, <vscale x 2 x double> %b
  store <vscale x 2 x double> %select, <vscale x 2 x double>* %store_addr

  ret void
}

; FIXME enable when whole-vector mask select operations are supported.
;define void @test_select_scalar_mask(<vscale x 1 x i1> %a, <vscale x 1 x i1> %b, i1 %m) nounwind {
;  %store_addr = bitcast i8* @scratch to <vscale x 1 x i1>*
;
;  %select = select i1 %m, <vscale x 1 x i1> %a, <vscale x 1 x i1> %b
;  store <vscale x 1 x i1> %select, <vscale x 1 x i1>* %store_addr
;
;  ret void
;}

;define void @test_select_scalar_mask_2(<vscale x 2 x i1> %a, <vscale x 2 x i1> %b, i1 %m) nounwind {
;  %store_addr = bitcast i8* @scratch to <vscale x 2 x i32>*
;
;  %select = select i1 %m, <vscale x 2 x i1> %a, <vscale x 2 x i1> %b
;  store <vscale x 2 x i1> %select, <vscale x 2 x i1>* %store_addr
;
;  ret void
;}

;define void @test_select_scalar_mask_3(<vscale x 2 x i1> %a, <vscale x 2 x i1> %b, i1 %m) nounwind {
;  %store_addr = bitcast i8* @scratch to <vscale x 2 x i64>*
;
;  %select = select i1 %m, <vscale x 2 x i1> %a, <vscale x 2 x i1> %b
;  store <vscale x 2 x i1> %select, <vscale x 2 x i1>* %store_addr
;
;  ret void
;}
