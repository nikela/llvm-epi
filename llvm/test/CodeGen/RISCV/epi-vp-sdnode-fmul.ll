; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple riscv64 -mattr=+d,+v < %s | FileCheck %s

define <vscale x 1 x double> @test_vp_fmul_nxv1f64(<vscale x 1 x double> %f0, <vscale x 1 x double> %f1, <vscale x 1 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fmul_nxv1f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vfmul.vv v8, v8, v9, v0.t
; CHECK-NEXT:    ret
  %r0 = call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> %f0, <vscale x 1 x double> %f1, <vscale x 1 x i1> %m, i32 %n)
  ret <vscale x 1 x double> %r0
}
declare <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x i1>, i32)

define <vscale x 2 x double> @test_vp_fmul_nxv2f64(<vscale x 2 x double> %f0, <vscale x 2 x double> %f1, <vscale x 2 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fmul_nxv2f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m2, ta, mu
; CHECK-NEXT:    vfmul.vv v8, v8, v10, v0.t
; CHECK-NEXT:    ret
  %r0 = call <vscale x 2 x double> @llvm.vp.fmul.nxv2f64(<vscale x 2 x double> %f0, <vscale x 2 x double> %f1, <vscale x 2 x i1> %m, i32 %n)
  ret <vscale x 2 x double> %r0
}
declare <vscale x 2 x double> @llvm.vp.fmul.nxv2f64(<vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x i1>, i32)

define <vscale x 4 x double> @test_vp_fmul_nxv4f64(<vscale x 4 x double> %f0, <vscale x 4 x double> %f1, <vscale x 4 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fmul_nxv4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m4, ta, mu
; CHECK-NEXT:    vfmul.vv v8, v8, v12, v0.t
; CHECK-NEXT:    ret
  %r0 = call <vscale x 4 x double> @llvm.vp.fmul.nxv4f64(<vscale x 4 x double> %f0, <vscale x 4 x double> %f1, <vscale x 4 x i1> %m, i32 %n)
  ret <vscale x 4 x double> %r0
}
declare <vscale x 4 x double> @llvm.vp.fmul.nxv4f64(<vscale x 4 x double>, <vscale x 4 x double>, <vscale x 4 x i1>, i32)

define <vscale x 8 x double> @test_vp_fmul_nxv8f64(<vscale x 8 x double> %f0, <vscale x 8 x double> %f1, <vscale x 8 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fmul_nxv8f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m8, ta, mu
; CHECK-NEXT:    vfmul.vv v8, v8, v16, v0.t
; CHECK-NEXT:    ret
  %r0 = call <vscale x 8 x double> @llvm.vp.fmul.nxv8f64(<vscale x 8 x double> %f0, <vscale x 8 x double> %f1, <vscale x 8 x i1> %m, i32 %n)
  ret <vscale x 8 x double> %r0
}
declare <vscale x 8 x double> @llvm.vp.fmul.nxv8f64(<vscale x 8 x double>, <vscale x 8 x double>, <vscale x 8 x i1>, i32)

define <vscale x 1 x float> @test_vp_fmul_nxv1f32(<vscale x 1 x float> %f0, <vscale x 1 x float> %f1, <vscale x 1 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fmul_nxv1f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, mf2, ta, mu
; CHECK-NEXT:    vfmul.vv v8, v8, v9, v0.t
; CHECK-NEXT:    ret
  %r0 = call <vscale x 1 x float> @llvm.vp.fmul.nxv1f32(<vscale x 1 x float> %f0, <vscale x 1 x float> %f1, <vscale x 1 x i1> %m, i32 %n)
  ret <vscale x 1 x float> %r0
}
declare <vscale x 1 x float> @llvm.vp.fmul.nxv1f32(<vscale x 1 x float>, <vscale x 1 x float>, <vscale x 1 x i1>, i32)

define <vscale x 2 x float> @test_vp_fmul_nxv2f32(<vscale x 2 x float> %f0, <vscale x 2 x float> %f1, <vscale x 2 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fmul_nxv2f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, mu
; CHECK-NEXT:    vfmul.vv v8, v8, v9, v0.t
; CHECK-NEXT:    ret
  %r0 = call <vscale x 2 x float> @llvm.vp.fmul.nxv2f32(<vscale x 2 x float> %f0, <vscale x 2 x float> %f1, <vscale x 2 x i1> %m, i32 %n)
  ret <vscale x 2 x float> %r0
}
declare <vscale x 2 x float> @llvm.vp.fmul.nxv2f32(<vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x i1>, i32)

define <vscale x 4 x float> @test_vp_fmul_nxv4f32(<vscale x 4 x float> %f0, <vscale x 4 x float> %f1, <vscale x 4 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fmul_nxv4f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m2, ta, mu
; CHECK-NEXT:    vfmul.vv v8, v8, v10, v0.t
; CHECK-NEXT:    ret
  %r0 = call <vscale x 4 x float> @llvm.vp.fmul.nxv4f32(<vscale x 4 x float> %f0, <vscale x 4 x float> %f1, <vscale x 4 x i1> %m, i32 %n)
  ret <vscale x 4 x float> %r0
}
declare <vscale x 4 x float> @llvm.vp.fmul.nxv4f32(<vscale x 4 x float>, <vscale x 4 x float>, <vscale x 4 x i1>, i32)

define <vscale x 8 x float> @test_vp_fmul_nxv8f32(<vscale x 8 x float> %f0, <vscale x 8 x float> %f1, <vscale x 8 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fmul_nxv8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m4, ta, mu
; CHECK-NEXT:    vfmul.vv v8, v8, v12, v0.t
; CHECK-NEXT:    ret
  %r0 = call <vscale x 8 x float> @llvm.vp.fmul.nxv8f32(<vscale x 8 x float> %f0, <vscale x 8 x float> %f1, <vscale x 8 x i1> %m, i32 %n)
  ret <vscale x 8 x float> %r0
}
declare <vscale x 8 x float> @llvm.vp.fmul.nxv8f32(<vscale x 8 x float>, <vscale x 8 x float>, <vscale x 8 x i1>, i32)

define <vscale x 16 x float> @test_vp_fmul_nxv16f32(<vscale x 16 x float> %f0, <vscale x 16 x float> %f1, <vscale x 16 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fmul_nxv16f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m8, ta, mu
; CHECK-NEXT:    vfmul.vv v8, v8, v16, v0.t
; CHECK-NEXT:    ret
  %r0 = call <vscale x 16 x float> @llvm.vp.fmul.nxv16f32(<vscale x 16 x float> %f0, <vscale x 16 x float> %f1, <vscale x 16 x i1> %m, i32 %n)
  ret <vscale x 16 x float> %r0
}
declare <vscale x 16 x float> @llvm.vp.fmul.nxv16f32(<vscale x 16 x float>, <vscale x 16 x float>, <vscale x 16 x i1>, i32)
