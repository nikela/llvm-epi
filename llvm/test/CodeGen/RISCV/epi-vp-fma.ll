; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+v -target-abi lp64d \
; RUN:   -verify-machineinstrs < %s -epi-pipeline | FileCheck %s

define <vscale x 1 x double> @test_vp_fma_nxv1f64(<vscale x 1 x double> %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fma_nxv1f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, ma
; CHECK-NEXT:    vfmadd.vv v8, v9, v10
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %f = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %allones, i32 %n)
  ret <vscale x 1 x double> %f
}

define <vscale x 1 x double> @test_vp_fma_nxv1f64_masked(<vscale x 1 x double> %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fma_nxv1f64_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vfmadd.vv v9, v8, v10, v0.t
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
  %f = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 %n)
  ret <vscale x 1 x double> %f
}

define <vscale x 2 x double> @test_vp_fma_nxv2f64(<vscale x 2 x double> %f0, <vscale x 2 x double> %f1, <vscale x 2 x double> %f2, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fma_nxv2f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m2, ta, ma
; CHECK-NEXT:    vfmadd.vv v8, v10, v12
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 2 x i1> %head, <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer

  %f = call <vscale x 2 x double> @llvm.vp.fma.nxv2f64(<vscale x 2 x double> %f0, <vscale x 2 x double> %f1, <vscale x 2 x double> %f2, <vscale x 2 x i1> %allones, i32 %n)
  ret <vscale x 2 x double> %f
}

define <vscale x 2 x double> @test_vp_fma_nxv2f64_masked(<vscale x 2 x double> %f0, <vscale x 2 x double> %f1, <vscale x 2 x double> %f2, <vscale x 2 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fma_nxv2f64_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m2, ta, mu
; CHECK-NEXT:    vfmadd.vv v10, v8, v12, v0.t
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
  %f = call <vscale x 2 x double> @llvm.vp.fma.nxv2f64(<vscale x 2 x double> %f0, <vscale x 2 x double> %f1, <vscale x 2 x double> %f2, <vscale x 2 x i1> %m, i32 %n)
  ret <vscale x 2 x double> %f
}

define <vscale x 2 x float> @test_vp_fma_nxv2f32(<vscale x 2 x float> %f0, <vscale x 2 x float> %f1, <vscale x 2 x float> %f2, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fma_nxv2f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; CHECK-NEXT:    vfmadd.vv v8, v9, v10
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 2 x i1> %head, <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer

  %f = call <vscale x 2 x float> @llvm.vp.fma.nxv2f32(<vscale x 2 x float> %f0, <vscale x 2 x float> %f1, <vscale x 2 x float> %f2, <vscale x 2 x i1> %allones, i32 %n)
  ret <vscale x 2 x float> %f
}

define <vscale x 2 x float> @test_vp_fma_nxv2f32_masked(<vscale x 2 x float> %f0, <vscale x 2 x float> %f1, <vscale x 2 x float> %f2, <vscale x 2 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fma_nxv2f32_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, mu
; CHECK-NEXT:    vfmadd.vv v9, v8, v10, v0.t
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
  %f = call <vscale x 2 x float> @llvm.vp.fma.nxv2f32(<vscale x 2 x float> %f0, <vscale x 2 x float> %f1, <vscale x 2 x float> %f2, <vscale x 2 x i1> %m, i32 %n)
  ret <vscale x 2 x float> %f
}

declare <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x i1>, i32)
declare <vscale x 2 x double> @llvm.vp.fma.nxv2f64(<vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x float> @llvm.vp.fma.nxv2f32(<vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x i1>, i32)

define <vscale x 1 x double> @test_vp_fma_neg_operand_3(<vscale x 1 x double> %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 zeroext %n) {
; CHECK-LABEL: test_vp_fma_neg_operand_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vfneg.v v11, v10
; CHECK-NEXT:    vfmsub.vv v8, v9, v10
; CHECK-NEXT:    vfmadd.vv v9, v8, v11, v0.t
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %f3 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %f2, <vscale x 1 x i1> %allones, i32 %n)

  %f4 = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f3, <vscale x 1 x i1> %allones, i32 %n)
  %f = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %f4, <vscale x 1 x double> %f1, <vscale x 1 x double> %f3, <vscale x 1 x i1> %m, i32 %n)

  ret <vscale x 1 x double> %f
}

define <vscale x 1 x double> @test_vp_fma_neg_operand_1_3(<vscale x 1 x double> %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 zeroext %n) {
; CHECK-LABEL: test_vp_fma_neg_operand_1_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vfneg.v v11, v8
; CHECK-NEXT:    vfneg.v v12, v10
; CHECK-NEXT:    vfnmadd.vv v8, v9, v10
; CHECK-NEXT:    vfmadd.vv v8, v11, v12, v0.t
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %f3 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %f0, <vscale x 1 x i1> %allones, i32 %n)
  %f4 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %f2, <vscale x 1 x i1> %allones, i32 %n)

  %f5 = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %f3, <vscale x 1 x double> %f1, <vscale x 1 x double> %f4, <vscale x 1 x i1> %allones, i32 %n)
  %f = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %f3, <vscale x 1 x double> %f5, <vscale x 1 x double> %f4, <vscale x 1 x i1> %m, i32 %n)

  ret <vscale x 1 x double> %f
}

define <vscale x 1 x double> @test_vp_fma_neg_operand_1(<vscale x 1 x double> %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 zeroext %n) {
; CHECK-LABEL: test_vp_fma_neg_operand_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vfneg.v v11, v8
; CHECK-NEXT:    vfnmsub.vv v8, v9, v10
; CHECK-NEXT:    vfmadd.vv v8, v11, v10, v0.t
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %f3 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %f0, <vscale x 1 x i1> %allones, i32 %n)

  %f4 = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %f3, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %allones, i32 %n)
  %f = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %f3, <vscale x 1 x double> %f4, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 %n)

  ret <vscale x 1 x double> %f
}

define <vscale x 1 x double> @test_vp_fma_splat_op_1(double %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 zeroext %n) {
; CHECK-LABEL: test_vp_fma_splat_op_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vfmadd.vf v8, fa0, v9
; CHECK-NEXT:    vfmadd.vf v8, fa0, v9, v0.t
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %f3 = insertelement <vscale x 1 x double> undef, double %f0, i32 0
  %splat = shufflevector <vscale x 1 x double> %f3, <vscale x 1 x double> undef, <vscale x 1 x i32> zeroinitializer

  %f4 = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %splat, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %allones, i32 %n)
  %f = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %splat, <vscale x 1 x double> %f4, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 %n)

  ret <vscale x 1 x double> %f
}

define <vscale x 1 x double> @test_vp_fma_splat_op_1_neg_op_3(double %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 zeroext %n) {
; CHECK-LABEL: test_vp_fma_splat_op_1_neg_op_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vfneg.v v10, v9
; CHECK-NEXT:    vfmsub.vf v8, fa0, v9
; CHECK-NEXT:    vfmadd.vf v8, fa0, v10, v0.t
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %f3 = insertelement <vscale x 1 x double> undef, double %f0, i32 0
  %splat = shufflevector <vscale x 1 x double> %f3, <vscale x 1 x double> undef, <vscale x 1 x i32> zeroinitializer

  %f4 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %f2, <vscale x 1 x i1> %allones, i32 %n)

  %f5 = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %splat, <vscale x 1 x double> %f1, <vscale x 1 x double> %f4, <vscale x 1 x i1> %allones, i32 %n)
  %f = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %splat, <vscale x 1 x double> %f5, <vscale x 1 x double> %f4, <vscale x 1 x i1> %m, i32 %n)

  ret <vscale x 1 x double> %f
}

define <vscale x 1 x double> @test_vp_fma_splat_op_1_neg_op_2_3(double %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 zeroext %n) {
; CHECK-LABEL: test_vp_fma_splat_op_1_neg_op_2_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vfneg.v v10, v9
; CHECK-NEXT:    vfnmadd.vf v8, fa0, v9
; CHECK-NEXT:    vfneg.v v8, v8
; CHECK-NEXT:    vfmadd.vf v8, fa0, v10, v0.t
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %f3 = insertelement <vscale x 1 x double> undef, double %f0, i32 0
  %splat = shufflevector <vscale x 1 x double> %f3, <vscale x 1 x double> undef, <vscale x 1 x i32> zeroinitializer

  %f4 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %f1, <vscale x 1 x i1> %allones, i32 %n)
  %f5 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %f2, <vscale x 1 x i1> %allones, i32 %n)

  %f6 = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %splat, <vscale x 1 x double> %f4, <vscale x 1 x double> %f5, <vscale x 1 x i1> %allones, i32 %n)

  %f7 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %f6, <vscale x 1 x i1> %allones, i32 %n)

  %f = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %splat, <vscale x 1 x double> %f7, <vscale x 1 x double> %f5, <vscale x 1 x i1> %m, i32 %n)

  ret <vscale x 1 x double> %f
}

define <vscale x 1 x double> @test_vp_fma_splat_op_1_neg_op_2(double %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 zeroext %n) {
; CHECK-LABEL: test_vp_fma_splat_op_1_neg_op_2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vfneg.v v10, v8
; CHECK-NEXT:    vfnmsac.vf v9, fa0, v8
; CHECK-NEXT:    vfmadd.vf v10, fa0, v9, v0.t
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %f3 = insertelement <vscale x 1 x double> undef, double %f0, i32 0
  %splat = shufflevector <vscale x 1 x double> %f3, <vscale x 1 x double> undef, <vscale x 1 x i32> zeroinitializer

  %f4 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %f1, <vscale x 1 x i1> %allones, i32 %n)

  %f5 = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %splat, <vscale x 1 x double> %f4, <vscale x 1 x double> %f2, <vscale x 1 x i1> %allones, i32 %n)
  %f = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %splat, <vscale x 1 x double> %f4, <vscale x 1 x double> %f5, <vscale x 1 x i1> %m, i32 %n)

  ret <vscale x 1 x double> %f
}

define <vscale x 1 x double> @test_vp_fma_neg_splat_op_1_neg_op_3(double %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 zeroext %n) {
; CHECK-LABEL: test_vp_fma_neg_splat_op_1_neg_op_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e64, m1, ta, ma
; CHECK-NEXT:    vfmv.v.f v10, fa0
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vfneg.v v10, v10
; CHECK-NEXT:    vfneg.v v11, v9
; CHECK-NEXT:    vfnmadd.vf v8, fa0, v9
; CHECK-NEXT:    vfmadd.vv v8, v10, v11, v0.t
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %f3 = insertelement <vscale x 1 x double> undef, double %f0, i32 0
  %splat = shufflevector <vscale x 1 x double> %f3, <vscale x 1 x double> undef, <vscale x 1 x i32> zeroinitializer

  %f4 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %splat, <vscale x 1 x i1> %allones, i32 %n)
  %f5 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %f2, <vscale x 1 x i1> %allones, i32 %n)

  %f6 = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %f4, <vscale x 1 x double> %f1, <vscale x 1 x double> %f5, <vscale x 1 x i1> %allones, i32 %n)
  %f = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %f4, <vscale x 1 x double> %f6, <vscale x 1 x double> %f5, <vscale x 1 x i1> %m, i32 %n)

  ret <vscale x 1 x double> %f
}

define <vscale x 1 x double> @test_vp_fma_neg_splat_op_1(double %f0, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 zeroext %n) {
; CHECK-LABEL: test_vp_fma_neg_splat_op_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e64, m1, ta, ma
; CHECK-NEXT:    vfmv.v.f v10, fa0
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vfneg.v v10, v10
; CHECK-NEXT:    vfnmsub.vf v8, fa0, v9
; CHECK-NEXT:    vfmadd.vv v8, v10, v9, v0.t
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %f3 = insertelement <vscale x 1 x double> undef, double %f0, i32 0
  %splat = shufflevector <vscale x 1 x double> %f3, <vscale x 1 x double> undef, <vscale x 1 x i32> zeroinitializer

  %f4 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %splat, <vscale x 1 x i1> %allones, i32 %n)

  %f5 = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %f4, <vscale x 1 x double> %f1, <vscale x 1 x double> %f2, <vscale x 1 x i1> %allones, i32 %n)
  %f = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %f4, <vscale x 1 x double> %f5, <vscale x 1 x double> %f2, <vscale x 1 x i1> %m, i32 %n)

  ret <vscale x 1 x double> %f
}

declare <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double>, <vscale x 1 x i1>, i32)
