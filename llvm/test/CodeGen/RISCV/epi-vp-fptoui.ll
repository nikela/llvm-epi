; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+c,+experimental-v < %s -epi-pipeline | \
; RUN:     FileCheck %s

; fptoui
define <vscale x 2 x i32> @fptoui.i32.f32(<vscale x 2 x float> %a, i32 %gvl)
; CHECK-LABEL: fptoui.i32.f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32,m1,ta,mu
; CHECK-NEXT:    vfcvt.xu.f.v v8, v8
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i32> @llvm.vp.fptoui.nxv2i32.nxv2f32(<vscale x 2 x float> %a,
            <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> undef, i1 true, i32 0), <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer),
            i32 %gvl)
  ret <vscale x 2 x i32> %b
}

define <vscale x 2 x i32> @fptoui.i32.f32.mask(<vscale x 2 x float> %a, <vscale x 2 x i1> %mask, i32 %gvl)
; CHECK-LABEL: fptoui.i32.f32.mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32,m1,ta,mu
; CHECK-NEXT:    vfcvt.xu.f.v v8, v8, v0.t
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i32> @llvm.vp.fptoui.nxv2i32.nxv2f32(
               <vscale x 2 x float> %a,
               <vscale x 2 x i1> %mask,
               i32 %gvl)
  ret <vscale x 2 x i32> %b
}

declare <vscale x 2 x i32> @llvm.vp.fptoui.nxv2i32.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x i1> %mask, i32 %gvl)

define <vscale x 2 x i64> @fptoui.i64.f32(<vscale x 2 x float> %a, i32 %gvl)
; CHECK-LABEL: fptoui.i64.f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32,m1,ta,mu
; CHECK-NEXT:    vfwcvt.xu.f.v v26, v8
; CHECK-NEXT:    vmv2r.v v8, v26
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i64> @llvm.vp.fptoui.nxv2i64.nxv2f32(<vscale x 2 x float> %a,
            <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> undef, i1 true, i32 0), <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer),
            i32 %gvl)
  ret <vscale x 2 x i64> %b
}

define <vscale x 2 x i64> @fptoui.i64.f32.mask(<vscale x 2 x float> %a, <vscale x 2 x i1> %mask, i32 %gvl)
; CHECK-LABEL: fptoui.i64.f32.mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32,m1,ta,mu
; CHECK-NEXT:    vfwcvt.xu.f.v v26, v8, v0.t
; CHECK-NEXT:    vmv2r.v v8, v26
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i64> @llvm.vp.fptoui.nxv2i64.nxv2f32(
               <vscale x 2 x float> %a,
               <vscale x 2 x i1> %mask,
               i32 %gvl)
  ret <vscale x 2 x i64> %b
}

declare <vscale x 2 x i64> @llvm.vp.fptoui.nxv2i64.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x i1> %mask, i32 %gvl)

define <vscale x 2 x i32> @fptoui.i32.f64(<vscale x 2 x double> %a, i32 %gvl)
; CHECK-LABEL: fptoui.i32.f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32,m1,ta,mu
; CHECK-NEXT:    vfncvt.xu.f.w v25, v8
; CHECK-NEXT:    vmv1r.v v8, v25
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i32> @llvm.vp.fptoui.nxv2i32.nxv2f64(<vscale x 2 x double> %a,
            <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> undef, i1 true, i32 0), <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer),
            i32 %gvl)
  ret <vscale x 2 x i32> %b
}

define <vscale x 2 x i32> @fptoui.i32.f64.mask(<vscale x 2 x double> %a, <vscale x 2 x i1> %mask, i32 %gvl)
; CHECK-LABEL: fptoui.i32.f64.mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32,m1,ta,mu
; CHECK-NEXT:    vfncvt.xu.f.w v25, v8, v0.t
; CHECK-NEXT:    vmv1r.v v8, v25
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i32> @llvm.vp.fptoui.nxv2i32.nxv2f64(
               <vscale x 2 x double> %a,
               <vscale x 2 x i1> %mask,
               i32 %gvl)
  ret <vscale x 2 x i32> %b
}

declare <vscale x 2 x i32> @llvm.vp.fptoui.nxv2i32.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x i1> %mask, i32 %gvl)
