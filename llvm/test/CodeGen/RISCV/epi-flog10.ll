; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+f,+d,+v -verify-machineinstrs -epi-pipeline \
; RUN:    < %s | FileCheck %s

declare <vscale x 1 x float> @llvm.log10.nxv1f32(<vscale x 1 x float>)
declare <vscale x 2 x float> @llvm.log10.nxv2f32(<vscale x 2 x float>)
declare <vscale x 4 x float> @llvm.log10.nxv4f32(<vscale x 4 x float>)
declare <vscale x 8 x float> @llvm.log10.nxv8f32(<vscale x 8 x float>)
declare <vscale x 16 x float> @llvm.log10.nxv16f32(<vscale x 16 x float>)

declare <vscale x 1 x double> @llvm.log10.nxv1f64(<vscale x 1 x double>)
declare <vscale x 2 x double> @llvm.log10.nxv2f64(<vscale x 2 x double>)
declare <vscale x 4 x double> @llvm.log10.nxv4f64(<vscale x 4 x double>)
declare <vscale x 8 x double> @llvm.log10.nxv8f64(<vscale x 8 x double>)

define <vscale x 1 x float> @test_llvm_log10_nxv1f32(<vscale x 1 x float> %vf) {
; CHECK-LABEL: test_llvm_log10_nxv1f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    srli a0, a0, 3
; CHECK-NEXT:    call __epi_flog10_nxv1f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %res = call <vscale x 1 x float> @llvm.log10.nxv1f32(<vscale x 1 x float> %vf)
  ret <vscale x 1 x float> %res
}

define <vscale x 2 x float> @test_llvm_log10_nxv2f32(<vscale x 2 x float> %vf) {
; CHECK-LABEL: test_llvm_log10_nxv2f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    srli a0, a0, 2
; CHECK-NEXT:    call __epi_flog10_nxv2f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %res = call <vscale x 2 x float> @llvm.log10.nxv2f32(<vscale x 2 x float> %vf)
  ret <vscale x 2 x float> %res
}

define <vscale x 4 x float> @test_llvm_log10_nxv4f32(<vscale x 4 x float> %vf) {
; CHECK-LABEL: test_llvm_log10_nxv4f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    srli a0, a0, 1
; CHECK-NEXT:    call __epi_flog10_nxv4f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %res = call <vscale x 4 x float> @llvm.log10.nxv4f32(<vscale x 4 x float> %vf)
  ret <vscale x 4 x float> %res
}

define <vscale x 8 x float> @test_llvm_log10_nxv8f32(<vscale x 8 x float> %vf) {
; CHECK-LABEL: test_llvm_log10_nxv8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    call __epi_flog10_nxv8f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %res = call <vscale x 8 x float> @llvm.log10.nxv8f32(<vscale x 8 x float> %vf)
  ret <vscale x 8 x float> %res
}

define <vscale x 16 x float> @test_llvm_log10_nxv16f32(<vscale x 16 x float> %vf) {
; CHECK-LABEL: test_llvm_log10_nxv16f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a0, a0, 1
; CHECK-NEXT:    call __epi_flog10_nxv16f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %res = call <vscale x 16 x float> @llvm.log10.nxv16f32(<vscale x 16 x float> %vf)
  ret <vscale x 16 x float> %res
}

define <vscale x 1 x double> @test_llvm_log10_nxv1f64(<vscale x 1 x double> %vd) {
; CHECK-LABEL: test_llvm_log10_nxv1f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    srli a0, a0, 3
; CHECK-NEXT:    call __epi_flog10_nxv1f64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %res = call <vscale x 1 x double> @llvm.log10.nxv1f64(<vscale x 1 x double> %vd)
  ret <vscale x 1 x double> %res
}

define <vscale x 2 x double> @test_llvm_log10_nxv2f64(<vscale x 2 x double> %vd) {
; CHECK-LABEL: test_llvm_log10_nxv2f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    srli a0, a0, 2
; CHECK-NEXT:    call __epi_flog10_nxv2f64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %res = call <vscale x 2 x double> @llvm.log10.nxv2f64(<vscale x 2 x double> %vd)
  ret <vscale x 2 x double> %res
}

define <vscale x 4 x double> @test_llvm_log10_nxv4f64(<vscale x 4 x double> %vd) {
; CHECK-LABEL: test_llvm_log10_nxv4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    srli a0, a0, 1
; CHECK-NEXT:    call __epi_flog10_nxv4f64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %res = call <vscale x 4 x double> @llvm.log10.nxv4f64(<vscale x 4 x double> %vd)
  ret <vscale x 4 x double> %res
}

define <vscale x 8 x double> @test_llvm_log10_nxv8f64(<vscale x 8 x double> %vd) {
; CHECK-LABEL: test_llvm_log10_nxv8f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    call __epi_flog10_nxv8f64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %res = call <vscale x 8 x double> @llvm.log10.nxv8f64(<vscale x 8 x double> %vd)
  ret <vscale x 8 x double> %res
}
