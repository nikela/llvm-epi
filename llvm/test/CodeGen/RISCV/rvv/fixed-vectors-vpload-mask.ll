; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+d,+experimental-zfh,+experimental-v -riscv-v-vector-bits-min=128 \
; RUN:   -verify-machineinstrs < %s | FileCheck %s
; RUN: llc -mtriple=riscv64 -mattr=+d,+experimental-zfh,+experimental-v -riscv-v-vector-bits-min=128 \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <16 x i1> @llvm.vp.load.v16i1.p0v16i1(<16 x i1>*, <16 x i1>, i32)

define <16 x i1> @vpload_v16i1(<16 x i1>* %ptr, <16 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: vpload_v16i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, mu
; CHECK-NEXT:    vlm.v v0, (a0)
; CHECK-NEXT:    ret
  %load = call <16 x i1> @llvm.vp.load.v16i1.p0v16i1(<16 x i1>* %ptr, <16 x i1> %m, i32 %evl)
  ret <16 x i1> %load
}

define <16 x i1> @vpload_v16i1_allones_mask(<16 x i1>* %ptr, i32 zeroext %evl) {
; CHECK-LABEL: vpload_v16i1_allones_mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, mu
; CHECK-NEXT:    vlm.v v0, (a0)
; CHECK-NEXT:    ret
  %a = insertelement <16 x i1> undef, i1 true, i32 0
  %b = shufflevector <16 x i1> %a, <16 x i1> poison, <16 x i32> zeroinitializer
  %load = call <16 x i1> @llvm.vp.load.v16i1.p0v16i1(<16 x i1>* %ptr, <16 x i1> %b, i32 %evl)
  ret <16 x i1> %load
}
