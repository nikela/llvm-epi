; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+d,+experimental-zfh,+v \
; RUN:     -verify-machineinstrs < %s | FileCheck %s
; RUN: llc -mtriple=riscv64 -mattr=+d,+experimental-zfh,+v \
; RUN:     -verify-machineinstrs < %s | FileCheck %s

declare void @llvm.vp.store.nxv1i1.p0nxv1i1(<vscale x 1 x i1>, <vscale x 1 x i1>*, <vscale x 1 x i1>, i32)
declare void @llvm.vp.store.nxv2i1.p0nxv2i1(<vscale x 2 x i1>, <vscale x 2 x i1>*, <vscale x 2 x i1>, i32)
declare void @llvm.vp.store.nxv4i1.p0nxv4i1(<vscale x 4 x i1>, <vscale x 4 x i1>*, <vscale x 4 x i1>, i32)
declare void @llvm.vp.store.nxv8i1.p0nxv8i1(<vscale x 8 x i1>, <vscale x 8 x i1>*, <vscale x 8 x i1>, i32)
declare void @llvm.vp.store.nxv16i1.p0nxv16i1(<vscale x 16 x i1>, <vscale x 16 x i1>*, <vscale x 16 x i1>, i32)
declare void @llvm.vp.store.nxv32i1.p0nxv32i1(<vscale x 32 x i1>, <vscale x 32 x i1>*, <vscale x 32 x i1>, i32)
declare void @llvm.vp.store.nxv64i1.p0nxv64i1(<vscale x 64 x i1>, <vscale x 64 x i1>*, <vscale x 64 x i1>, i32)

define void @vpstore_nxv1i1_allones_mask(<vscale x 1 x i1> %val, <vscale x 1 x i1>* %ptr, i32 zeroext %evl) {
; CHECK-LABEL: vpstore_nxv1i1_allones_mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsm.v v0, (a0)
; CHECK-NEXT:    ret
  %a = insertelement <vscale x 1 x i1> undef, i1 true, i32 0
  %b = shufflevector <vscale x 1 x i1> %a, <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer
  call void @llvm.vp.store.nxv1i1.p0nxv1i1(<vscale x 1 x i1> %val, <vscale x 1 x i1>* %ptr, <vscale x 1 x i1> %b, i32 %evl)
  ret void
}

define void @vpstore_nxv1i1(<vscale x 1 x i1> %val, <vscale x 1 x i1>* %ptr, <vscale x 1 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: vpstore_nxv1i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; CHECK-NEXT:    vsm.v v0, (a0)
; CHECK-NEXT:    ret
  call void @llvm.vp.store.nxv1i1.p0nxv1i1(<vscale x 1 x i1> %val, <vscale x 1 x i1>* %ptr, <vscale x 1 x i1> %m, i32 %evl)
  ret void
}

define void @vpstore_nxv2i1(<vscale x 2 x i1> %val, <vscale x 2 x i1>* %ptr, <vscale x 2 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: vpstore_nxv2i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a1, e8, mf4, ta, ma
; CHECK-NEXT:    vsm.v v0, (a0)
; CHECK-NEXT:    ret
  call void @llvm.vp.store.nxv2i1.p0nxv2i1(<vscale x 2 x i1> %val, <vscale x 2 x i1>* %ptr, <vscale x 2 x i1> %m, i32 %evl)
  ret void
}

define void @vpstore_nxv4i1(<vscale x 4 x i1> %val, <vscale x 4 x i1>* %ptr, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: vpstore_nxv4i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a1, e8, mf2, ta, ma
; CHECK-NEXT:    vsm.v v0, (a0)
; CHECK-NEXT:    ret
  call void @llvm.vp.store.nxv4i1.p0nxv4i1(<vscale x 4 x i1> %val, <vscale x 4 x i1>* %ptr, <vscale x 4 x i1> %m, i32 %evl)
  ret void
}

define void @vpstore_nxv8i1(<vscale x 8 x i1> %val, <vscale x 8 x i1>* %ptr, <vscale x 8 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: vpstore_nxv8i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a1, e8, m1, ta, ma
; CHECK-NEXT:    vsm.v v0, (a0)
; CHECK-NEXT:    ret
  call void @llvm.vp.store.nxv8i1.p0nxv8i1(<vscale x 8 x i1> %val, <vscale x 8 x i1>* %ptr, <vscale x 8 x i1> %m, i32 %evl)
  ret void
}

define void @vpstore_nxv16i1(<vscale x 16 x i1> %val, <vscale x 16 x i1>* %ptr, <vscale x 16 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: vpstore_nxv16i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; CHECK-NEXT:    vsm.v v0, (a0)
; CHECK-NEXT:    ret
  call void @llvm.vp.store.nxv16i1.p0nxv16i1(<vscale x 16 x i1> %val, <vscale x 16 x i1>* %ptr, <vscale x 16 x i1> %m, i32 %evl)
  ret void
}

define void @vpstore_nxv32i1(<vscale x 32 x i1> %val, <vscale x 32 x i1>* %ptr, <vscale x 32 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: vpstore_nxv32i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a1, e8, m4, ta, ma
; CHECK-NEXT:    vsm.v v0, (a0)
; CHECK-NEXT:    ret
  call void @llvm.vp.store.nxv32i1.p0nxv32i1(<vscale x 32 x i1> %val, <vscale x 32 x i1>* %ptr, <vscale x 32 x i1> %m, i32 %evl)
  ret void
}

define void @vpstore_nxv64i1(<vscale x 64 x i1> %val, <vscale x 64 x i1>* %ptr, <vscale x 64 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: vpstore_nxv64i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a1, e8, m8, ta, ma
; CHECK-NEXT:    vsm.v v0, (a0)
; CHECK-NEXT:    ret
  call void @llvm.vp.store.nxv64i1.p0nxv64i1(<vscale x 64 x i1> %val, <vscale x 64 x i1>* %ptr, <vscale x 64 x i1> %m, i32 %evl)
  ret void
}
