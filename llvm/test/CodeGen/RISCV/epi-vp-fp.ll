; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+v -verify-machineinstrs -O0 \
; RUN:    < %s -epi-pipeline | FileCheck --check-prefix=CHECK-O0 %s
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+v -verify-machineinstrs -O2 \
; RUN:    < %s -epi-pipeline | FileCheck --check-prefix=CHECK-O2 %s

@scratch = global i8 0, align 16

define void @test_vp_fp(<vscale x 1 x double>* %a0, <vscale x 1 x double>* %a1, <vscale x 1 x double>* %a2, <vscale x 1 x i64>* %a3, <vscale x 1 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-O0-LABEL: test_vp_fp:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    addi sp, sp, -48
; CHECK-O0-NEXT:    sd ra, 40(sp) # 8-byte Folded Spill
; CHECK-O0-NEXT:    csrr a5, vlenb
; CHECK-O0-NEXT:    slli a5, a5, 3
; CHECK-O0-NEXT:    sub sp, sp, a5
; CHECK-O0-NEXT:    sd a4, 24(sp) # 8-byte Folded Spill
; CHECK-O0-NEXT:    csrr a4, vlenb
; CHECK-O0-NEXT:    slli a5, a4, 3
; CHECK-O0-NEXT:    sub a4, a5, a4
; CHECK-O0-NEXT:    add a4, sp, a4
; CHECK-O0-NEXT:    addi a4, a4, 40
; CHECK-O0-NEXT:    vs1r.v v0, (a4) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    mv a4, a0
; CHECK-O0-NEXT:    ld a0, 24(sp) # 8-byte Folded Reload
; CHECK-O0-NEXT:    # kill: def $x15 killed $x10
; CHECK-O0-NEXT:    lui a5, %hi(scratch)
; CHECK-O0-NEXT:    addi a5, a5, %lo(scratch)
; CHECK-O0-NEXT:    sd a5, 32(sp) # 8-byte Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v8
; CHECK-O0-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-O0-NEXT:    vle64.v v8, (a4), v0.t
; CHECK-O0-NEXT:    csrr a4, vlenb
; CHECK-O0-NEXT:    slli a5, a4, 3
; CHECK-O0-NEXT:    sub a4, a5, a4
; CHECK-O0-NEXT:    add a4, sp, a4
; CHECK-O0-NEXT:    addi a4, a4, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a4) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a4, vlenb
; CHECK-O0-NEXT:    li a5, 6
; CHECK-O0-NEXT:    mul a4, a4, a5
; CHECK-O0-NEXT:    add a4, sp, a4
; CHECK-O0-NEXT:    addi a4, a4, 40
; CHECK-O0-NEXT:    vs1r.v v8, (a4) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v9
; CHECK-O0-NEXT:    vle64.v v9, (a1), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a4, a1, 3
; CHECK-O0-NEXT:    sub a1, a4, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    addi a1, sp, 40
; CHECK-O0-NEXT:    vs1r.v v9, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v10
; CHECK-O0-NEXT:    vle64.v v10, (a2), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs1r.v v10, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v16
; CHECK-O0-NEXT:    vle64.v v16, (a3), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    # implicit-def: $v10
; CHECK-O0-NEXT:    vfadd.vv v10, v8, v9, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs1r.v v10, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v10
; CHECK-O0-NEXT:    vfsub.vv v10, v8, v9, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 1
; CHECK-O0-NEXT:    add a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs1r.v v10, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v10
; CHECK-O0-NEXT:    vfmul.vv v10, v8, v9, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 2
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs1r.v v10, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v10
; CHECK-O0-NEXT:    vfdiv.vv v10, v8, v9, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 2
; CHECK-O0-NEXT:    add a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs1r.v v10, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    call __epi_fmod_nxv1f64_m@plt
; CHECK-O0-NEXT:    ld a4, 24(sp) # 8-byte Folded Reload
; CHECK-O0-NEXT:    addi a0, sp, 40
; CHECK-O0-NEXT:    vl1r.v v10, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl1r.v v9, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a0, a0, 1
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl1r.v v15, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a1, a0, 1
; CHECK-O0-NEXT:    add a0, a1, a0
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl1r.v v14, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a0, a0, 2
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl1r.v v13, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a1, a0, 2
; CHECK-O0-NEXT:    add a0, a1, a0
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl1r.v v12, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a1, a0, 3
; CHECK-O0-NEXT:    sub a0, a1, a0
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    ld a0, 32(sp) # 8-byte Folded Reload
; CHECK-O0-NEXT:    vmv1r.v v11, v8
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    li a2, 6
; CHECK-O0-NEXT:    mul a1, a1, a2
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v8, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vsetvli zero, a4, e64, m1, ta, mu
; CHECK-O0-NEXT:    vfmadd.vv v10, v8, v9, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    # implicit-def: $v9
; CHECK-O0-NEXT:    vfneg.v v9, v8, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    # implicit-def: $v8
; CHECK-O0-NEXT:    vfcvt.f.x.v v8, v16, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v15, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v14, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v13, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v12, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v11, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v10, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v9, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 3
; CHECK-O0-NEXT:    sub a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v8, (a0), v0.t
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a0, a0, 3
; CHECK-O0-NEXT:    add sp, sp, a0
; CHECK-O0-NEXT:    ld ra, 40(sp) # 8-byte Folded Reload
; CHECK-O0-NEXT:    addi sp, sp, 48
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_vp_fp:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    addi sp, sp, -32
; CHECK-O2-NEXT:    sd ra, 24(sp) # 8-byte Folded Spill
; CHECK-O2-NEXT:    sd s0, 16(sp) # 8-byte Folded Spill
; CHECK-O2-NEXT:    sd s1, 8(sp) # 8-byte Folded Spill
; CHECK-O2-NEXT:    mv s0, a4
; CHECK-O2-NEXT:    vmv1r.v v16, v0
; CHECK-O2-NEXT:    lui a4, %hi(scratch)
; CHECK-O2-NEXT:    vsetvli zero, s0, e64, m1, ta, mu
; CHECK-O2-NEXT:    vle64.v v17, (a0), v0.t
; CHECK-O2-NEXT:    vle64.v v18, (a1), v0.t
; CHECK-O2-NEXT:    addi s1, a4, %lo(scratch)
; CHECK-O2-NEXT:    vle64.v v19, (a2), v0.t
; CHECK-O2-NEXT:    vle64.v v20, (a3), v0.t
; CHECK-O2-NEXT:    vfadd.vv v21, v17, v18, v0.t
; CHECK-O2-NEXT:    vfsub.vv v22, v17, v18, v0.t
; CHECK-O2-NEXT:    vfmul.vv v23, v17, v18, v0.t
; CHECK-O2-NEXT:    vfdiv.vv v24, v17, v18, v0.t
; CHECK-O2-NEXT:    vmv.v.v v8, v17
; CHECK-O2-NEXT:    vmv.v.v v9, v18
; CHECK-O2-NEXT:    mv a0, s0
; CHECK-O2-NEXT:    call __epi_fmod_nxv1f64_m@plt
; CHECK-O2-NEXT:    vsetvli zero, s0, e64, m1, ta, mu
; CHECK-O2-NEXT:    vmv1r.v v0, v16
; CHECK-O2-NEXT:    vfmadd.vv v18, v17, v19, v0.t
; CHECK-O2-NEXT:    vfneg.v v9, v17, v0.t
; CHECK-O2-NEXT:    vfcvt.f.x.v v10, v20, v0.t
; CHECK-O2-NEXT:    vse64.v v21, (s1), v0.t
; CHECK-O2-NEXT:    vse64.v v22, (s1), v0.t
; CHECK-O2-NEXT:    vse64.v v23, (s1), v0.t
; CHECK-O2-NEXT:    vse64.v v24, (s1), v0.t
; CHECK-O2-NEXT:    vse64.v v8, (s1), v0.t
; CHECK-O2-NEXT:    vse64.v v18, (s1), v0.t
; CHECK-O2-NEXT:    vse64.v v9, (s1), v0.t
; CHECK-O2-NEXT:    vse64.v v10, (s1), v0.t
; CHECK-O2-NEXT:    ld ra, 24(sp) # 8-byte Folded Reload
; CHECK-O2-NEXT:    ld s0, 16(sp) # 8-byte Folded Reload
; CHECK-O2-NEXT:    ld s1, 8(sp) # 8-byte Folded Reload
; CHECK-O2-NEXT:    addi sp, sp, 32
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 1 x double>*

  %i0 = call <vscale x 1 x double> @llvm.vp.load.nxv1f64(<vscale x 1 x double>* %a0, <vscale x 1 x i1> %m, i32 %n)
  %i1 = call <vscale x 1 x double> @llvm.vp.load.nxv1f64(<vscale x 1 x double>* %a1, <vscale x 1 x i1> %m, i32 %n)
  %i2 = call <vscale x 1 x double> @llvm.vp.load.nxv1f64(<vscale x 1 x double>* %a2, <vscale x 1 x i1> %m, i32 %n)
  %i3 = call <vscale x 1 x i64> @llvm.vp.load.nxv1i64(<vscale x 1 x i64>* %a3, <vscale x 1 x i1> %m, i32 %n)

  %r0 = call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> %i0, <vscale x 1 x double> %i1, <vscale x 1 x i1> %m, i32 %n)
  %r1 = call <vscale x 1 x double> @llvm.vp.fsub.nxv1f64(<vscale x 1 x double> %i0, <vscale x 1 x double> %i1, <vscale x 1 x i1> %m, i32 %n)
  %r2 = call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> %i0, <vscale x 1 x double> %i1, <vscale x 1 x i1> %m, i32 %n)
  %r3 = call <vscale x 1 x double> @llvm.vp.fdiv.nxv1f64(<vscale x 1 x double> %i0, <vscale x 1 x double> %i1, <vscale x 1 x i1> %m, i32 %n)
  %r4 = call <vscale x 1 x double> @llvm.vp.frem.nxv1f64(<vscale x 1 x double> %i0, <vscale x 1 x double> %i1, <vscale x 1 x i1> %m, i32 %n)
  %r5 = call <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double> %i0, <vscale x 1 x double> %i1, <vscale x 1 x double> %i2, <vscale x 1 x i1> %m, i32 %n)
  %r6 = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %i0, <vscale x 1 x i1> %m, i32 %n)
  %r7 = call <vscale x 1 x double> @llvm.vp.sitofp.nxv1f64.nxv1i64(<vscale x 1 x i64> %i3, <vscale x 1 x i1> %m, i32 %n)

  call void @llvm.vp.store.nxv1f64(<vscale x 1 x double> %r0, <vscale x 1 x double>* %store_addr, <vscale x 1 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv1f64(<vscale x 1 x double> %r1, <vscale x 1 x double>* %store_addr, <vscale x 1 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv1f64(<vscale x 1 x double> %r2, <vscale x 1 x double>* %store_addr, <vscale x 1 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv1f64(<vscale x 1 x double> %r3, <vscale x 1 x double>* %store_addr, <vscale x 1 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv1f64(<vscale x 1 x double> %r4, <vscale x 1 x double>* %store_addr, <vscale x 1 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv1f64(<vscale x 1 x double> %r5, <vscale x 1 x double>* %store_addr, <vscale x 1 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv1f64(<vscale x 1 x double> %r6, <vscale x 1 x double>* %store_addr, <vscale x 1 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv1f64(<vscale x 1 x double> %r7, <vscale x 1 x double>* %store_addr, <vscale x 1 x i1> %m, i32 %n)

  ret void
}

define void @test_vp_fp_2(<vscale x 2 x float>* %a0, <vscale x 2 x float>* %a1, <vscale x 2 x float>* %a2, <vscale x 2 x i32>* %a3, i32 zeroext %n) nounwind {
; CHECK-O0-LABEL: test_vp_fp_2:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    addi sp, sp, -48
; CHECK-O0-NEXT:    sd ra, 40(sp) # 8-byte Folded Spill
; CHECK-O0-NEXT:    csrr a5, vlenb
; CHECK-O0-NEXT:    slli a6, a5, 3
; CHECK-O0-NEXT:    sub a5, a6, a5
; CHECK-O0-NEXT:    sub sp, sp, a5
; CHECK-O0-NEXT:    sd a4, 24(sp) # 8-byte Folded Spill
; CHECK-O0-NEXT:    mv a4, a0
; CHECK-O0-NEXT:    ld a0, 24(sp) # 8-byte Folded Reload
; CHECK-O0-NEXT:    # kill: def $x15 killed $x10
; CHECK-O0-NEXT:    lui a5, %hi(scratch)
; CHECK-O0-NEXT:    addi a5, a5, %lo(scratch)
; CHECK-O0-NEXT:    sd a5, 32(sp) # 8-byte Folded Spill
; CHECK-O0-NEXT:    vsetvli zero, a0, e32, m1, ta, mu
; CHECK-O0-NEXT:    vle32.v v8, (a4)
; CHECK-O0-NEXT:    csrr a4, vlenb
; CHECK-O0-NEXT:    add a4, sp, a4
; CHECK-O0-NEXT:    addi a4, a4, 40
; CHECK-O0-NEXT:    vs1r.v v8, (a4) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    vle32.v v9, (a1)
; CHECK-O0-NEXT:    addi a1, sp, 40
; CHECK-O0-NEXT:    vs1r.v v9, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    vle32.v v16, (a2)
; CHECK-O0-NEXT:    vle32.v v10, (a3)
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    li a2, 6
; CHECK-O0-NEXT:    mul a1, a1, a2
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs1r.v v10, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    vfadd.vv v10, v8, v9
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs1r.v v10, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    vfsub.vv v10, v8, v9
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 1
; CHECK-O0-NEXT:    add a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs1r.v v10, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    vfmul.vv v10, v8, v9
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 2
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs1r.v v10, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    vfdiv.vv v10, v8, v9
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a2, a1, 2
; CHECK-O0-NEXT:    add a1, a2, a1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs1r.v v10, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    call __epi_fmod_nxv2f32@plt
; CHECK-O0-NEXT:    ld a4, 24(sp) # 8-byte Folded Reload
; CHECK-O0-NEXT:    addi a0, sp, 40
; CHECK-O0-NEXT:    vl1r.v v10, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl1r.v v9, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a0, a0, 1
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl1r.v v15, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a1, a0, 1
; CHECK-O0-NEXT:    add a0, a1, a0
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl1r.v v14, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a0, a0, 2
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl1r.v v13, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a1, a0, 2
; CHECK-O0-NEXT:    add a0, a1, a0
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl1r.v v12, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    ld a0, 32(sp) # 8-byte Folded Reload
; CHECK-O0-NEXT:    vmv1r.v v11, v8
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    li a2, 6
; CHECK-O0-NEXT:    mul a1, a1, a2
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v8, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vsetvli zero, a4, e32, m1, ta, mu
; CHECK-O0-NEXT:    vfmadd.vv v10, v9, v16
; CHECK-O0-NEXT:    vfneg.v v9, v9
; CHECK-O0-NEXT:    vfcvt.f.x.v v8, v8
; CHECK-O0-NEXT:    vse32.v v15, (a0)
; CHECK-O0-NEXT:    vse32.v v14, (a0)
; CHECK-O0-NEXT:    vse32.v v13, (a0)
; CHECK-O0-NEXT:    vse32.v v12, (a0)
; CHECK-O0-NEXT:    vse32.v v11, (a0)
; CHECK-O0-NEXT:    vse32.v v10, (a0)
; CHECK-O0-NEXT:    vse32.v v9, (a0)
; CHECK-O0-NEXT:    vse32.v v8, (a0)
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a1, a0, 3
; CHECK-O0-NEXT:    sub a0, a1, a0
; CHECK-O0-NEXT:    add sp, sp, a0
; CHECK-O0-NEXT:    ld ra, 40(sp) # 8-byte Folded Reload
; CHECK-O0-NEXT:    addi sp, sp, 48
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_vp_fp_2:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    addi sp, sp, -32
; CHECK-O2-NEXT:    sd ra, 24(sp) # 8-byte Folded Spill
; CHECK-O2-NEXT:    sd s0, 16(sp) # 8-byte Folded Spill
; CHECK-O2-NEXT:    sd s1, 8(sp) # 8-byte Folded Spill
; CHECK-O2-NEXT:    mv s0, a4
; CHECK-O2-NEXT:    lui a4, %hi(scratch)
; CHECK-O2-NEXT:    vsetvli zero, s0, e32, m1, ta, mu
; CHECK-O2-NEXT:    vle32.v v16, (a0)
; CHECK-O2-NEXT:    vle32.v v17, (a1)
; CHECK-O2-NEXT:    addi s1, a4, %lo(scratch)
; CHECK-O2-NEXT:    vle32.v v18, (a2)
; CHECK-O2-NEXT:    vle32.v v19, (a3)
; CHECK-O2-NEXT:    vfadd.vv v20, v16, v17
; CHECK-O2-NEXT:    vfsub.vv v21, v16, v17
; CHECK-O2-NEXT:    vfmul.vv v22, v16, v17
; CHECK-O2-NEXT:    vfdiv.vv v23, v16, v17
; CHECK-O2-NEXT:    vmv.v.v v8, v16
; CHECK-O2-NEXT:    vmv.v.v v9, v17
; CHECK-O2-NEXT:    mv a0, s0
; CHECK-O2-NEXT:    call __epi_fmod_nxv2f32@plt
; CHECK-O2-NEXT:    vsetvli zero, s0, e32, m1, ta, mu
; CHECK-O2-NEXT:    vfmacc.vv v18, v16, v17
; CHECK-O2-NEXT:    vfneg.v v9, v16
; CHECK-O2-NEXT:    vfcvt.f.x.v v10, v19
; CHECK-O2-NEXT:    vse32.v v20, (s1)
; CHECK-O2-NEXT:    vse32.v v21, (s1)
; CHECK-O2-NEXT:    vse32.v v22, (s1)
; CHECK-O2-NEXT:    vse32.v v23, (s1)
; CHECK-O2-NEXT:    vse32.v v8, (s1)
; CHECK-O2-NEXT:    vse32.v v18, (s1)
; CHECK-O2-NEXT:    vse32.v v9, (s1)
; CHECK-O2-NEXT:    vse32.v v10, (s1)
; CHECK-O2-NEXT:    ld ra, 24(sp) # 8-byte Folded Reload
; CHECK-O2-NEXT:    ld s0, 16(sp) # 8-byte Folded Reload
; CHECK-O2-NEXT:    ld s1, 8(sp) # 8-byte Folded Reload
; CHECK-O2-NEXT:    addi sp, sp, 32
; CHECK-O2-NEXT:    ret
  %head = insertelement <vscale x 2 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 2 x i1> %head, <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer

  %store_addr = bitcast i8* @scratch to <vscale x 2 x float>*

  %i0 = call <vscale x 2 x float> @llvm.vp.load.nxv2f32(<vscale x 2 x float>* %a0, <vscale x 2 x i1> %allones, i32 %n)
  %i1 = call <vscale x 2 x float> @llvm.vp.load.nxv2f32(<vscale x 2 x float>* %a1, <vscale x 2 x i1> %allones, i32 %n)
  %i2 = call <vscale x 2 x float> @llvm.vp.load.nxv2f32(<vscale x 2 x float>* %a2, <vscale x 2 x i1> %allones, i32 %n)
  %i3 = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32(<vscale x 2 x i32>* %a3, <vscale x 2 x i1> %allones, i32 %n)

  %r0 = call <vscale x 2 x float> @llvm.vp.fadd.nxv2f32(<vscale x 2 x float> %i0, <vscale x 2 x float> %i1, <vscale x 2 x i1> %allones, i32 %n)
  %r1 = call <vscale x 2 x float> @llvm.vp.fsub.nxv2f32(<vscale x 2 x float> %i0, <vscale x 2 x float> %i1, <vscale x 2 x i1> %allones, i32 %n)
  %r2 = call <vscale x 2 x float> @llvm.vp.fmul.nxv2f32(<vscale x 2 x float> %i0, <vscale x 2 x float> %i1, <vscale x 2 x i1> %allones, i32 %n)
  %r3 = call <vscale x 2 x float> @llvm.vp.fdiv.nxv2f32(<vscale x 2 x float> %i0, <vscale x 2 x float> %i1, <vscale x 2 x i1> %allones, i32 %n)
  %r4 = call <vscale x 2 x float> @llvm.vp.frem.nxv2f32(<vscale x 2 x float> %i0, <vscale x 2 x float> %i1, <vscale x 2 x i1> %allones, i32 %n)
  %r5 = call <vscale x 2 x float> @llvm.vp.fma.nxv2f32(<vscale x 2 x float> %i0, <vscale x 2 x float> %i1, <vscale x 2 x float> %i2, <vscale x 2 x i1> %allones, i32 %n)
  %r6 = call <vscale x 2 x float> @llvm.vp.fneg.nxv2f32(<vscale x 2 x float> %i0, <vscale x 2 x i1> %allones, i32 %n)
  %r7 = call <vscale x 2 x float> @llvm.vp.sitofp.nxv2f32.nxv2i32(<vscale x 2 x i32> %i3, <vscale x 2 x i1> %allones, i32 %n)

  call void @llvm.vp.store.nxv2f32(<vscale x 2 x float> %r0, <vscale x 2 x float>* %store_addr, <vscale x 2 x i1> %allones, i32 %n)
  call void @llvm.vp.store.nxv2f32(<vscale x 2 x float> %r1, <vscale x 2 x float>* %store_addr, <vscale x 2 x i1> %allones, i32 %n)
  call void @llvm.vp.store.nxv2f32(<vscale x 2 x float> %r2, <vscale x 2 x float>* %store_addr, <vscale x 2 x i1> %allones, i32 %n)
  call void @llvm.vp.store.nxv2f32(<vscale x 2 x float> %r3, <vscale x 2 x float>* %store_addr, <vscale x 2 x i1> %allones, i32 %n)
  call void @llvm.vp.store.nxv2f32(<vscale x 2 x float> %r4, <vscale x 2 x float>* %store_addr, <vscale x 2 x i1> %allones, i32 %n)
  call void @llvm.vp.store.nxv2f32(<vscale x 2 x float> %r5, <vscale x 2 x float>* %store_addr, <vscale x 2 x i1> %allones, i32 %n)
  call void @llvm.vp.store.nxv2f32(<vscale x 2 x float> %r6, <vscale x 2 x float>* %store_addr, <vscale x 2 x i1> %allones, i32 %n)
  call void @llvm.vp.store.nxv2f32(<vscale x 2 x float> %r7, <vscale x 2 x float>* %store_addr, <vscale x 2 x i1> %allones, i32 %n)

  ret void
}

define void @test_vp_fp_3(<vscale x 2 x double>* %a0, <vscale x 2 x double>* %a1, <vscale x 2 x double>* %a2, <vscale x 2 x i64>* %a3, <vscale x 2 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-O0-LABEL: test_vp_fp_3:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    addi sp, sp, -48
; CHECK-O0-NEXT:    sd ra, 40(sp) # 8-byte Folded Spill
; CHECK-O0-NEXT:    csrr a5, vlenb
; CHECK-O0-NEXT:    slli a6, a5, 4
; CHECK-O0-NEXT:    add a5, a6, a5
; CHECK-O0-NEXT:    sub sp, sp, a5
; CHECK-O0-NEXT:    sd a4, 24(sp) # 8-byte Folded Spill
; CHECK-O0-NEXT:    csrr a4, vlenb
; CHECK-O0-NEXT:    slli a4, a4, 4
; CHECK-O0-NEXT:    add a4, sp, a4
; CHECK-O0-NEXT:    addi a4, a4, 40
; CHECK-O0-NEXT:    vs1r.v v0, (a4) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    mv a4, a0
; CHECK-O0-NEXT:    ld a0, 24(sp) # 8-byte Folded Reload
; CHECK-O0-NEXT:    # kill: def $x15 killed $x10
; CHECK-O0-NEXT:    lui a5, %hi(scratch)
; CHECK-O0-NEXT:    addi a5, a5, %lo(scratch)
; CHECK-O0-NEXT:    sd a5, 32(sp) # 8-byte Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v8m2
; CHECK-O0-NEXT:    vsetvli zero, a0, e64, m2, ta, mu
; CHECK-O0-NEXT:    vle64.v v8, (a4), v0.t
; CHECK-O0-NEXT:    csrr a4, vlenb
; CHECK-O0-NEXT:    slli a4, a4, 4
; CHECK-O0-NEXT:    add a4, sp, a4
; CHECK-O0-NEXT:    addi a4, a4, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a4) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a4, vlenb
; CHECK-O0-NEXT:    li a5, 14
; CHECK-O0-NEXT:    mul a4, a4, a5
; CHECK-O0-NEXT:    add a4, sp, a4
; CHECK-O0-NEXT:    addi a4, a4, 40
; CHECK-O0-NEXT:    vs2r.v v8, (a4) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v10m2
; CHECK-O0-NEXT:    vle64.v v10, (a1), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    addi a1, sp, 40
; CHECK-O0-NEXT:    vs2r.v v10, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v12m2
; CHECK-O0-NEXT:    vle64.v v12, (a2), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 1
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs2r.v v12, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v12m2
; CHECK-O0-NEXT:    vle64.v v12, (a3), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 2
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs2r.v v12, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v12m2
; CHECK-O0-NEXT:    vfadd.vv v12, v8, v10, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    li a2, 6
; CHECK-O0-NEXT:    mul a1, a1, a2
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs2r.v v12, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v12m2
; CHECK-O0-NEXT:    vfsub.vv v12, v8, v10, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 3
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs2r.v v12, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v12m2
; CHECK-O0-NEXT:    vfmul.vv v12, v8, v10, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    li a2, 10
; CHECK-O0-NEXT:    mul a1, a1, a2
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs2r.v v12, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    # implicit-def: $v12m2
; CHECK-O0-NEXT:    vfdiv.vv v12, v8, v10, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    li a2, 12
; CHECK-O0-NEXT:    mul a1, a1, a2
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vs2r.v v12, (a1) # Unknown-size Folded Spill
; CHECK-O0-NEXT:    call __epi_fmod_nxv2f64_m@plt
; CHECK-O0-NEXT:    ld a4, 24(sp) # 8-byte Folded Reload
; CHECK-O0-NEXT:    addi a0, sp, 40
; CHECK-O0-NEXT:    vl2re8.v v12, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a0, a0, 1
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl2re8.v v10, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a0, a0, 2
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl2re8.v v24, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    li a1, 6
; CHECK-O0-NEXT:    mul a0, a0, a1
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl2re8.v v22, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a0, a0, 3
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl2re8.v v20, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    li a1, 10
; CHECK-O0-NEXT:    mul a0, a0, a1
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl2re8.v v18, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    li a1, 12
; CHECK-O0-NEXT:    mul a0, a0, a1
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl2re8.v v16, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a0, a0, 4
; CHECK-O0-NEXT:    add a0, sp, a0
; CHECK-O0-NEXT:    addi a0, a0, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a0) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    ld a0, 32(sp) # 8-byte Folded Reload
; CHECK-O0-NEXT:    vmv2r.v v14, v8
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    li a2, 14
; CHECK-O0-NEXT:    mul a1, a1, a2
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl2re8.v v8, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vsetvli zero, a4, e64, m2, ta, mu
; CHECK-O0-NEXT:    vfmadd.vv v12, v8, v10, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    # implicit-def: $v10m2
; CHECK-O0-NEXT:    vfneg.v v10, v8, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    # implicit-def: $v8m2
; CHECK-O0-NEXT:    vfcvt.f.x.v v8, v24, v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v22, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v20, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v18, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v16, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v14, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v12, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v10, (a0), v0.t
; CHECK-O0-NEXT:    csrr a1, vlenb
; CHECK-O0-NEXT:    slli a1, a1, 4
; CHECK-O0-NEXT:    add a1, sp, a1
; CHECK-O0-NEXT:    addi a1, a1, 40
; CHECK-O0-NEXT:    vl1r.v v0, (a1) # Unknown-size Folded Reload
; CHECK-O0-NEXT:    vse64.v v8, (a0), v0.t
; CHECK-O0-NEXT:    csrr a0, vlenb
; CHECK-O0-NEXT:    slli a1, a0, 4
; CHECK-O0-NEXT:    add a0, a1, a0
; CHECK-O0-NEXT:    add sp, sp, a0
; CHECK-O0-NEXT:    ld ra, 40(sp) # 8-byte Folded Reload
; CHECK-O0-NEXT:    addi sp, sp, 48
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_vp_fp_3:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    addi sp, sp, -48
; CHECK-O2-NEXT:    sd ra, 40(sp) # 8-byte Folded Spill
; CHECK-O2-NEXT:    sd s0, 32(sp) # 8-byte Folded Spill
; CHECK-O2-NEXT:    sd s1, 24(sp) # 8-byte Folded Spill
; CHECK-O2-NEXT:    csrr a5, vlenb
; CHECK-O2-NEXT:    slli a5, a5, 4
; CHECK-O2-NEXT:    sub sp, sp, a5
; CHECK-O2-NEXT:    mv s0, a4
; CHECK-O2-NEXT:    vmv1r.v v16, v0
; CHECK-O2-NEXT:    lui a4, %hi(scratch)
; CHECK-O2-NEXT:    vsetvli zero, s0, e64, m2, ta, mu
; CHECK-O2-NEXT:    vle64.v v8, (a0), v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    slli a0, a0, 1
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vs2r.v v8, (a0) # Unknown-size Folded Spill
; CHECK-O2-NEXT:    vle64.v v10, (a1), v0.t
; CHECK-O2-NEXT:    addi a0, sp, 24
; CHECK-O2-NEXT:    vs2r.v v10, (a0) # Unknown-size Folded Spill
; CHECK-O2-NEXT:    addi s1, a4, %lo(scratch)
; CHECK-O2-NEXT:    vle64.v v12, (a2), v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    slli a0, a0, 2
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vs2r.v v12, (a0) # Unknown-size Folded Spill
; CHECK-O2-NEXT:    vle64.v v12, (a3), v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    li a1, 14
; CHECK-O2-NEXT:    mul a0, a0, a1
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vs2r.v v12, (a0) # Unknown-size Folded Spill
; CHECK-O2-NEXT:    vfadd.vv v12, v8, v10, v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    li a1, 12
; CHECK-O2-NEXT:    mul a0, a0, a1
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vs2r.v v12, (a0) # Unknown-size Folded Spill
; CHECK-O2-NEXT:    vfsub.vv v12, v8, v10, v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    li a1, 10
; CHECK-O2-NEXT:    mul a0, a0, a1
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vs2r.v v12, (a0) # Unknown-size Folded Spill
; CHECK-O2-NEXT:    vfmul.vv v12, v8, v10, v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    slli a0, a0, 3
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vs2r.v v12, (a0) # Unknown-size Folded Spill
; CHECK-O2-NEXT:    vfdiv.vv v12, v8, v10, v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    li a1, 6
; CHECK-O2-NEXT:    mul a0, a0, a1
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vs2r.v v12, (a0) # Unknown-size Folded Spill
; CHECK-O2-NEXT:    mv a0, s0
; CHECK-O2-NEXT:    call __epi_fmod_nxv2f64_m@plt
; CHECK-O2-NEXT:    vsetvli zero, s0, e64, m2, ta, mu
; CHECK-O2-NEXT:    vmv1r.v v0, v16
; CHECK-O2-NEXT:    addi a0, sp, 24
; CHECK-O2-NEXT:    vl2re8.v v14, (a0) # Unknown-size Folded Reload
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    slli a0, a0, 2
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vl2re8.v v10, (a0) # Unknown-size Folded Reload
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    slli a0, a0, 1
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vl2re8.v v12, (a0) # Unknown-size Folded Reload
; CHECK-O2-NEXT:    vfmadd.vv v14, v12, v10, v0.t
; CHECK-O2-NEXT:    vfneg.v v10, v12, v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    li a1, 14
; CHECK-O2-NEXT:    mul a0, a0, a1
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vl2re8.v v12, (a0) # Unknown-size Folded Reload
; CHECK-O2-NEXT:    vfcvt.f.x.v v12, v12, v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    li a1, 12
; CHECK-O2-NEXT:    mul a0, a0, a1
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vl2re8.v v18, (a0) # Unknown-size Folded Reload
; CHECK-O2-NEXT:    vse64.v v18, (s1), v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    li a1, 10
; CHECK-O2-NEXT:    mul a0, a0, a1
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vl2re8.v v18, (a0) # Unknown-size Folded Reload
; CHECK-O2-NEXT:    vse64.v v18, (s1), v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    slli a0, a0, 3
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vl2re8.v v18, (a0) # Unknown-size Folded Reload
; CHECK-O2-NEXT:    vse64.v v18, (s1), v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    li a1, 6
; CHECK-O2-NEXT:    mul a0, a0, a1
; CHECK-O2-NEXT:    add a0, sp, a0
; CHECK-O2-NEXT:    addi a0, a0, 24
; CHECK-O2-NEXT:    vl2re8.v v18, (a0) # Unknown-size Folded Reload
; CHECK-O2-NEXT:    vse64.v v18, (s1), v0.t
; CHECK-O2-NEXT:    vse64.v v8, (s1), v0.t
; CHECK-O2-NEXT:    vse64.v v14, (s1), v0.t
; CHECK-O2-NEXT:    vse64.v v10, (s1), v0.t
; CHECK-O2-NEXT:    vse64.v v12, (s1), v0.t
; CHECK-O2-NEXT:    csrr a0, vlenb
; CHECK-O2-NEXT:    slli a0, a0, 4
; CHECK-O2-NEXT:    add sp, sp, a0
; CHECK-O2-NEXT:    ld ra, 40(sp) # 8-byte Folded Reload
; CHECK-O2-NEXT:    ld s0, 32(sp) # 8-byte Folded Reload
; CHECK-O2-NEXT:    ld s1, 24(sp) # 8-byte Folded Reload
; CHECK-O2-NEXT:    addi sp, sp, 48
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x double>*

  %i0 = call <vscale x 2 x double> @llvm.vp.load.nxv2f64(<vscale x 2 x double>* %a0, <vscale x 2 x i1> %m, i32 %n)
  %i1 = call <vscale x 2 x double> @llvm.vp.load.nxv2f64(<vscale x 2 x double>* %a1, <vscale x 2 x i1> %m, i32 %n)
  %i2 = call <vscale x 2 x double> @llvm.vp.load.nxv2f64(<vscale x 2 x double>* %a2, <vscale x 2 x i1> %m, i32 %n)
  %i3 = call <vscale x 2 x i64> @llvm.vp.load.nxv2i64(<vscale x 2 x i64>* %a3, <vscale x 2 x i1> %m, i32 %n)

  %r0 = call <vscale x 2 x double> @llvm.vp.fadd.nxv2f64(<vscale x 2 x double> %i0, <vscale x 2 x double> %i1, <vscale x 2 x i1> %m, i32 %n)
  %r1 = call <vscale x 2 x double> @llvm.vp.fsub.nxv2f64(<vscale x 2 x double> %i0, <vscale x 2 x double> %i1, <vscale x 2 x i1> %m, i32 %n)
  %r2 = call <vscale x 2 x double> @llvm.vp.fmul.nxv2f64(<vscale x 2 x double> %i0, <vscale x 2 x double> %i1, <vscale x 2 x i1> %m, i32 %n)
  %r3 = call <vscale x 2 x double> @llvm.vp.fdiv.nxv2f64(<vscale x 2 x double> %i0, <vscale x 2 x double> %i1, <vscale x 2 x i1> %m, i32 %n)
  %r4 = call <vscale x 2 x double> @llvm.vp.frem.nxv2f64(<vscale x 2 x double> %i0, <vscale x 2 x double> %i1, <vscale x 2 x i1> %m, i32 %n)
  %r5 = call <vscale x 2 x double> @llvm.vp.fma.nxv2f64(<vscale x 2 x double> %i0, <vscale x 2 x double> %i1, <vscale x 2 x double> %i2, <vscale x 2 x i1> %m, i32 %n)
  %r6 = call <vscale x 2 x double> @llvm.vp.fneg.nxv2f64(<vscale x 2 x double> %i0, <vscale x 2 x i1> %m, i32 %n)
  %r7 = call <vscale x 2 x double> @llvm.vp.sitofp.nxv2f64.nxv2i64(<vscale x 2 x i64> %i3, <vscale x 2 x i1> %m, i32 %n)

  call void @llvm.vp.store.nxv2f64(<vscale x 2 x double> %r0, <vscale x 2 x double>* %store_addr, <vscale x 2 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv2f64(<vscale x 2 x double> %r1, <vscale x 2 x double>* %store_addr, <vscale x 2 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv2f64(<vscale x 2 x double> %r2, <vscale x 2 x double>* %store_addr, <vscale x 2 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv2f64(<vscale x 2 x double> %r3, <vscale x 2 x double>* %store_addr, <vscale x 2 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv2f64(<vscale x 2 x double> %r4, <vscale x 2 x double>* %store_addr, <vscale x 2 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv2f64(<vscale x 2 x double> %r5, <vscale x 2 x double>* %store_addr, <vscale x 2 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv2f64(<vscale x 2 x double> %r6, <vscale x 2 x double>* %store_addr, <vscale x 2 x i1> %m, i32 %n)
  call void @llvm.vp.store.nxv2f64(<vscale x 2 x double> %r7, <vscale x 2 x double>* %store_addr, <vscale x 2 x i1> %m, i32 %n)

  ret void
}

; load/store (m1)
declare <vscale x 1 x double> @llvm.vp.load.nxv1f64(<vscale x 1 x double>*, <vscale x 1 x i1>, i32)
declare <vscale x 1 x i64> @llvm.vp.load.nxv1i64(<vscale x 1 x i64>*, <vscale x 1 x i1>, i32)
declare void @llvm.vp.store.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>*, <vscale x 1 x i1>, i32)
; float arith (double, m1)
declare <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x i1>, i32)
declare <vscale x 1 x double> @llvm.vp.fsub.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x i1>, i32)
declare <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x i1>, i32)
declare <vscale x 1 x double> @llvm.vp.fdiv.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x i1>, i32)
declare <vscale x 1 x double> @llvm.vp.frem.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x i1>, i32)
declare <vscale x 1 x double> @llvm.vp.fma.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x i1>, i32)
declare <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double>, <vscale x 1 x i1>, i32)
declare <vscale x 1 x double> @llvm.vp.sitofp.nxv1f64.nxv1i64(<vscale x 1 x i64>, <vscale x 1 x i1>, i32)

; load/store (m1)
declare <vscale x 2 x float> @llvm.vp.load.nxv2f32(<vscale x 2 x float>*, <vscale x 2 x i1>, i32)
declare <vscale x 2 x i32> @llvm.vp.load.nxv2i32(<vscale x 2 x i32>*, <vscale x 2 x i1>, i32)
declare void @llvm.vp.store.nxv2f32(<vscale x 2 x float>, <vscale x 2 x float>*, <vscale x 2 x i1>, i32)
; float arith (float, m1)
declare <vscale x 2 x float> @llvm.vp.fadd.nxv2f32(<vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x float> @llvm.vp.fsub.nxv2f32(<vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x float> @llvm.vp.fmul.nxv2f32(<vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x float> @llvm.vp.fdiv.nxv2f32(<vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x float> @llvm.vp.frem.nxv2f32(<vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x float> @llvm.vp.fma.nxv2f32(<vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x float> @llvm.vp.fneg.nxv2f32(<vscale x 2 x float>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x float> @llvm.vp.sitofp.nxv2f32.nxv2i32(<vscale x 2 x i32>, <vscale x 2 x i1>, i32)

; load/store (m2)
declare <vscale x 2 x double> @llvm.vp.load.nxv2f64(<vscale x 2 x double>*, <vscale x 2 x i1>, i32)
declare <vscale x 2 x i64> @llvm.vp.load.nxv2i64(<vscale x 2 x i64>*, <vscale x 2 x i1>, i32)
declare void @llvm.vp.store.nxv2f64(<vscale x 2 x double>, <vscale x 2 x double>*, <vscale x 2 x i1>, i32)
; float arith (double, m2)
declare <vscale x 2 x double> @llvm.vp.fadd.nxv2f64(<vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x double> @llvm.vp.fsub.nxv2f64(<vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x double> @llvm.vp.fmul.nxv2f64(<vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x double> @llvm.vp.fdiv.nxv2f64(<vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x double> @llvm.vp.frem.nxv2f64(<vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x double> @llvm.vp.fma.nxv2f64(<vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x double>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x double> @llvm.vp.fneg.nxv2f64(<vscale x 2 x double>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x double> @llvm.vp.sitofp.nxv2f64.nxv2i64(<vscale x 2 x i64>, <vscale x 2 x i1>, i32)
