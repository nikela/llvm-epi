; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+v -verify-machineinstrs -epi-pipeline < %s \
; RUN:   | FileCheck %s

define i8 @test_vp_reduce_mul_nxv1i8(i8 %x, <vscale x 1 x i8> %v, <vscale x 1 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv1i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv1i8@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i8 @llvm.vp.reduce.mul.nxv1i8(i8 %x, <vscale x 1 x i8> %v, <vscale x 1 x i1> %m, i32 %evl)
  ret i8 %result
}

define i8 @test_vp_reduce_mul_nxv2i8(i8 %x, <vscale x 2 x i8> %v, <vscale x 2 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv2i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv2i8@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i8 @llvm.vp.reduce.mul.nxv2i8(i8 %x, <vscale x 2 x i8> %v, <vscale x 2 x i1> %m, i32 %evl)
  ret i8 %result
}

define i8 @test_vp_reduce_mul_nxv4i8(i8 %x, <vscale x 4 x i8> %v, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv4i8@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i8 @llvm.vp.reduce.mul.nxv4i8(i8 %x, <vscale x 4 x i8> %v, <vscale x 4 x i1> %m, i32 %evl)
  ret i8 %result
}

define i8 @test_vp_reduce_mul_nxv8i8(i8 %x, <vscale x 8 x i8> %v, <vscale x 8 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv8i8@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i8 @llvm.vp.reduce.mul.nxv8i8(i8 %x, <vscale x 8 x i8> %v, <vscale x 8 x i1> %m, i32 %evl)
  ret i8 %result
}

define i8 @test_vp_reduce_mul_nxv16i8(i8 %x, <vscale x 16 x i8> %v, <vscale x 16 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv16i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv16i8@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i8 @llvm.vp.reduce.mul.nxv16i8(i8 %x, <vscale x 16 x i8> %v, <vscale x 16 x i1> %m, i32 %evl)
  ret i8 %result
}

define i8 @test_vp_reduce_mul_nxv32i8(i8 %x, <vscale x 32 x i8> %v, <vscale x 32 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv32i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv32i8@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i8 @llvm.vp.reduce.mul.nxv32i8(i8 %x, <vscale x 32 x i8> %v, <vscale x 32 x i1> %m, i32 %evl)
  ret i8 %result
}

define i8 @test_vp_reduce_mul_nxv64i8(i8 %x, <vscale x 64 x i8> %v, <vscale x 64 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv64i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv64i8@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i8 @llvm.vp.reduce.mul.nxv64i8(i8 %x, <vscale x 64 x i8> %v, <vscale x 64 x i1> %m, i32 %evl)
  ret i8 %result
}

define i16 @test_vp_reduce_mul_nxv1i16(i16 %x, <vscale x 1 x i16> %v, <vscale x 1 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv1i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv1i16@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i16 @llvm.vp.reduce.mul.nxv1i16(i16 %x, <vscale x 1 x i16> %v, <vscale x 1 x i1> %m, i32 %evl)
  ret i16 %result
}

define i16 @test_vp_reduce_mul_nxv2i16(i16 %x, <vscale x 2 x i16> %v, <vscale x 2 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv2i16@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i16 @llvm.vp.reduce.mul.nxv2i16(i16 %x, <vscale x 2 x i16> %v, <vscale x 2 x i1> %m, i32 %evl)
  ret i16 %result
}

define i16 @test_vp_reduce_mul_nxv4i16(i16 %x, <vscale x 4 x i16> %v, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv4i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv4i16@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i16 @llvm.vp.reduce.mul.nxv4i16(i16 %x, <vscale x 4 x i16> %v, <vscale x 4 x i1> %m, i32 %evl)
  ret i16 %result
}

define i16 @test_vp_reduce_mul_nxv8i16(i16 %x, <vscale x 8 x i16> %v, <vscale x 8 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv8i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv8i16@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i16 @llvm.vp.reduce.mul.nxv8i16(i16 %x, <vscale x 8 x i16> %v, <vscale x 8 x i1> %m, i32 %evl)
  ret i16 %result
}

define i16 @test_vp_reduce_mul_nxv16i16(i16 %x, <vscale x 16 x i16> %v, <vscale x 16 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv16i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv16i16@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i16 @llvm.vp.reduce.mul.nxv16i16(i16 %x, <vscale x 16 x i16> %v, <vscale x 16 x i1> %m, i32 %evl)
  ret i16 %result
}

define i16 @test_vp_reduce_mul_nxv32i16(i16 %x, <vscale x 32 x i16> %v, <vscale x 32 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv32i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv32i16@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i16 @llvm.vp.reduce.mul.nxv32i16(i16 %x, <vscale x 32 x i16> %v, <vscale x 32 x i1> %m, i32 %evl)
  ret i16 %result
}

define i32 @test_vp_reduce_mul_nxv1i32(i32 %x, <vscale x 1 x i32> %v, <vscale x 1 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv1i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv1i32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i32 @llvm.vp.reduce.mul.nxv1i32(i32 %x, <vscale x 1 x i32> %v, <vscale x 1 x i1> %m, i32 %evl)
  ret i32 %result
}

define i32 @test_vp_reduce_mul_nxv2i32(i32 %x, <vscale x 2 x i32> %v, <vscale x 2 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv2i32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i32 @llvm.vp.reduce.mul.nxv2i32(i32 %x, <vscale x 2 x i32> %v, <vscale x 2 x i1> %m, i32 %evl)
  ret i32 %result
}

define i32 @test_vp_reduce_mul_nxv4i32(i32 %x, <vscale x 4 x i32> %v, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv4i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv4i32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i32 @llvm.vp.reduce.mul.nxv4i32(i32 %x, <vscale x 4 x i32> %v, <vscale x 4 x i1> %m, i32 %evl)
  ret i32 %result
}

define i32 @test_vp_reduce_mul_nxv8i32(i32 %x, <vscale x 8 x i32> %v, <vscale x 8 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv8i32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i32 @llvm.vp.reduce.mul.nxv8i32(i32 %x, <vscale x 8 x i32> %v, <vscale x 8 x i1> %m, i32 %evl)
  ret i32 %result
}

define i32 @test_vp_reduce_mul_nxv16i32(i32 %x, <vscale x 16 x i32> %v, <vscale x 16 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv16i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv16i32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i32 @llvm.vp.reduce.mul.nxv16i32(i32 %x, <vscale x 16 x i32> %v, <vscale x 16 x i1> %m, i32 %evl)
  ret i32 %result
}

define i64 @test_vp_reduce_mul_nxv1i64(i64 %x, <vscale x 1 x i64> %v, <vscale x 1 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv1i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv1i64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i64 @llvm.vp.reduce.mul.nxv1i64(i64 %x, <vscale x 1 x i64> %v, <vscale x 1 x i1> %m, i32 %evl)
  ret i64 %result
}

define i64 @test_vp_reduce_mul_nxv2i64(i64 %x, <vscale x 2 x i64> %v, <vscale x 2 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv2i64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i64 @llvm.vp.reduce.mul.nxv2i64(i64 %x, <vscale x 2 x i64> %v, <vscale x 2 x i1> %m, i32 %evl)
  ret i64 %result
}

define i64 @test_vp_reduce_mul_nxv4i64(i64 %x, <vscale x 4 x i64> %v, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv4i64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i64 @llvm.vp.reduce.mul.nxv4i64(i64 %x, <vscale x 4 x i64> %v, <vscale x 4 x i1> %m, i32 %evl)
  ret i64 %result
}

define i64 @test_vp_reduce_mul_nxv8i64(i64 %x, <vscale x 8 x i64> %v, <vscale x 8 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_mul_nxv8i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_mul_nxv8i64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call i64 @llvm.vp.reduce.mul.nxv8i64(i64 %x, <vscale x 8 x i64> %v, <vscale x 8 x i1> %m, i32 %evl)
  ret i64 %result
}

declare i8 @llvm.vp.reduce.mul.nxv1i8(i8, <vscale x 1 x i8>, <vscale x 1 x i1>, i32)
declare i8 @llvm.vp.reduce.mul.nxv2i8(i8, <vscale x 2 x i8>, <vscale x 2 x i1>, i32)
declare i8 @llvm.vp.reduce.mul.nxv4i8(i8, <vscale x 4 x i8>, <vscale x 4 x i1>, i32)
declare i8 @llvm.vp.reduce.mul.nxv8i8(i8, <vscale x 8 x i8>, <vscale x 8 x i1>, i32)
declare i8 @llvm.vp.reduce.mul.nxv16i8(i8, <vscale x 16 x i8>, <vscale x 16 x i1>, i32)
declare i8 @llvm.vp.reduce.mul.nxv32i8(i8, <vscale x 32 x i8>, <vscale x 32 x i1>, i32)
declare i8 @llvm.vp.reduce.mul.nxv64i8(i8, <vscale x 64 x i8>, <vscale x 64 x i1>, i32)

declare i16 @llvm.vp.reduce.mul.nxv1i16(i16, <vscale x 1 x i16>, <vscale x 1 x i1>, i32)
declare i16 @llvm.vp.reduce.mul.nxv2i16(i16, <vscale x 2 x i16>, <vscale x 2 x i1>, i32)
declare i16 @llvm.vp.reduce.mul.nxv4i16(i16, <vscale x 4 x i16>, <vscale x 4 x i1>, i32)
declare i16 @llvm.vp.reduce.mul.nxv8i16(i16, <vscale x 8 x i16>, <vscale x 8 x i1>, i32)
declare i16 @llvm.vp.reduce.mul.nxv16i16(i16, <vscale x 16 x i16>, <vscale x 16 x i1>, i32)
declare i16 @llvm.vp.reduce.mul.nxv32i16(i16, <vscale x 32 x i16>, <vscale x 32 x i1>, i32)

declare i32 @llvm.vp.reduce.mul.nxv1i32(i32, <vscale x 1 x i32>, <vscale x 1 x i1>, i32)
declare i32 @llvm.vp.reduce.mul.nxv2i32(i32, <vscale x 2 x i32>, <vscale x 2 x i1>, i32)
declare i32 @llvm.vp.reduce.mul.nxv4i32(i32, <vscale x 4 x i32>, <vscale x 4 x i1>, i32)
declare i32 @llvm.vp.reduce.mul.nxv8i32(i32, <vscale x 8 x i32>, <vscale x 8 x i1>, i32)
declare i32 @llvm.vp.reduce.mul.nxv16i32(i32, <vscale x 16 x i32>, <vscale x 16 x i1>, i32)

declare i64 @llvm.vp.reduce.mul.nxv1i64(i64, <vscale x 1 x i64>, <vscale x 1 x i1>, i32)
declare i64 @llvm.vp.reduce.mul.nxv2i64(i64, <vscale x 2 x i64>, <vscale x 2 x i1>, i32)
declare i64 @llvm.vp.reduce.mul.nxv4i64(i64, <vscale x 4 x i64>, <vscale x 4 x i1>, i32)
declare i64 @llvm.vp.reduce.mul.nxv8i64(i64, <vscale x 8 x i64>, <vscale x 8 x i1>, i32)
