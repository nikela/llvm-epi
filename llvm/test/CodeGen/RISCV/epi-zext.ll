; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple riscv64 -mattr +experimental-v -o - %s \
; RUN:   -verify-machineinstrs -epi-pipeline | FileCheck %s

; 32 -> 64
define <vscale x 2 x i64> @test_zext_i32_i64_m1(<vscale x 2 x i32> %a) nounwind
; CHECK-LABEL: test_zext_i32_i64_m1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m2,ta,mu
; CHECK-NEXT:    vzext.vf2 v26, v8
; CHECK-NEXT:    vmv2r.v v8, v26
; CHECK-NEXT:    ret
{
  %b = zext <vscale x 2 x i32> %a to <vscale x 2 x i64>
  ret <vscale x 2 x i64> %b
}

define <vscale x 4 x i64> @test_zext_i32_i64_m2(<vscale x 4 x i32> %a) nounwind
; CHECK-LABEL: test_zext_i32_i64_m2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m4,ta,mu
; CHECK-NEXT:    vzext.vf2 v28, v8
; CHECK-NEXT:    vmv4r.v v8, v28
; CHECK-NEXT:    ret
{
  %b = zext <vscale x 4 x i32> %a to <vscale x 4 x i64>
  ret <vscale x 4 x i64> %b
}

define <vscale x 8 x i64> @test_zext_i32_i64_m4(<vscale x 8 x i32> %a) nounwind
; CHECK-LABEL: test_zext_i32_i64_m4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m8,ta,mu
; CHECK-NEXT:    vzext.vf2 v16, v8
; CHECK-NEXT:    vmv8r.v v8, v16
; CHECK-NEXT:    ret
{
  %b = zext <vscale x 8 x i32> %a to <vscale x 8 x i64>
  ret <vscale x 8 x i64> %b
}

; 16 -> 32
define <vscale x 4 x i32> @test_zext_i16_i32_m1(<vscale x 4 x i16> %a) nounwind
; CHECK-LABEL: test_zext_i16_i32_m1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32,m2,ta,mu
; CHECK-NEXT:    vzext.vf2 v26, v8
; CHECK-NEXT:    vmv2r.v v8, v26
; CHECK-NEXT:    ret
{
  %b = zext <vscale x 4 x i16> %a to <vscale x 4 x i32>
  ret <vscale x 4 x i32> %b
}

define <vscale x 8 x i32> @test_zext_i16_i32_m2(<vscale x 8 x i16> %a) nounwind
; CHECK-LABEL: test_zext_i16_i32_m2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32,m4,ta,mu
; CHECK-NEXT:    vzext.vf2 v28, v8
; CHECK-NEXT:    vmv4r.v v8, v28
; CHECK-NEXT:    ret
{
  %b = zext <vscale x 8 x i16> %a to <vscale x 8 x i32>
  ret <vscale x 8 x i32> %b
}

define <vscale x 16 x i32> @test_zext_i16_i32_m4(<vscale x 16 x i16> %a) nounwind
; CHECK-LABEL: test_zext_i16_i32_m4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32,m8,ta,mu
; CHECK-NEXT:    vzext.vf2 v16, v8
; CHECK-NEXT:    vmv8r.v v8, v16
; CHECK-NEXT:    ret
{
  %b = zext <vscale x 16 x i16> %a to <vscale x 16 x i32>
  ret <vscale x 16 x i32> %b
}

; 8 -> 16
define <vscale x 8 x i16> @test_zext_i8_i16_m1(<vscale x 8 x i8> %a) nounwind
; CHECK-LABEL: test_zext_i8_i16_m1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16,m2,ta,mu
; CHECK-NEXT:    vzext.vf2 v26, v8
; CHECK-NEXT:    vmv2r.v v8, v26
; CHECK-NEXT:    ret
{
  %b = zext <vscale x 8 x i8> %a to <vscale x 8 x i16>
  ret <vscale x 8 x i16> %b
}

define <vscale x 16 x i16> @test_zext_i8_i16_m2(<vscale x 16 x i8> %a) nounwind
; CHECK-LABEL: test_zext_i8_i16_m2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16,m4,ta,mu
; CHECK-NEXT:    vzext.vf2 v28, v8
; CHECK-NEXT:    vmv4r.v v8, v28
; CHECK-NEXT:    ret
{
  %b = zext <vscale x 16 x i8> %a to <vscale x 16 x i16>
  ret <vscale x 16 x i16> %b
}

define <vscale x 32 x i16> @test_zext_i8_i16_m4(<vscale x 32 x i8> %a) nounwind
; CHECK-LABEL: test_zext_i8_i16_m4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16,m8,ta,mu
; CHECK-NEXT:    vzext.vf2 v16, v8
; CHECK-NEXT:    vmv8r.v v8, v16
; CHECK-NEXT:    ret
{
  %b = zext <vscale x 32 x i8> %a to <vscale x 32 x i16>
  ret <vscale x 32 x i16> %b
}
