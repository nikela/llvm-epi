; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple riscv64 -mattr=+f,+d,+experimental-v -verify-machineinstrs < %s \
; RUN:    -epi-pipeline | FileCheck %s

@scratch = global i8 0, align 16

define <vscale x 1 x double> @nxv1f64(<vscale x 1 x double> %a) nounwind {
; CHECK-LABEL: nxv1f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64, m1, ta, mu
; CHECK-NEXT:    vfsqrt.v v8, v8
; CHECK-NEXT:    ret
  %res = call <vscale x 1 x double> @llvm.sqrt.nxv1f64(<vscale x 1 x double> %a)
  ret <vscale x 1 x double> %res
}

define <vscale x 2 x float> @nxv2f32(<vscale x 2 x float> %a) nounwind {
; CHECK-LABEL: nxv2f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m1, ta, mu
; CHECK-NEXT:    vfsqrt.v v8, v8
; CHECK-NEXT:    ret
  %res = call <vscale x 2 x float> @llvm.sqrt.nxv2f32(<vscale x 2 x float> %a)
  ret <vscale x 2 x float> %res
}

define <vscale x 2 x double> @nxv2f64(<vscale x 2 x double> %a) nounwind {
; CHECK-LABEL: nxv2f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64, m2, ta, mu
; CHECK-NEXT:    vfsqrt.v v8, v8
; CHECK-NEXT:    ret
  %res = call <vscale x 2 x double> @llvm.sqrt.nxv2f64(<vscale x 2 x double> %a)
  ret <vscale x 2 x double> %res
}

define <vscale x 4 x float> @nxv4f32(<vscale x 4 x float> %a) nounwind {
; CHECK-LABEL: nxv4f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m2, ta, mu
; CHECK-NEXT:    vfsqrt.v v8, v8
; CHECK-NEXT:    ret
  %res = call <vscale x 4 x float> @llvm.sqrt.nxv4f32(<vscale x 4 x float> %a)
  ret <vscale x 4 x float> %res
}

define <vscale x 4 x double> @nxv4f64(<vscale x 4 x double> %a) nounwind {
; CHECK-LABEL: nxv4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64, m4, ta, mu
; CHECK-NEXT:    vfsqrt.v v8, v8
; CHECK-NEXT:    ret
  %res = call <vscale x 4 x double> @llvm.sqrt.nxv4f64(<vscale x 4 x double> %a)
  ret <vscale x 4 x double> %res
}

define <vscale x 8 x float> @nxv8f32(<vscale x 8 x float> %a) nounwind {
; CHECK-LABEL: nxv8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m4, ta, mu
; CHECK-NEXT:    vfsqrt.v v8, v8
; CHECK-NEXT:    ret
  %res = call <vscale x 8 x float> @llvm.sqrt.nxv8f32(<vscale x 8 x float> %a)
  ret <vscale x 8 x float> %res
}

define <vscale x 8 x double> @nxv8f64(<vscale x 8 x double> %a) nounwind {
; CHECK-LABEL: nxv8f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64, m8, ta, mu
; CHECK-NEXT:    vfsqrt.v v8, v8
; CHECK-NEXT:    ret
  %res = call <vscale x 8 x double> @llvm.sqrt.nxv8f64(<vscale x 8 x double> %a)
  ret <vscale x 8 x double> %res
}

define <vscale x 16 x float> @nxv16f32(<vscale x 16 x float> %a) nounwind {
; CHECK-LABEL: nxv16f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m8, ta, mu
; CHECK-NEXT:    vfsqrt.v v8, v8
; CHECK-NEXT:    ret
  %res = call <vscale x 16 x float> @llvm.sqrt.nxv16f32(<vscale x 16 x float> %a)
  ret <vscale x 16 x float> %res
}

declare <vscale x 1 x double> @llvm.sqrt.nxv1f64(<vscale x 1 x double>)
declare <vscale x 2 x float> @llvm.sqrt.nxv2f32(<vscale x 2 x float>)
declare <vscale x 2 x double> @llvm.sqrt.nxv2f64(<vscale x 2 x double>)
declare <vscale x 4 x float> @llvm.sqrt.nxv4f32(<vscale x 4 x float>)
declare <vscale x 4 x double> @llvm.sqrt.nxv4f64(<vscale x 4 x double>)
declare <vscale x 8 x float> @llvm.sqrt.nxv8f32(<vscale x 8 x float>)
declare <vscale x 8 x double> @llvm.sqrt.nxv8f64(<vscale x 8 x double>)
declare <vscale x 16 x float> @llvm.sqrt.nxv16f32(<vscale x 16 x float>)
