; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+v -verify-machineinstrs -O0 \
; RUN:    < %s -epi-pipeline | FileCheck --check-prefix=CHECK-O0 %s
; RUN: llc -mtriple=riscv64 -mattr=+v -verify-machineinstrs -O2 \
; RUN:    < %s -epi-pipeline | FileCheck --check-prefix=CHECK-O2 %s

; vsetvl intrinsics are only used to compute a GVL output. The side-effects in
; the form of VType and VL (implicit) aren't tracked. Operating intrinsics will
; ensure the VType and VL are properly set for the operation.

declare i64 @llvm.epi.vsetvl(i64, i64, i64);

define void @test_vsetvl_single_1(i64 %avl) nounwind
; CHECK-O0-LABEL: test_vsetvl_single_1:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_vsetvl_single_1:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    ret
{
  call i64 @llvm.epi.vsetvl(i64 %avl, i64 0, i64 0)
  ret void
}

define i64 @test_vsetvl_single_2(i64 %avl) nounwind
; CHECK-O0-LABEL: test_vsetvl_single_2:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    vsetvli a0, a0, e8, m1, ta, mu
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_vsetvl_single_2:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    vsetvli a0, a0, e8, m1, ta, mu
; CHECK-O2-NEXT:    ret
{
  %gvl = call i64 @llvm.epi.vsetvl(i64 %avl, i64 0, i64 0)
  ret i64 %gvl
}
