; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+v -verify-machineinstrs -O0 \
; RUN:    < %s -epi-pipeline | FileCheck --check-prefix=CHECK-O0 %s
; RUN: llc -mtriple=riscv64 -mattr=+v -verify-machineinstrs -O2 \
; RUN:    < %s -epi-pipeline | FileCheck --check-prefix=CHECK-O2 %s

@scratch = global i8 0, align 16

define <vscale x 1 x i1> @test_vp_logical_and(<vscale x 1 x i1> %a0, i32 %n) nounwind {
; CHECK-O0-LABEL: test_vp_logical_and:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    # kill: def $x11 killed $x10
; CHECK-O0-NEXT:    vsetvli a1, zero, e8, mf8, ta, ma
; CHECK-O0-NEXT:    vmset.m v8
; CHECK-O0-NEXT:    slli a0, a0, 32
; CHECK-O0-NEXT:    srli a0, a0, 32
; CHECK-O0-NEXT:    vsetvli zero, a0, e8, mf8, ta, ma
; CHECK-O0-NEXT:    vmand.mm v0, v0, v8
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_vp_logical_and:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    vsetvli a1, zero, e8, mf8, ta, ma
; CHECK-O2-NEXT:    vmset.m v8
; CHECK-O2-NEXT:    slli a0, a0, 32
; CHECK-O2-NEXT:    srli a0, a0, 32
; CHECK-O2-NEXT:    vsetvli zero, a0, e8, mf8, ta, ma
; CHECK-O2-NEXT:    vmand.mm v0, v0, v8
; CHECK-O2-NEXT:    ret
  %head.1 = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head.1, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %r0 = call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %a0, <vscale x 1 x i1> %allones, <vscale x 1 x i1> %allones, i32 %n)

  ret <vscale x 1 x i1> %r0
}

define <vscale x 1 x i1> @test_vp_logical_or(<vscale x 1 x i1> %a0, i32 %n) nounwind {
; CHECK-O0-LABEL: test_vp_logical_or:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    # kill: def $x11 killed $x10
; CHECK-O0-NEXT:    vsetvli a1, zero, e8, mf8, ta, ma
; CHECK-O0-NEXT:    vmset.m v8
; CHECK-O0-NEXT:    slli a0, a0, 32
; CHECK-O0-NEXT:    srli a0, a0, 32
; CHECK-O0-NEXT:    vsetvli zero, a0, e8, mf8, ta, ma
; CHECK-O0-NEXT:    vmor.mm v0, v0, v8
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_vp_logical_or:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    vsetvli a1, zero, e8, mf8, ta, ma
; CHECK-O2-NEXT:    vmset.m v8
; CHECK-O2-NEXT:    slli a0, a0, 32
; CHECK-O2-NEXT:    srli a0, a0, 32
; CHECK-O2-NEXT:    vsetvli zero, a0, e8, mf8, ta, ma
; CHECK-O2-NEXT:    vmor.mm v0, v0, v8
; CHECK-O2-NEXT:    ret
  %head.1 = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head.1, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %r0 = call <vscale x 1 x i1> @llvm.vp.or.nxv1i1(<vscale x 1 x i1> %a0, <vscale x 1 x i1> %allones, <vscale x 1 x i1> %allones, i32 %n)

  ret <vscale x 1 x i1> %r0
}

define <vscale x 1 x i1> @test_vp_logical_xor(<vscale x 1 x i1> %a0, i32 %n) nounwind {
; CHECK-O0-LABEL: test_vp_logical_xor:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    # kill: def $x11 killed $x10
; CHECK-O0-NEXT:    slli a0, a0, 32
; CHECK-O0-NEXT:    srli a0, a0, 32
; CHECK-O0-NEXT:    vsetvli zero, a0, e8, mf8, ta, ma
; CHECK-O0-NEXT:    vmnot.m v0, v0
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_vp_logical_xor:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    slli a0, a0, 32
; CHECK-O2-NEXT:    srli a0, a0, 32
; CHECK-O2-NEXT:    vsetvli zero, a0, e8, mf8, ta, ma
; CHECK-O2-NEXT:    vmnot.m v0, v0
; CHECK-O2-NEXT:    ret
  %head.1 = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head.1, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %r0 = call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> %a0, <vscale x 1 x i1> %allones, <vscale x 1 x i1> %allones, i32 %n)

  ret <vscale x 1 x i1> %r0
}

declare <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1>, <vscale x 1 x i1>, <vscale x 1 x i1>, i32)
declare <vscale x 1 x i1> @llvm.vp.or.nxv1i1(<vscale x 1 x i1>, <vscale x 1 x i1>, <vscale x 1 x i1>, i32)
declare <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1>, <vscale x 1 x i1>, <vscale x 1 x i1>, i32)
