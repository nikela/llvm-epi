; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-v -verify-machineinstrs < %s \
; RUN:    -epi-pipeline | FileCheck %s

; NOTE: This test checks that no unnecessary sign extensions show up when
; extracting a scalar element from a vector (notice 'signext' result).

declare i64 @llvm.epi.vmv.x.s.nxv2i64(<vscale x 1 x i64>)

define signext i64 @sext_i64(<vscale x 1 x i64> %a)
; CHECK-LABEL: sext_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, zero, e64,m1,ta,mu
; CHECK-NEXT:    vmv.x.s a0, v8
; CHECK-NEXT:    ret
{
  %res = call i64 @llvm.epi.vmv.x.s.nxv2i64(<vscale x 1 x i64> %a)
  ret i64 %res
}

declare i32 @llvm.epi.vmv.x.s.nxv2i32(<vscale x 2 x i32>)

define signext i32 @sext_i32(<vscale x 2 x i32> %a)
; CHECK-LABEL: sext_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, zero, e32,m1,ta,mu
; CHECK-NEXT:    vmv.x.s a0, v8
; CHECK-NEXT:    ret
{
  %res = call i32 @llvm.epi.vmv.x.s.nxv2i32(<vscale x 2 x i32> %a)
  ret i32 %res
}

declare i16 @llvm.epi.vmv.x.s.nxv4i16(<vscale x 4 x i16>)

define signext i16 @sext_i16(<vscale x 4 x i16> %a)
; CHECK-LABEL: sext_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, zero, e16,m1,ta,mu
; CHECK-NEXT:    vmv.x.s a0, v8
; CHECK-NEXT:    ret
{
  %res = call i16 @llvm.epi.vmv.x.s.nxv4i16(<vscale x 4 x i16> %a)
  ret i16 %res
}

declare i8 @llvm.epi.vmv.x.s.nxv8i8(<vscale x 8 x i8>)

define signext i8 @sext_i8(<vscale x 8 x i8> %a)
; CHECK-LABEL: sext_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, zero, e8,m1,ta,mu
; CHECK-NEXT:    vmv.x.s a0, v8
; CHECK-NEXT:    ret
{
  %res = call i8 @llvm.epi.vmv.x.s.nxv8i8(<vscale x 8 x i8> %a)
  ret i8 %res
}
