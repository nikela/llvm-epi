; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple riscv64 -mattr=+experimental-v,+f,+d -target-abi=lp64d \
; RUN:    < %s | FileCheck %s

define <vscale x 1 x i64> @binary_nxv1i64(<vscale x 1 x i64> %a, i64 %b) nounwind {
; CHECK-LABEL: binary_nxv1i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e64,m1,tu,mu
; CHECK-NEXT:    vadd.vx v16, v16, a0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i64> undef, i64 %b, i32 0
  %splat = shufflevector <vscale x 1 x i64> %head, <vscale x 1 x i64> undef, <vscale x 1 x i32> zeroinitializer
  %res = add <vscale x 1 x i64> %a, %splat
  ret <vscale x 1 x i64> %res
}

define <vscale x 1 x i64> @binary_nxv1i64_imm(<vscale x 1 x i64> %a) nounwind {
; CHECK-LABEL: binary_nxv1i64_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    vadd.vi v16, v16, 3
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i64> undef, i64 3, i32 0
  %splat = shufflevector <vscale x 1 x i64> %head, <vscale x 1 x i64> undef, <vscale x 1 x i32> zeroinitializer
  %res = add <vscale x 1 x i64> %a, %splat
  ret <vscale x 1 x i64> %res
}

define <vscale x 1 x i64> @binary_nxv1i64_rev(i64 %a, <vscale x 1 x i64> %b) nounwind {
; CHECK-LABEL: binary_nxv1i64_rev:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e64,m1,tu,mu
; CHECK-NEXT:    vadd.vx v16, v16, a0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i64> undef, i64 %a, i32 0
  %splat = shufflevector <vscale x 1 x i64> %head, <vscale x 1 x i64> undef, <vscale x 1 x i32> zeroinitializer
  %res = add <vscale x 1 x i64> %splat, %b
  ret <vscale x 1 x i64> %res
}

define <vscale x 1 x i64> @binary_nxv1i64_imm_rev(<vscale x 1 x i64> %b) nounwind {
; CHECK-LABEL: binary_nxv1i64_imm_rev:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    vadd.vi v16, v16, 3
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i64> undef, i64 3, i32 0
  %splat = shufflevector <vscale x 1 x i64> %head, <vscale x 1 x i64> undef, <vscale x 1 x i32> zeroinitializer
  %res = add <vscale x 1 x i64> %splat, %b
  ret <vscale x 1 x i64> %res
}

define <vscale x 1 x double> @binary_nxv1f64(<vscale x 1 x double> %a, double %b) nounwind {
; CHECK-LABEL: binary_nxv1f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    vfadd.vf v16, v16, fa0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x double> undef, double %b, i32 0
  %splat = shufflevector <vscale x 1 x double> %head, <vscale x 1 x double> undef, <vscale x 1 x i32> zeroinitializer
  %res = fadd <vscale x 1 x double> %a, %splat
  ret <vscale x 1 x double> %res
}

define <vscale x 1 x double> @binary_nxv1f64_imm(<vscale x 1 x double> %a) nounwind {
; CHECK-LABEL: binary_nxv1f64_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lui a0, %hi(.LCPI5_0)
; CHECK-NEXT:    fld ft0, %lo(.LCPI5_0)(a0)
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    vfadd.vf v16, v16, ft0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x double> undef, double 3.0, i32 0
  %splat = shufflevector <vscale x 1 x double> %head, <vscale x 1 x double> undef, <vscale x 1 x i32> zeroinitializer
  %res = fadd <vscale x 1 x double> %a, %splat
  ret <vscale x 1 x double> %res
}

define <vscale x 1 x double> @binary_nxv1f64_rev(double %a, <vscale x 1 x double> %b) nounwind {
; CHECK-LABEL: binary_nxv1f64_rev:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    vfadd.vf v16, v16, fa0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x double> undef, double %a, i32 0
  %splat = shufflevector <vscale x 1 x double> %head, <vscale x 1 x double> undef, <vscale x 1 x i32> zeroinitializer
  %res = fadd <vscale x 1 x double> %splat, %b
  ret <vscale x 1 x double> %res
}

define <vscale x 1 x double> @binary_nxv1f64_imm_rev(<vscale x 1 x double> %b) nounwind {
; CHECK-LABEL: binary_nxv1f64_imm_rev:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lui a0, %hi(.LCPI7_0)
; CHECK-NEXT:    fld ft0, %lo(.LCPI7_0)(a0)
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    vfadd.vf v16, v16, ft0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x double> undef, double 3.0, i32 0
  %splat = shufflevector <vscale x 1 x double> %head, <vscale x 1 x double> undef, <vscale x 1 x i32> zeroinitializer
  %res = fadd <vscale x 1 x double> %splat, %b
  ret <vscale x 1 x double> %res
}

define <vscale x 2 x i32> @binary_nxv1i32(<vscale x 2 x i32> %a, i32 %b) nounwind {
; CHECK-LABEL: binary_nxv1i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e32,m1,tu,mu
; CHECK-NEXT:    vadd.vx v16, v16, a0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x i32> undef, i32 %b, i32 0
  %splat = shufflevector <vscale x 2 x i32> %head, <vscale x 2 x i32> undef, <vscale x 2 x i32> zeroinitializer
  %res = add <vscale x 2 x i32> %a, %splat
  ret <vscale x 2 x i32> %res
}

define <vscale x 2 x i32> @binary_nxv1i32_imm(<vscale x 2 x i32> %a) nounwind {
; CHECK-LABEL: binary_nxv1i32_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32,m1,tu,mu
; CHECK-NEXT:    vadd.vi v16, v16, 3
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x i32> undef, i32 3, i32 0
  %splat = shufflevector <vscale x 2 x i32> %head, <vscale x 2 x i32> undef, <vscale x 2 x i32> zeroinitializer
  %res = add <vscale x 2 x i32> %a, %splat
  ret <vscale x 2 x i32> %res
}

define <vscale x 2 x float> @binary_nxv1f32(<vscale x 2 x float> %a, float %b) nounwind {
; CHECK-LABEL: binary_nxv1f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $f10_f killed $f10_f def $f10_d
; CHECK-NEXT:    vsetvli a0, zero, e32,m1,tu,mu
; CHECK-NEXT:    vfadd.vf v16, v16, fa0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x float> undef, float %b, i32 0
  %splat = shufflevector <vscale x 2 x float> %head, <vscale x 2 x float> undef, <vscale x 2 x i32> zeroinitializer
  %res = fadd <vscale x 2 x float> %a, %splat
  ret <vscale x 2 x float> %res
}

define <vscale x 2 x float> @binary_nxv1f32_imm(<vscale x 2 x float> %a) nounwind {
; CHECK-LABEL: binary_nxv1f32_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lui a0, %hi(.LCPI11_0)
; CHECK-NEXT:    flw ft0, %lo(.LCPI11_0)(a0)
; CHECK-NEXT:    vsetvli a0, zero, e32,m1,tu,mu
; CHECK-NEXT:    vfadd.vf v16, v16, ft0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x float> undef, float 3.0, i32 0
  %splat = shufflevector <vscale x 2 x float> %head, <vscale x 2 x float> undef, <vscale x 2 x i32> zeroinitializer
  %res = fadd <vscale x 2 x float> %a, %splat
  ret <vscale x 2 x float> %res
}

define <vscale x 1 x double> @ternary_nxv1f64(<vscale x 1 x double> %a, double %b, <vscale x 1 x double> %c) nounwind {
; CHECK-LABEL: ternary_nxv1f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    vfmadd.vf v16, fa0, v17
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x double> undef, double %b, i32 0
  %splat = shufflevector <vscale x 1 x double> %head, <vscale x 1 x double> undef, <vscale x 1 x i32> zeroinitializer
  %res = call <vscale x 1 x double> @llvm.fma.nxv1f64(<vscale x 1 x double> %a, <vscale x 1 x double> %splat, <vscale x 1 x double> %c)
  ret <vscale x 1 x double> %res
}

define <vscale x 1 x double> @ternary_nxv1f64_rev(double %a, <vscale x 1 x double> %b, <vscale x 1 x double> %c) nounwind {
; CHECK-LABEL: ternary_nxv1f64_rev:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    vfmadd.vf v16, fa0, v17
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x double> undef, double %a, i32 0
  %splat = shufflevector <vscale x 1 x double> %head, <vscale x 1 x double> undef, <vscale x 1 x i32> zeroinitializer
  %res = call <vscale x 1 x double> @llvm.fma.nxv1f64(<vscale x 1 x double> %splat, <vscale x 1 x double> %b, <vscale x 1 x double> %c)
  ret <vscale x 1 x double> %res
}

define <vscale x 2 x float> @ternary_nxv2f32(<vscale x 2 x float> %a, float %b, <vscale x 2 x float> %c) nounwind {
; CHECK-LABEL: ternary_nxv2f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $f10_f killed $f10_f def $f10_d
; CHECK-NEXT:    vsetvli a0, zero, e32,m1,tu,mu
; CHECK-NEXT:    vfmadd.vf v16, fa0, v17
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x float> undef, float %b, i32 0
  %splat = shufflevector <vscale x 2 x float> %head, <vscale x 2 x float> undef, <vscale x 2 x i32> zeroinitializer
  %res = call <vscale x 2 x float> @llvm.fma.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x float> %splat, <vscale x 2 x float> %c)
  ret <vscale x 2 x float> %res
}

define <vscale x 1 x i1> @relational_nxv1i64(<vscale x 1 x i64> %a, i64 %b) nounwind {
; CHECK-LABEL: relational_nxv1i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e64,m1,tu,mu
; CHECK-NEXT:    vmseq.vx v0, v16, a0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i64> undef, i64 %b, i32 0
  %splat = shufflevector <vscale x 1 x i64> %head, <vscale x 1 x i64> undef, <vscale x 1 x i32> zeroinitializer
  %res = icmp eq <vscale x 1 x i64> %a, %splat
  ret <vscale x 1 x i1> %res
}

define <vscale x 1 x i1> @relational_nxv1i64_imm(<vscale x 1 x i64> %a) nounwind {
; CHECK-LABEL: relational_nxv1i64_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    vmseq.vi v0, v16, 3
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i64> undef, i64 3, i32 0
  %splat = shufflevector <vscale x 1 x i64> %head, <vscale x 1 x i64> undef, <vscale x 1 x i32> zeroinitializer
  %res = icmp eq <vscale x 1 x i64> %a, %splat
  ret <vscale x 1 x i1> %res
}

define <vscale x 2 x i1> @relational_nxv2i32(<vscale x 2 x i64> %a, i64 %b) nounwind {
; CHECK-LABEL: relational_nxv2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e64,m2,tu,mu
; CHECK-NEXT:    vmseq.vx v0, v16, a0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x i64> undef, i64 %b, i32 0
  %splat = shufflevector <vscale x 2 x i64> %head, <vscale x 2 x i64> undef, <vscale x 2 x i32> zeroinitializer
  %res = icmp eq <vscale x 2 x i64> %a, %splat
  ret <vscale x 2 x i1> %res
}

define <vscale x 2 x i1> @relational_nxv2i32_imm(<vscale x 2 x i64> %a) nounwind {
; CHECK-LABEL: relational_nxv2i32_imm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m2,tu,mu
; CHECK-NEXT:    vmseq.vi v0, v16, 3
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x i64> undef, i64 3, i32 0
  %splat = shufflevector <vscale x 2 x i64> %head, <vscale x 2 x i64> undef, <vscale x 2 x i32> zeroinitializer
  %res = icmp eq <vscale x 2 x i64> %a, %splat
  ret <vscale x 2 x i1> %res
}

declare <vscale x 1 x double> @llvm.fma.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>)
declare <vscale x 2 x float> @llvm.fma.nxv2f32(<vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>)
