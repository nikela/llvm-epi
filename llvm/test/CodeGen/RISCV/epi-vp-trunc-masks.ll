; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+c,+v < %s -epi-pipeline | \
; RUN:     FileCheck %s

declare <vscale x 1 x i1> @llvm.vp.trunc.nxv1i1.nxv1i64(<vscale x 1 x i64> %op, <vscale x 1 x i1> %mask, i32 %evl)
declare <vscale x 2 x i1> @llvm.vp.trunc.nxv2i1.nxv2i32(<vscale x 2 x i32> %op, <vscale x 2 x i1> %mask, i32 %evl)
declare <vscale x 4 x i1> @llvm.vp.trunc.nxv4i1.nxv4i16(<vscale x 4 x i16> %op, <vscale x 4 x i1> %mask, i32 %evl)
declare <vscale x 8 x i1> @llvm.vp.trunc.nxv8i1.nxv8i8(<vscale x 8 x i8> %op, <vscale x 8 x i1> %mask, i32 %evl)

define <vscale x 1 x i1> @test_vp_trunc_nxv1i1_nxv1i64(<vscale x 1 x i64> %op, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_trunc_nxv1i1_nxv1i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vand.vi v8, v8, 1
; CHECK-NEXT:    vmsne.vi v0, v8, 0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %x = call <vscale x 1 x i1> @llvm.vp.trunc.nxv1i1.nxv1i64(<vscale x 1 x i64> %op, <vscale x 1 x i1> %allones, i32 %evl)
  ret <vscale x 1 x i1> %x
}

define <vscale x 1 x i1> @test_vp_trunc_masked_nxv1i1_nxv1i64(<vscale x 1 x i64> %op, <vscale x 1 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_trunc_masked_nxv1i1_nxv1i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, mu
; CHECK-NEXT:    vand.vi v8, v8, 1, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e64, m1, ta, ma
; CHECK-NEXT:    vmsne.vi v0, v8, 0, v0.t
; CHECK-NEXT:    ret
  %x = call <vscale x 1 x i1> @llvm.vp.trunc.nxv1i1.nxv1i64(<vscale x 1 x i64> %op, <vscale x 1 x i1> %mask, i32 %evl)
  ret <vscale x 1 x i1> %x
}

define <vscale x 2 x i1> @test_vp_trunc_nxv2i1_nxv2i32(<vscale x 2 x i32> %op, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_trunc_nxv2i1_nxv2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, mu
; CHECK-NEXT:    vand.vi v8, v8, 1
; CHECK-NEXT:    vmsne.vi v0, v8, 0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 2 x i1> %head, <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer

  %x = call <vscale x 2 x i1> @llvm.vp.trunc.nxv2i1.nxv2i32(<vscale x 2 x i32> %op, <vscale x 2 x i1> %allones, i32 %evl)
  ret <vscale x 2 x i1> %x
}

define <vscale x 2 x i1> @test_vp_trunc_masked_nxv2i1_nxv2i32(<vscale x 2 x i32> %op, <vscale x 2 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_trunc_masked_nxv2i1_nxv2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, mu
; CHECK-NEXT:    vand.vi v8, v8, 1, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, m1, ta, ma
; CHECK-NEXT:    vmsne.vi v0, v8, 0, v0.t
; CHECK-NEXT:    ret
  %x = call <vscale x 2 x i1> @llvm.vp.trunc.nxv2i1.nxv2i32(<vscale x 2 x i32> %op, <vscale x 2 x i1> %mask, i32 %evl)
  ret <vscale x 2 x i1> %x
}

define <vscale x 4 x i1> @test_vp_trunc_nxv4i1_nxv4i16(<vscale x 4 x i16> %op, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_trunc_nxv4i1_nxv4i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, m1, ta, mu
; CHECK-NEXT:    vand.vi v8, v8, 1
; CHECK-NEXT:    vmsne.vi v0, v8, 0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 4 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 4 x i1> %head, <vscale x 4 x i1> undef, <vscale x 4 x i32> zeroinitializer

  %x = call <vscale x 4 x i1> @llvm.vp.trunc.nxv4i1.nxv4i16(<vscale x 4 x i16> %op, <vscale x 4 x i1> %allones, i32 %evl)
  ret <vscale x 4 x i1> %x
}

define <vscale x 4 x i1> @test_vp_trunc_masked_nxv4i1_nxv4i16(<vscale x 4 x i16> %op, <vscale x 4 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_trunc_masked_nxv4i1_nxv4i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, m1, ta, mu
; CHECK-NEXT:    vand.vi v8, v8, 1, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e16, m1, ta, ma
; CHECK-NEXT:    vmsne.vi v0, v8, 0, v0.t
; CHECK-NEXT:    ret
  %x = call <vscale x 4 x i1> @llvm.vp.trunc.nxv4i1.nxv4i16(<vscale x 4 x i16> %op, <vscale x 4 x i1> %mask, i32 %evl)
  ret <vscale x 4 x i1> %x
}

define <vscale x 8 x i1> @test_vp_trunc_nxv8i1_nxv8i8(<vscale x 8 x i8> %op, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_trunc_nxv8i1_nxv8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, m1, ta, mu
; CHECK-NEXT:    vand.vi v8, v8, 1
; CHECK-NEXT:    vmsne.vi v0, v8, 0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 8 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 8 x i1> %head, <vscale x 8 x i1> undef, <vscale x 8 x i32> zeroinitializer

  %x = call <vscale x 8 x i1> @llvm.vp.trunc.nxv8i1.nxv8i8(<vscale x 8 x i8> %op, <vscale x 8 x i1> %allones, i32 %evl)
  ret <vscale x 8 x i1> %x
}

define <vscale x 8 x i1> @test_vp_trunc_masked_nxv8i1_nxv8i8(<vscale x 8 x i8> %op, <vscale x 8 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_trunc_masked_nxv8i1_nxv8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, m1, ta, mu
; CHECK-NEXT:    vand.vi v8, v8, 1, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e8, m1, ta, ma
; CHECK-NEXT:    vmsne.vi v0, v8, 0, v0.t
; CHECK-NEXT:    ret
  %x = call <vscale x 8 x i1> @llvm.vp.trunc.nxv8i1.nxv8i8(<vscale x 8 x i8> %op, <vscale x 8 x i1> %mask, i32 %evl)
  ret <vscale x 8 x i1> %x
}
