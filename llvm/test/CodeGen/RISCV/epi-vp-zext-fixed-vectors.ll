; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+c,+v -riscv-v-vector-bits-min=128 \
; RUN:     < %s | FileCheck %s

define <2 x i64> @zext.i64.i32(<2 x i32> %a, i32 zeroext %gvl)
; CHECK-LABEL: zext.i64.i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, ma
; CHECK-NEXT:    vzext.vf2 v9, v8
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
{
  %b = call <2 x i64> @llvm.vp.zext.v2i64.v2i32(<2 x i32> %a,
            <2 x i1> shufflevector (<2 x i1> insertelement (<2 x i1> undef, i1 true, i32 0), <2 x i1> undef, <2 x i32> zeroinitializer),
            i32 %gvl)
  ret <2 x i64> %b
}

define <2 x i64> @zext.i64.i32.mask(<2 x i32> %a, <2 x i1> %mask, i32 zeroext %gvl)
; CHECK-LABEL: zext.i64.i32.mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, ma
; CHECK-NEXT:    vzext.vf2 v9, v8, v0.t
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
{
  %b = call <2 x i64> @llvm.vp.zext.v2i64.v2i32(
               <2 x i32> %a,
               <2 x i1> %mask,
               i32 %gvl)
  ret <2 x i64> %b
}

declare <2 x i64> @llvm.vp.zext.v2i64.v2i32(<2 x i32> %a, <2 x i1> %mask, i32 %gvl)

define <4 x i32> @test_vp_zext_v4i32_v4i8(<4 x i8> %a, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_zext_v4i32_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; CHECK-NEXT:    vzext.vf4 v9, v8
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
    %m.first = insertelement <4 x i1> undef, i1 1, i32 0
    %m.splat = shufflevector <4 x i1> %m.first, <4 x i1> undef, <4 x i32> zeroinitializer
    %x = call <4 x i32> @llvm.vp.zext.v4i32.v4i8(<4 x i8> %a, <4 x i1> %m.splat, i32 %evl)
    ret <4 x i32> %x
}

define <4 x i32> @test_vp_zext_masked_v4i32_v4i8(<4 x i8> %a, <4 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_zext_masked_v4i32_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; CHECK-NEXT:    vzext.vf4 v9, v8, v0.t
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
    %x = call <4 x i32> @llvm.vp.zext.v4i32.v4i8(<4 x i8> %a, <4 x i1> %mask, i32 %evl)
    ret <4 x i32> %x
}

define <4 x i64> @test_vp_zext_v4i64_v4i8(<4 x i8> %a, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_zext_v4i64_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m2, ta, ma
; CHECK-NEXT:    vzext.vf8 v10, v8
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
    %m.first = insertelement <4 x i1> undef, i1 1, i32 0
    %m.splat = shufflevector <4 x i1> %m.first, <4 x i1> undef, <4 x i32> zeroinitializer
    %x = call <4 x i64> @llvm.vp.zext.v4i64.v4i8(<4 x i8> %a, <4 x i1> %m.splat, i32 %evl)
    ret <4 x i64> %x
}

define <4 x i64> @test_vp_zext_masked_v4i64_v4i8(<4 x i8> %a, <4 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_zext_masked_v4i64_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m2, ta, ma
; CHECK-NEXT:    vzext.vf8 v10, v8, v0.t
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
    %x = call <4 x i64> @llvm.vp.zext.v4i64.v4i8(<4 x i8> %a, <4 x i1> %mask, i32 %evl)
    ret <4 x i64> %x
}

declare <4 x i32> @llvm.vp.zext.v4i32.v4i8(<4 x i8> %op, <4 x i1> %mask, i32 %evl)
declare <4 x i64> @llvm.vp.zext.v4i64.v4i8(<4 x i8> %op, <4 x i1> %mask, i32 %evl)
