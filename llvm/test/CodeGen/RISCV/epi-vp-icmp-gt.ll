; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+experimental-v -verify-machineinstrs -O0 \
; RUN:    < %s -epi-pipeline | FileCheck --check-prefix=CHECK-O0 %s
; RUN: llc -mtriple=riscv64 -mattr=+m,+experimental-v -verify-machineinstrs -O2 \
; RUN:    < %s -epi-pipeline | FileCheck --check-prefix=CHECK-O2 %s

; RUN: llc -mtriple=riscv64 -mattr=+m,+experimental-v -verify-machineinstrs -O0 \
; RUN:    < %s -disable-vpred-sdags -epi-pipeline | FileCheck --check-prefix=CHECK-O0 %s
; RUN: llc -mtriple=riscv64 -mattr=+m,+experimental-v -verify-machineinstrs -O2 \
; RUN:    < %s -disable-vpred-sdags -epi-pipeline | FileCheck --check-prefix=CHECK-O2 %s

define <vscale x 1 x i1> @test_vp_icmp_gtu(<vscale x 1 x i64> %a, i64 %b, <vscale x 1 x i1> %m, i32 %evl) nounwind {
; CHECK-O0-LABEL: test_vp_icmp_gtu:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    # kill: def $x12 killed $x11
; CHECK-O0-NEXT:    # implicit-def: $v25
; CHECK-O0-NEXT:    vsetvli zero, a1, e64, m1, ta, mu
; CHECK-O0-NEXT:    vmsgtu.vx v25, v8, a0, v0.t
; CHECK-O0-NEXT:    vmv1r.v v0, v25
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_vp_icmp_gtu:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    vsetvli zero, a1, e64, m1, ta, mu
; CHECK-O2-NEXT:    vmsgtu.vx v0, v8, a0, v0.t
; CHECK-O2-NEXT:    ret
  %insert = insertelement <vscale x 1 x i64> undef, i64 %b, i32 0
  %splat = shufflevector <vscale x 1 x i64> %insert, <vscale x 1 x i64> undef, <vscale x 1 x i32> zeroinitializer
  %cmp = call <vscale x 1 x i1> @llvm.vp.icmp.nxv1i64(<vscale x 1 x i64> %a, <vscale x 1 x i64> %splat, i8 34, <vscale x 1 x i1> %m, i32 %evl)
  ret <vscale x 1 x i1> %cmp
}

define <vscale x 1 x i1> @test_vp_icmp_gt(<vscale x 1 x i64> %a, i64 %b, <vscale x 1 x i1> %m, i32 %evl) nounwind {
; CHECK-O0-LABEL: test_vp_icmp_gt:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    # kill: def $x12 killed $x11
; CHECK-O0-NEXT:    # implicit-def: $v25
; CHECK-O0-NEXT:    vsetvli zero, a1, e64, m1, ta, mu
; CHECK-O0-NEXT:    vmsgt.vx v25, v8, a0, v0.t
; CHECK-O0-NEXT:    vmv1r.v v0, v25
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_vp_icmp_gt:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    vsetvli zero, a1, e64, m1, ta, mu
; CHECK-O2-NEXT:    vmsgt.vx v0, v8, a0, v0.t
; CHECK-O2-NEXT:    ret
  %insert = insertelement <vscale x 1 x i64> undef, i64 %b, i32 0
  %splat = shufflevector <vscale x 1 x i64> %insert, <vscale x 1 x i64> undef, <vscale x 1 x i32> zeroinitializer
  %cmp = call <vscale x 1 x i1> @llvm.vp.icmp.nxv1i64(<vscale x 1 x i64> %a, <vscale x 1 x i64> %splat, i8 38, <vscale x 1 x i1> %m, i32 %evl)
  ret <vscale x 1 x i1> %cmp
}

; icmp
declare <vscale x 1 x i1> @llvm.vp.icmp.nxv1i64(<vscale x 1 x i64>, <vscale x 1 x i64>, i8 immarg, <vscale x 1 x i1>, i32)
