; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-v -verify-machineinstrs \
; RUN:    < %s -epi-pipeline | FileCheck %s

declare <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1>, <vscale x 1 x i1>, <vscale x 1 x i1>, i32)
declare <vscale x 1 x i1> @llvm.vp.or.nxv1i1(<vscale x 1 x i1>, <vscale x 1 x i1>, <vscale x 1 x i1>, i32)
declare <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1>, <vscale x 1 x i1>, <vscale x 1 x i1>, i32)

define <vscale x 1 x i1> @test_vp_and_masks(<vscale x 1 x i1> %a, <vscale x 1 x i1> %b, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_and_masks:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, mf8, ta, mu
; CHECK-NEXT:    vmand.mm v0, v0, v8
; CHECK-NEXT:    ret
    %m.first = insertelement <vscale x 1 x i1> poison, i1 1, i32 0
    %m.splat = shufflevector <vscale x 1 x i1> %m.first, <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer
    %1 = call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %a, <vscale x 1 x i1> %b, <vscale x 1 x i1> %m.splat, i32 %evl)
    ret <vscale x 1 x i1> %1
}

define <vscale x 1 x i1> @test_vp_or_masks(<vscale x 1 x i1> %a, <vscale x 1 x i1> %b, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_or_masks:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, mf8, ta, mu
; CHECK-NEXT:    vmor.mm v0, v0, v8
; CHECK-NEXT:    ret
    %m.first = insertelement <vscale x 1 x i1> poison, i1 1, i32 0
    %m.splat = shufflevector <vscale x 1 x i1> %m.first, <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer
    %1 = call <vscale x 1 x i1> @llvm.vp.or.nxv1i1(<vscale x 1 x i1> %a, <vscale x 1 x i1> %b, <vscale x 1 x i1> %m.splat, i32 %evl)
    ret <vscale x 1 x i1> %1
}

define <vscale x 1 x i1> @test_vp_xor_masks(<vscale x 1 x i1> %a, <vscale x 1 x i1> %b, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_xor_masks:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, mf8, ta, mu
; CHECK-NEXT:    vmxor.mm v0, v0, v8
; CHECK-NEXT:    ret
    %m.first = insertelement <vscale x 1 x i1> poison, i1 1, i32 0
    %m.splat = shufflevector <vscale x 1 x i1> %m.first, <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer
    %1 = call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> %a, <vscale x 1 x i1> %b, <vscale x 1 x i1> %m.splat, i32 %evl)
    ret <vscale x 1 x i1> %1
}
