; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr=+m,+a,+f,+d,+v -S -o - -sroa \
; RUN:    %s | FileCheck %s

; Function Attrs: nounwind
define dso_local void @test_vmfirst() #0 {
; CHECK-LABEL: @test_vmfirst(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[A:%.*]] = alloca [128 x i32], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call <vscale x 2 x i32> @llvm.epi.vbroadcast.nxv2i32.i32(i32 0, i64 128)
; CHECK-NEXT:    [[TMP1:%.*]] = call <vscale x 2 x i1> @llvm.epi.mask.cast.nxv2i1.nxv2i32(<vscale x 2 x i32> [[TMP0]])
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.epi.vmfirst.nxv2i1(<vscale x 2 x i1> [[TMP1]], i64 128)
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i64 [[TMP2]], -1
; CHECK-NEXT:    br i1 [[CMP]], label [[IF_END:%.*]], label [[IF_ELSE:%.*]]
; CHECK:       if.else:
; CHECK-NEXT:    call void @abort() #5
; CHECK-NEXT:    unreachable
; CHECK:       if.end:
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast [128 x i32]* [[A]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 512, i8* [[TMP3]]) #6
; CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [128 x i32], [128 x i32]* [[A]], i64 0, i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast i32* [[ARRAYDECAY]] to i8*
; CHECK-NEXT:    call void @llvm.memset.p0i8.i64(i8* align 4 [[TMP4]], i8 0, i64 512, i1 false)
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [128 x i32], [128 x i32]* [[A]], i64 0, i64 0
; CHECK-NEXT:    store i32 2, i32* [[ARRAYIDX]], align 4, !tbaa !2
; CHECK-NEXT:    [[ARRAYDECAY1:%.*]] = getelementptr inbounds [128 x i32], [128 x i32]* [[A]], i64 0, i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast i32* [[ARRAYDECAY1]] to <vscale x 2 x i1>*
; CHECK-NEXT:    [[TMP6:%.*]] = load <vscale x 2 x i1>, <vscale x 2 x i1>* [[TMP5]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = call i64 @llvm.epi.vmfirst.nxv2i1(<vscale x 2 x i1> [[TMP6]], i64 128)
; CHECK-NEXT:    [[CMP2:%.*]] = icmp eq i64 [[TMP7]], 0
; CHECK-NEXT:    br i1 [[CMP2]], label [[IF_END5:%.*]], label [[IF_ELSE4:%.*]]
; CHECK:       if.else4:
; CHECK-NEXT:    call void @abort() #5
; CHECK-NEXT:    unreachable
; CHECK:       if.end5:
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast [128 x i32]* [[A]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 512, i8* [[TMP8]]) #6
; CHECK-NEXT:    ret void
;
entry:
  %v = alloca <vscale x 2 x i32>, align 4
  %mask = alloca <vscale x 2 x i1>, align 1
  %a = alloca [128 x i32], align 4
  %0 = bitcast <vscale x 2 x i32>* %v to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #4
  %1 = call <vscale x 2 x i32> @llvm.epi.vbroadcast.nxv2i32.i32(i32 0, i64 128)
  store <vscale x 2 x i32> %1, <vscale x 2 x i32>* %v, align 4, !tbaa !2
  %2 = bitcast <vscale x 2 x i1>* %mask to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %2) #4
  %3 = load <vscale x 2 x i32>, <vscale x 2 x i32>* %v, align 4, !tbaa !2
  %4 = call <vscale x 2 x i1> @llvm.epi.mask.cast.nxv2i1.nxv2i32(<vscale x 2 x i32> %3)
  store <vscale x 2 x i1> %4, <vscale x 2 x i1>* %mask, align 1, !tbaa !2
  %5 = load <vscale x 2 x i1>, <vscale x 2 x i1>* %mask, align 1, !tbaa !2
  %6 = call i64 @llvm.epi.vmfirst.nxv2i1(<vscale x 2 x i1> %5, i64 128)
  %cmp = icmp eq i64 %6, -1
  br i1 %cmp, label %if.end, label %if.else

if.else:                                          ; preds = %entry
  call void @abort() #5
  unreachable

if.end:                                           ; preds = %entry
  %7 = bitcast [128 x i32]* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* %7) #4
  %arraydecay = getelementptr inbounds [128 x i32], [128 x i32]* %a, i64 0, i64 0
  %8 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 512, i1 false)
  %arrayidx = getelementptr inbounds [128 x i32], [128 x i32]* %a, i64 0, i64 0
  store i32 2, i32* %arrayidx, align 4, !tbaa !5
  %arraydecay1 = getelementptr inbounds [128 x i32], [128 x i32]* %a, i64 0, i64 0
  %9 = bitcast i32* %arraydecay1 to <vscale x 2 x i1>*
  %10 = load <vscale x 2 x i1>, <vscale x 2 x i1>* %9, align 4
  store <vscale x 2 x i1> %10, <vscale x 2 x i1>* %mask, align 1, !tbaa !2
  %11 = load <vscale x 2 x i1>, <vscale x 2 x i1>* %mask, align 1, !tbaa !2
  %12 = call i64 @llvm.epi.vmfirst.nxv2i1(<vscale x 2 x i1> %11, i64 128)
  %cmp2 = icmp eq i64 %12, 0
  br i1 %cmp2, label %if.end5, label %if.else4

if.else4:                                         ; preds = %if.end
  call void @abort() #5
  unreachable

if.end5:                                          ; preds = %if.end
  %13 = bitcast [128 x i32]* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 512, i8* %13) #4
  %14 = bitcast <vscale x 2 x i1>* %mask to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %14) #4
  %15 = bitcast <vscale x 2 x i32>* %v to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15) #4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare <vscale x 2 x i32> @llvm.epi.vbroadcast.nxv2i32.i32(i32, i64) #2

; Function Attrs: nounwind readnone
declare <vscale x 2 x i1> @llvm.epi.mask.cast.nxv2i1.nxv2i32(<vscale x 2 x i32>) #2

; Function Attrs: nounwind readnone
declare i64 @llvm.epi.vmfirst.nxv2i1(<vscale x 2 x i1>, i64) #2

; Function Attrs: noreturn
declare dso_local void @abort() #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+a,+c,+d,+v,+f,+m,-relax" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+a,+c,+d,+v,+f,+m,-relax" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0 (git@repo.hca.bsc.es:EPI/System-Software/llvm-mono.git 374545e5a9de2f0dbcf3e3fdbc0831a41fbddb2e)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !3, i64 0}

