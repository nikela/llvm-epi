; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+c,+experimental-v < %s -epi-pipeline | \
; RUN:     FileCheck %s

define <vscale x 2 x float> @sitofp.f32.i32(<vscale x 2 x i32> %a, i32 zeroext %gvl)
; CHECK-LABEL: sitofp.f32.i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, mu
; CHECK-NEXT:    vfcvt.f.x.v v8, v8
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x float> @llvm.vp.sitofp.nxv2f32.nxv2i32(<vscale x 2 x i32> %a,
            <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> undef, i1 true, i32 0), <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer),
            i32 %gvl)
  ret <vscale x 2 x float> %b
}

define <vscale x 2 x float> @sitofp.f32.i32.mask(<vscale x 2 x i32> %a, <vscale x 2 x i1> %mask, i32 zeroext %gvl)
; CHECK-LABEL: sitofp.f32.i32.mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, mu
; CHECK-NEXT:    vfcvt.f.x.v v8, v8, v0.t
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x float> @llvm.vp.sitofp.nxv2f32.nxv2i32(
               <vscale x 2 x i32> %a,
               <vscale x 2 x i1> %mask,
               i32 %gvl)
  ret <vscale x 2 x float> %b
}

declare <vscale x 2 x float> @llvm.vp.sitofp.nxv2f32.nxv2i32(<vscale x 2 x i32> %a, <vscale x 2 x i1> %mask, i32 %gvl)

define <vscale x 2 x float> @sitofp.f32.i64(<vscale x 2 x i64> %a, i32 zeroext %gvl)
; CHECK-LABEL: sitofp.f32.i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, mu
; CHECK-NEXT:    vfncvt.f.x.w v25, v8
; CHECK-NEXT:    vmv1r.v v8, v25
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x float> @llvm.vp.sitofp.nxv2f32.nxv2i64(<vscale x 2 x i64> %a,
            <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> undef, i1 true, i32 0), <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer),
            i32 %gvl)
  ret <vscale x 2 x float> %b
}

define <vscale x 2 x float> @sitofp.f32.i64.mask(<vscale x 2 x i64> %a, <vscale x 2 x i1> %mask, i32 zeroext %gvl)
; CHECK-LABEL: sitofp.f32.i64.mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, mu
; CHECK-NEXT:    vfncvt.f.x.w v25, v8, v0.t
; CHECK-NEXT:    vmv1r.v v8, v25
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x float> @llvm.vp.sitofp.nxv2f32.nxv2i64(
               <vscale x 2 x i64> %a,
               <vscale x 2 x i1> %mask,
               i32 %gvl)
  ret <vscale x 2 x float> %b
}

declare <vscale x 2 x float> @llvm.vp.sitofp.nxv2f32.nxv2i64(<vscale x 2 x i64> %a, <vscale x 2 x i1> %mask, i32 %gvl)

define <vscale x 2 x double> @sitofp.f64.i32(<vscale x 2 x i32> %a, i32 zeroext %gvl)
; CHECK-LABEL: sitofp.f64.i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, mu
; CHECK-NEXT:    vfwcvt.f.x.v v26, v8
; CHECK-NEXT:    vmv2r.v v8, v26
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x double> @llvm.vp.sitofp.nxv2f64.nxv2i32(<vscale x 2 x i32> %a,
            <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> undef, i1 true, i32 0), <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer),
            i32 %gvl)
  ret <vscale x 2 x double> %b
}

define <vscale x 2 x double> @sitofp.f64.i32.mask(<vscale x 2 x i32> %a, <vscale x 2 x i1> %mask, i32 zeroext %gvl)
; CHECK-LABEL: sitofp.f64.i32.mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, mu
; CHECK-NEXT:    vfwcvt.f.x.v v26, v8, v0.t
; CHECK-NEXT:    vmv2r.v v8, v26
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x double> @llvm.vp.sitofp.nxv2f64.nxv2i32(
               <vscale x 2 x i32> %a,
               <vscale x 2 x i1> %mask,
               i32 %gvl)
  ret <vscale x 2 x double> %b
}

declare <vscale x 2 x double> @llvm.vp.sitofp.nxv2f64.nxv2i32(<vscale x 2 x i32> %a, <vscale x 2 x i1> %mask, i32 %gvl)

define <vscale x 4 x float> @test_vp_sitofp_nxv4f32_nxv4i8(<vscale x 4 x i8> %a, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sitofp_nxv4f32_nxv4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, m1, ta, mu
; CHECK-NEXT:    vsext.vf2 v25, v8
; CHECK-NEXT:    vfwcvt.f.x.v v8, v25
; CHECK-NEXT:    ret
    %m.first = insertelement <vscale x 4 x i1> undef, i1 1, i32 0
    %m.splat = shufflevector <vscale x 4 x i1> %m.first, <vscale x 4 x i1> undef, <vscale x 4 x i32> zeroinitializer
    %x = call <vscale x 4 x float> @llvm.vp.sitofp.nxv4f32.nxv4i8(<vscale x 4 x i8> %a, <vscale x 4 x i1> %m.splat, i32 %evl)
    ret <vscale x 4 x float> %x
}

define <vscale x 4 x float> @test_vp_sitofp_nxv4f32_nxv4i8_mask(<vscale x 4 x i8> %a, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sitofp_nxv4f32_nxv4i8_mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, m1, ta, mu
; CHECK-NEXT:    vsext.vf2 v25, v8, v0.t
; CHECK-NEXT:    vfwcvt.f.x.v v8, v25, v0.t
; CHECK-NEXT:    ret
    %x = call <vscale x 4 x float> @llvm.vp.sitofp.nxv4f32.nxv4i8(<vscale x 4 x i8> %a, <vscale x 4 x i1> %m, i32 %evl)
    ret <vscale x 4 x float> %x
}

define <vscale x 4 x double> @test_vp_sitofp_nxv4f64_nxv4i8(<vscale x 4 x i8> %a, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sitofp_nxv4f64_nxv4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m2, ta, mu
; CHECK-NEXT:    vsext.vf4 v26, v8
; CHECK-NEXT:    vfwcvt.f.x.v v8, v26
; CHECK-NEXT:    ret
    %m.first = insertelement <vscale x 4 x i1> undef, i1 1, i32 0
    %m.splat = shufflevector <vscale x 4 x i1> %m.first, <vscale x 4 x i1> undef, <vscale x 4 x i32> zeroinitializer
    %x = call <vscale x 4 x double> @llvm.vp.sitofp.nxv4f64.nxv4i8(<vscale x 4 x i8> %a, <vscale x 4 x i1> %m.splat, i32 %evl)
    ret <vscale x 4 x double> %x
}

define <vscale x 4 x double> @test_vp_sitofp_nxv4f64_nxv4i8_mask(<vscale x 4 x i8> %a, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sitofp_nxv4f64_nxv4i8_mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m2, ta, mu
; CHECK-NEXT:    vsext.vf4 v26, v8, v0.t
; CHECK-NEXT:    vfwcvt.f.x.v v8, v26, v0.t
; CHECK-NEXT:    ret
    %x = call <vscale x 4 x double> @llvm.vp.sitofp.nxv4f64.nxv4i8(<vscale x 4 x i8> %a, <vscale x 4 x i1> %m, i32 %evl)
    ret <vscale x 4 x double> %x
}

define <vscale x 4 x double> @test_vp_sitofp_nxv4f64_nxv4i16(<vscale x 4 x i16> %a, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sitofp_nxv4f64_nxv4i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m2, ta, mu
; CHECK-NEXT:    vsext.vf2 v26, v8
; CHECK-NEXT:    vfwcvt.f.x.v v8, v26
; CHECK-NEXT:    ret
    %m.first = insertelement <vscale x 4 x i1> undef, i1 1, i32 0
    %m.splat = shufflevector <vscale x 4 x i1> %m.first, <vscale x 4 x i1> undef, <vscale x 4 x i32> zeroinitializer
    %x = call <vscale x 4 x double> @llvm.vp.sitofp.nxv4f64.nxv4i16(<vscale x 4 x i16> %a, <vscale x 4 x i1> %m.splat, i32 %evl)
    ret <vscale x 4 x double> %x
}

define <vscale x 4 x double> @test_vp_sitofp_nxv4f64_nxv4i16_mask(<vscale x 4 x i16> %a, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sitofp_nxv4f64_nxv4i16_mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m2, ta, mu
; CHECK-NEXT:    vsext.vf2 v26, v8, v0.t
; CHECK-NEXT:    vfwcvt.f.x.v v8, v26, v0.t
; CHECK-NEXT:    ret
    %x = call <vscale x 4 x double> @llvm.vp.sitofp.nxv4f64.nxv4i16(<vscale x 4 x i16> %a, <vscale x 4 x i1> %m, i32 %evl)
    ret <vscale x 4 x double> %x
}

declare <vscale x 4 x float> @llvm.vp.sitofp.nxv4f32.nxv4i8(<vscale x 4 x i8> %op, <vscale x 4 x i1> %mask, i32 %evl)
declare <vscale x 4 x double> @llvm.vp.sitofp.nxv4f64.nxv4i8(<vscale x 4 x i8> %op, <vscale x 4 x i1> %mask, i32 %evl)
declare <vscale x 4 x double> @llvm.vp.sitofp.nxv4f64.nxv4i16(<vscale x 4 x i16> %op, <vscale x 4 x i1> %mask, i32 %evl)
