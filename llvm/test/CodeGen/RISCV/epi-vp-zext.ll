; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+c,+v < %s -epi-pipeline | \
; RUN:     FileCheck %s

define <vscale x 2 x i64> @zext.i64.i32(<vscale x 2 x i32> %a, i32 zeroext %gvl)
; CHECK-LABEL: zext.i64.i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m2, ta, ma
; CHECK-NEXT:    vzext.vf2 v10, v8
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i64> @llvm.vp.zext.nxv2i64.nxv2i32(<vscale x 2 x i32> %a,
            <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> undef, i1 true, i32 0), <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer),
            i32 %gvl)
  ret <vscale x 2 x i64> %b
}

define <vscale x 2 x i64> @zext.i64.i32.mask(<vscale x 2 x i32> %a, <vscale x 2 x i1> %mask, i32 zeroext %gvl)
; CHECK-LABEL: zext.i64.i32.mask:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m2, ta, mu
; CHECK-NEXT:    vzext.vf2 v10, v8, v0.t
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
{
  %b = call <vscale x 2 x i64> @llvm.vp.zext.nxv2i64.nxv2i32(
               <vscale x 2 x i32> %a,
               <vscale x 2 x i1> %mask,
               i32 %gvl)
  ret <vscale x 2 x i64> %b
}

declare <vscale x 2 x i64> @llvm.vp.zext.nxv2i64.nxv2i32(<vscale x 2 x i32> %a, <vscale x 2 x i1> %mask, i32 %gvl)

define <vscale x 4 x i32> @test_vp_zext_nxv4i32_nxv4i8(<vscale x 4 x i8> %a, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_zext_nxv4i32_nxv4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; CHECK-NEXT:    vzext.vf4 v10, v8
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
    %m.first = insertelement <vscale x 4 x i1> undef, i1 1, i32 0
    %m.splat = shufflevector <vscale x 4 x i1> %m.first, <vscale x 4 x i1> undef, <vscale x 4 x i32> zeroinitializer
    %x = call <vscale x 4 x i32> @llvm.vp.zext.nxv4i32.nxv4i8(<vscale x 4 x i8> %a, <vscale x 4 x i1> %m.splat, i32 %evl)
    ret <vscale x 4 x i32> %x
}

define <vscale x 4 x i32> @test_vp_zext_masked_nxv4i32_nxv4i8(<vscale x 4 x i8> %a, <vscale x 4 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_zext_masked_nxv4i32_nxv4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m2, ta, mu
; CHECK-NEXT:    vzext.vf4 v10, v8, v0.t
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
    %x = call <vscale x 4 x i32> @llvm.vp.zext.nxv4i32.nxv4i8(<vscale x 4 x i8> %a, <vscale x 4 x i1> %mask, i32 %evl)
    ret <vscale x 4 x i32> %x
}

define <vscale x 4 x i64> @test_vp_zext_nxv4i64_nxv4i8(<vscale x 4 x i8> %a, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_zext_nxv4i64_nxv4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; CHECK-NEXT:    vzext.vf8 v12, v8
; CHECK-NEXT:    vmv.v.v v8, v12
; CHECK-NEXT:    ret
    %m.first = insertelement <vscale x 4 x i1> undef, i1 1, i32 0
    %m.splat = shufflevector <vscale x 4 x i1> %m.first, <vscale x 4 x i1> undef, <vscale x 4 x i32> zeroinitializer
    %x = call <vscale x 4 x i64> @llvm.vp.zext.nxv4i64.nxv4i8(<vscale x 4 x i8> %a, <vscale x 4 x i1> %m.splat, i32 %evl)
    ret <vscale x 4 x i64> %x
}

define <vscale x 4 x i64> @test_vp_zext_masked_nxv4i64_nxv4i8(<vscale x 4 x i8> %a, <vscale x 4 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_zext_masked_nxv4i64_nxv4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m4, ta, mu
; CHECK-NEXT:    vzext.vf8 v12, v8, v0.t
; CHECK-NEXT:    vmv.v.v v8, v12
; CHECK-NEXT:    ret
    %x = call <vscale x 4 x i64> @llvm.vp.zext.nxv4i64.nxv4i8(<vscale x 4 x i8> %a, <vscale x 4 x i1> %mask, i32 %evl)
    ret <vscale x 4 x i64> %x
}

define <vscale x 4 x i64> @test_vp_zext_nxv4i64_nxv4i16(<vscale x 4 x i16> %a, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_zext_nxv4i64_nxv4i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; CHECK-NEXT:    vzext.vf4 v12, v8
; CHECK-NEXT:    vmv.v.v v8, v12
; CHECK-NEXT:    ret
    %m.first = insertelement <vscale x 4 x i1> undef, i1 1, i32 0
    %m.splat = shufflevector <vscale x 4 x i1> %m.first, <vscale x 4 x i1> undef, <vscale x 4 x i32> zeroinitializer
    %x = call <vscale x 4 x i64> @llvm.vp.zext.nxv4i64.nxv4i16(<vscale x 4 x i16> %a, <vscale x 4 x i1> %m.splat, i32 %evl)
    ret <vscale x 4 x i64> %x
}

declare <vscale x 4 x i32> @llvm.vp.zext.nxv4i32.nxv4i8(<vscale x 4 x i8> %op, <vscale x 4 x i1> %mask, i32 %evl)
declare <vscale x 4 x i64> @llvm.vp.zext.nxv4i64.nxv4i8(<vscale x 4 x i8> %op, <vscale x 4 x i1> %mask, i32 %evl)
declare <vscale x 4 x i64> @llvm.vp.zext.nxv4i64.nxv4i16(<vscale x 4 x i16> %op, <vscale x 4 x i1> %mask, i32 %evl)
