; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple=riscv64 -mattr=+v,+a,+f,+d,+c,+m -codegenprepare -S -o - %s | FileCheck %s

define void @myMatmul(i64 %N, ptr %A, ptr %B, ptr %C) {
; CHECK-LABEL: @myMatmul(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP8:%.*]] = icmp sgt i64 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP8]], label [[VECTOR_PH:%.*]], label [[FOR_END:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = sub i64 [[N]], [[INDEX]]
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP0]], i64 2, i64 0)
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i32
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <vscale x 2 x ptr> poison, ptr [[A:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = shufflevector <vscale x 2 x ptr> [[TMP3]], <vscale x 2 x ptr> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-NEXT:    [[VP_GATHER:%.*]] = tail call <vscale x 2 x float> @llvm.vp.gather.nxv2f32.nxv2p0(<vscale x 2 x ptr> [[TMP4]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds float, ptr [[B:%.*]], i64 [[INDEX]]
; CHECK-NEXT:    [[VP_OP_LOAD:%.*]] = tail call <vscale x 2 x float> @llvm.vp.load.nxv2f32.p0(ptr [[TMP5]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds float, ptr [[C:%.*]], i64 [[INDEX]]
; CHECK-NEXT:    [[VP_OP_LOAD102:%.*]] = tail call <vscale x 2 x float> @llvm.vp.load.nxv2f32.p0(ptr [[TMP6]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK-NEXT:    [[TMP7:%.*]] = tail call <vscale x 2 x float> @llvm.vp.fmuladd.nxv2f32(<vscale x 2 x float> [[VP_GATHER]], <vscale x 2 x float> [[VP_OP_LOAD]], <vscale x 2 x float> [[VP_OP_LOAD102]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK-NEXT:    tail call void @llvm.vp.store.nxv2f32.p0(<vscale x 2 x float> [[TMP7]], ptr [[TMP6]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP2]])
; CHECK-NEXT:    [[TMP8:%.*]] = and i64 [[TMP1]], 4294967295
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP8]]
; CHECK-NEXT:    [[TMP9:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N]]
; CHECK-NEXT:    br i1 [[TMP9]], label [[FOR_END]], label [[VECTOR_BODY]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
entry:
  %cmp8 = icmp sgt i64 %N, 0
  br i1 %cmp8, label %vector.ph, label %for.end

vector.ph:
  %broadcast.splatinsert100 = insertelement <vscale x 2 x ptr> poison, ptr %A, i64 0
  %broadcast.splat101 = shufflevector <vscale x 2 x ptr> %broadcast.splatinsert100, <vscale x 2 x ptr> poison, <vscale x 2 x i32> zeroinitializer
  br label %vector.body

vector.body:
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %0 = sub i64 %N, %index
  %1 = tail call i64 @llvm.epi.vsetvl(i64 %0, i64 2, i64 0)
  %2 = trunc i64 %1 to i32
  %vp.gather = tail call <vscale x 2 x float> @llvm.vp.gather.nxv2f32.nxv2p0(<vscale x 2 x ptr> %broadcast.splat101, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 %2)
  %3 = getelementptr inbounds float, ptr %B, i64 %index
  %vp.op.load = tail call <vscale x 2 x float> @llvm.vp.load.nxv2f32.p0(ptr %3, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 %2)
  %4 = getelementptr inbounds float, ptr %C, i64 %index
  %vp.op.load102 = tail call <vscale x 2 x float> @llvm.vp.load.nxv2f32.p0(ptr %4, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 %2)
  %5 = tail call <vscale x 2 x float> @llvm.vp.fmuladd.nxv2f32(<vscale x 2 x float> %vp.gather, <vscale x 2 x float> %vp.op.load, <vscale x 2 x float> %vp.op.load102, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 %2)
  tail call void @llvm.vp.store.nxv2f32.p0(<vscale x 2 x float> %5, ptr %4, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 %2)
  %6 = and i64 %1, 4294967295
  %index.next = add i64 %index, %6
  %7 = icmp eq i64 %index.next, %N
  br i1 %7, label %for.end, label %vector.body

for.end:
  ret void
}

declare i64 @llvm.epi.vsetvl(i64, i64, i64)
declare <vscale x 2 x float> @llvm.vp.gather.nxv2f32.nxv2p0(<vscale x 2 x ptr>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x float> @llvm.vp.load.nxv2f32.p0(ptr nocapture, <vscale x 2 x i1>, i32)
declare <vscale x 2 x float> @llvm.vp.fmuladd.nxv2f32(<vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x float>, <vscale x 2 x i1>, i32)
declare void @llvm.vp.store.nxv2f32.p0(<vscale x 2 x float>, ptr nocapture, <vscale x 2 x i1>, i32)
