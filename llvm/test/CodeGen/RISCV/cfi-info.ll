; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s | FileCheck %s

define i32 @callee(i32 %a, i64 %b, i32 %c, i32 %d, double %e) {
; CHECK-LABEL: callee:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -32
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    sw ra, 28(sp) # 4-byte Folded Spill
; CHECK-NEXT:    sw s0, 24(sp) # 4-byte Folded Spill
; CHECK-NEXT:    sw s1, 20(sp) # 4-byte Folded Spill
; CHECK-NEXT:    sw s2, 16(sp) # 4-byte Folded Spill
; CHECK-NEXT:    sw s3, 12(sp) # 4-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -4
; CHECK-NEXT:    .cfi_offset s0, -8
; CHECK-NEXT:    .cfi_offset s1, -12
; CHECK-NEXT:    .cfi_offset s2, -16
; CHECK-NEXT:    .cfi_offset s3, -20
; CHECK-NEXT:    mv s0, a4
; CHECK-NEXT:    mv s1, a3
; CHECK-NEXT:    mv s2, a1
; CHECK-NEXT:    mv s3, a0
; CHECK-NEXT:    mv a0, a5
; CHECK-NEXT:    mv a1, a6
; CHECK-NEXT:    call __fixdfsi@plt
; CHECK-NEXT:    add s1, s2, s1
; CHECK-NEXT:    add s0, s1, s0
; CHECK-NEXT:    add a0, s0, a0
; CHECK-NEXT:    add a0, s3, a0
; CHECK-NEXT:    lw ra, 28(sp) # 4-byte Folded Reload
; CHECK-NEXT:    lw s0, 24(sp) # 4-byte Folded Reload
; CHECK-NEXT:    lw s1, 20(sp) # 4-byte Folded Reload
; CHECK-NEXT:    lw s2, 16(sp) # 4-byte Folded Reload
; CHECK-NEXT:    lw s3, 12(sp) # 4-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 32
; CHECK-NEXT:    ret
  %b_trunc = trunc i64 %b to i32
  %e_fptosi = fptosi double %e to i32
  %1 = add i32 %a, %b_trunc
  %2 = add i32 %1, %c
  %3 = add i32 %2, %d
  %4 = add i32 %3, %e_fptosi
  ret i32 %4
}
