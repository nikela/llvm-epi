; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+c,+v < %s -epi-pipeline | \
; RUN:     FileCheck %s

declare <vscale x 8 x i64> @llvm.vp.sext.nxv8i64.nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %mask, i32 %evl)
declare <vscale x 8 x i32> @llvm.vp.sext.nxv8i32.nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %mask, i32 %evl)
declare <vscale x 8 x i16> @llvm.vp.sext.nxv8i16.nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %mask, i32 %evl)
declare <vscale x 8 x i8> @llvm.vp.sext.nxv8i8.nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %mask, i32 %evl)

define <vscale x 8 x i64> @test_vp_sext_nxv8i64_nxv8i1(<vscale x 8 x i1> %op, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sext_nxv8i64_nxv8i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m8, ta, ma
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, -1, v0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 8 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 8 x i1> %head, <vscale x 8 x i1> undef, <vscale x 8 x i32> zeroinitializer

  %x = call <vscale x 8 x i64> @llvm.vp.sext.nxv8i64.nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %allones, i32 %evl)
  ret <vscale x 8 x i64> %x
}

define <vscale x 8 x i64> @test_vp_sext_masked_nxv8i64_nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sext_masked_nxv8i64_nxv8i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m8, ta, ma
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, -1, v0
; CHECK-NEXT:    ret
  %x = call <vscale x 8 x i64> @llvm.vp.sext.nxv8i64.nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %mask, i32 %evl)
  ret <vscale x 8 x i64> %x
}

define <vscale x 8 x i32> @test_vp_sext_nxv8i32_nxv8i1(<vscale x 8 x i1> %op, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sext_nxv8i32_nxv8i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m4, ta, ma
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, -1, v0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 8 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 8 x i1> %head, <vscale x 8 x i1> undef, <vscale x 8 x i32> zeroinitializer

  %x = call <vscale x 8 x i32> @llvm.vp.sext.nxv8i32.nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %allones, i32 %evl)
  ret <vscale x 8 x i32> %x
}

define <vscale x 8 x i32> @test_vp_sext_masked_nxv8i32_nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sext_masked_nxv8i32_nxv8i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m4, ta, ma
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, -1, v0
; CHECK-NEXT:    ret
  %x = call <vscale x 8 x i32> @llvm.vp.sext.nxv8i32.nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %mask, i32 %evl)
  ret <vscale x 8 x i32> %x
}

define <vscale x 8 x i16> @test_vp_sext_nxv8i16_nxv8i1(<vscale x 8 x i1> %op, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sext_nxv8i16_nxv8i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, m2, ta, ma
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, -1, v0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 8 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 8 x i1> %head, <vscale x 8 x i1> undef, <vscale x 8 x i32> zeroinitializer

  %x = call <vscale x 8 x i16> @llvm.vp.sext.nxv8i16.nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %allones, i32 %evl)
  ret <vscale x 8 x i16> %x
}

define <vscale x 8 x i16> @test_vp_sext_masked_nxv8i16_nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sext_masked_nxv8i16_nxv8i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e16, m2, ta, ma
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, -1, v0
; CHECK-NEXT:    ret
  %x = call <vscale x 8 x i16> @llvm.vp.sext.nxv8i16.nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %mask, i32 %evl)
  ret <vscale x 8 x i16> %x
}

define <vscale x 8 x i8> @test_vp_sext_nxv8i8_nxv8i1(<vscale x 8 x i1> %op, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sext_nxv8i8_nxv8i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, m1, ta, ma
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, -1, v0
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 8 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 8 x i1> %head, <vscale x 8 x i1> undef, <vscale x 8 x i32> zeroinitializer

  %x = call <vscale x 8 x i8> @llvm.vp.sext.nxv8i8.nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %allones, i32 %evl)
  ret <vscale x 8 x i8> %x
}

define <vscale x 8 x i8> @test_vp_sext_masked_nxv8i8_nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %mask, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_sext_masked_nxv8i8_nxv8i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e8, m1, ta, ma
; CHECK-NEXT:    vmv.v.i v8, 0
; CHECK-NEXT:    vmerge.vim v8, v8, -1, v0
; CHECK-NEXT:    ret
  %x = call <vscale x 8 x i8> @llvm.vp.sext.nxv8i8.nxv8i1(<vscale x 8 x i1> %op, <vscale x 8 x i1> %mask, i32 %evl)
  ret <vscale x 8 x i8> %x
}
