; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple riscv64 -mattr +m,+a,+f,+d,+v -o - \
; RUN:     --verify-machineinstrs -O0 %s -epi-pipeline | FileCheck %s

define <vscale x 8 x i1> @foo_O0(<vscale x 8 x i1> %a) nounwind noinline optnone {
; CHECK-LABEL: foo_O0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a0, a0, 1
; CHECK-NEXT:    sub sp, sp, a0
; CHECK-NEXT:    vsetvli a0, zero, e8, m1, ta, mu
; CHECK-NEXT:    addi a0, sp, 16
; CHECK-NEXT:    vsm.v v0, (a0)
; CHECK-NEXT:    addi a0, sp, 16
; CHECK-NEXT:    vlm.v v0, (a0)
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a0, a0, 1
; CHECK-NEXT:    add sp, sp, a0
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
entry:
  %a.addr = alloca <vscale x 8 x i1>, align 1
  store <vscale x 8 x i1> %a, <vscale x 8 x i1>* %a.addr, align 1
  %0 = load <vscale x 8 x i1>, <vscale x 8 x i1>* %a.addr, align 1
  ret <vscale x 8 x i1> %0
}

define <vscale x 8 x i1> @foo(<vscale x 8 x i1> %a) nounwind {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a0, a0, 1
; CHECK-NEXT:    sub sp, sp, a0
; CHECK-NEXT:    vsetvli a0, zero, e8, m1, ta, mu
; CHECK-NEXT:    addi a0, sp, 16
; CHECK-NEXT:    vsm.v v0, (a0)
; CHECK-NEXT:    addi a0, sp, 16
; CHECK-NEXT:    vlm.v v0, (a0)
; CHECK-NEXT:    csrr a0, vlenb
; CHECK-NEXT:    slli a0, a0, 1
; CHECK-NEXT:    add sp, sp, a0
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
entry:
  %a.addr = alloca <vscale x 8 x i1>, align 1
  store <vscale x 8 x i1> %a, <vscale x 8 x i1>* %a.addr, align 1
  %0 = load <vscale x 8 x i1>, <vscale x 8 x i1>* %a.addr, align 1
  ret <vscale x 8 x i1> %0
}
