; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+v -verify-machineinstrs -O2 \
; RUN:    < %s -epi-pipeline | FileCheck %s

define <vscale x 1 x double> @test_vp_fneg_nxv1f64(<vscale x 1 x double> %f0, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fneg_nxv1f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, ma
; CHECK-NEXT:    vfneg.v v8, v8
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %f = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %f0, <vscale x 1 x i1> %allones, i32 %n)
  ret <vscale x 1 x double> %f
}

define <vscale x 1 x double> @test_vp_fneg_nxv1f64_masked(<vscale x 1 x double> %f0, <vscale x 1 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fneg_nxv1f64_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, ma
; CHECK-NEXT:    vfneg.v v8, v8, v0.t
; CHECK-NEXT:    ret
  %f = call <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double> %f0, <vscale x 1 x i1> %m, i32 %n)
  ret <vscale x 1 x double> %f
}

define <vscale x 2 x double> @test_vp_fneg_nxv2f64(<vscale x 2 x double> %f0, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fneg_nxv2f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m2, ta, ma
; CHECK-NEXT:    vfneg.v v8, v8
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 2 x i1> %head, <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer

  %f = call <vscale x 2 x double> @llvm.vp.fneg.nxv2f64(<vscale x 2 x double> %f0, <vscale x 2 x i1> %allones, i32 %n)
  ret <vscale x 2 x double> %f
}

define <vscale x 2 x double> @test_vp_fneg_nxv2f64_masked(<vscale x 2 x double> %f0, <vscale x 2 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fneg_nxv2f64_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e64, m2, ta, ma
; CHECK-NEXT:    vfneg.v v8, v8, v0.t
; CHECK-NEXT:    ret
  %f = call <vscale x 2 x double> @llvm.vp.fneg.nxv2f64(<vscale x 2 x double> %f0, <vscale x 2 x i1> %m, i32 %n)
  ret <vscale x 2 x double> %f
}

define <vscale x 2 x float> @test_vp_fneg_nxv2f32(<vscale x 2 x float> %f0, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fneg_nxv2f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; CHECK-NEXT:    vfneg.v v8, v8
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 2 x i1> %head, <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer

  %f = call <vscale x 2 x float> @llvm.vp.fneg.nxv2f32(<vscale x 2 x float> %f0, <vscale x 2 x i1> %allones, i32 %n)
  ret <vscale x 2 x float> %f
}

define <vscale x 2 x float> @test_vp_fneg_nxv2f32_masked(<vscale x 2 x float> %f0, <vscale x 2 x i1> %m, i32 zeroext %n) nounwind {
; CHECK-LABEL: test_vp_fneg_nxv2f32_masked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli zero, a0, e32, m1, ta, ma
; CHECK-NEXT:    vfneg.v v8, v8, v0.t
; CHECK-NEXT:    ret
  %f = call <vscale x 2 x float> @llvm.vp.fneg.nxv2f32(<vscale x 2 x float> %f0, <vscale x 2 x i1> %m, i32 %n)
  ret <vscale x 2 x float> %f
}

declare <vscale x 1 x double> @llvm.vp.fneg.nxv1f64(<vscale x 1 x double>, <vscale x 1 x i1>, i32)
declare <vscale x 2 x double> @llvm.vp.fneg.nxv2f64(<vscale x 2 x double>, <vscale x 2 x i1>, i32)
declare <vscale x 2 x float> @llvm.vp.fneg.nxv2f32(<vscale x 2 x float>, <vscale x 2 x i1>, i32)
