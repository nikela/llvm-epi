; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+f,+d,+v -epi-pipeline < %s | FileCheck %s

define <vscale x 1 x double> @vp_log10_nxv1f64(<vscale x 1 x double> %a, <vscale x 1 x i1> %mask, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv1f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv1f64_m@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %1 = call <vscale x 1 x double> @llvm.vp.log10.nxv1f64(<vscale x 1 x double> %a, <vscale x 1 x i1> %mask, i32 %evl)
  ret <vscale x 1 x double> %1
}

define <vscale x 1 x double> @vp_log10_nxv1f64_unmasked(<vscale x 1 x double> %a, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv1f64_unmasked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv1f64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %1 = call <vscale x 1 x double> @llvm.vp.log10.nxv1f64(<vscale x 1 x double> %a, <vscale x 1 x i1> %allones, i32 %evl)
  ret <vscale x 1 x double> %1
}

define <vscale x 2 x double> @vp_log10_nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x i1> %mask, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv2f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv2f64_m@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %1 = call <vscale x 2 x double> @llvm.vp.log10.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x i1> %mask, i32 %evl)
  ret <vscale x 2 x double> %1
}

define <vscale x 2 x double> @vp_log10_nxv2f64_unmasked(<vscale x 2 x double> %a, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv2f64_unmasked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv2f64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 2 x i1> %head, <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer

  %1 = call <vscale x 2 x double> @llvm.vp.log10.nxv2f64(<vscale x 2 x double> %a, <vscale x 2 x i1> %allones, i32 %evl)
  ret <vscale x 2 x double> %1
}

define <vscale x 4 x double> @vp_log10_nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x i1> %mask, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv4f64_m@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %1 = call <vscale x 4 x double> @llvm.vp.log10.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x i1> %mask, i32 %evl)
  ret <vscale x 4 x double> %1
}

define <vscale x 4 x double> @vp_log10_nxv4f64_unmasked(<vscale x 4 x double> %a, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv4f64_unmasked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv4f64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 4 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 4 x i1> %head, <vscale x 4 x i1> undef, <vscale x 4 x i32> zeroinitializer

  %1 = call <vscale x 4 x double> @llvm.vp.log10.nxv4f64(<vscale x 4 x double> %a, <vscale x 4 x i1> %allones, i32 %evl)
  ret <vscale x 4 x double> %1
}

define <vscale x 8 x double> @vp_log10_nxv8f64(<vscale x 8 x double> %a, <vscale x 8 x i1> %mask, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv8f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv8f64_m@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %1 = call <vscale x 8 x double> @llvm.vp.log10.nxv8f64(<vscale x 8 x double> %a, <vscale x 8 x i1> %mask, i32 %evl)
  ret <vscale x 8 x double> %1
}

define <vscale x 8 x double> @vp_log10_nxv8f64_unmasked(<vscale x 8 x double> %a, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv8f64_unmasked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv8f64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 8 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 8 x i1> %head, <vscale x 8 x i1> undef, <vscale x 8 x i32> zeroinitializer

  %1 = call <vscale x 8 x double> @llvm.vp.log10.nxv8f64(<vscale x 8 x double> %a, <vscale x 8 x i1> %allones, i32 %evl)
  ret <vscale x 8 x double> %1
}

define <vscale x 1 x float> @vp_log10_nxv1f32(<vscale x 1 x float> %a, <vscale x 1 x i1> %mask, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv1f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv1f32_m@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %1 = call <vscale x 1 x float> @llvm.vp.log10.nxv1f32(<vscale x 1 x float> %a, <vscale x 1 x i1> %mask, i32 %evl)
  ret <vscale x 1 x float> %1
}

define <vscale x 1 x float> @vp_log10_nxv1f32_unmasked(<vscale x 1 x float> %a, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv1f32_unmasked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv1f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 1 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 1 x i1> %head, <vscale x 1 x i1> undef, <vscale x 1 x i32> zeroinitializer

  %1 = call <vscale x 1 x float> @llvm.vp.log10.nxv1f32(<vscale x 1 x float> %a, <vscale x 1 x i1> %allones, i32 %evl)
  ret <vscale x 1 x float> %1
}

define <vscale x 2 x float> @vp_log10_nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x i1> %mask, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv2f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv2f32_m@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %1 = call <vscale x 2 x float> @llvm.vp.log10.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x i1> %mask, i32 %evl)
  ret <vscale x 2 x float> %1
}

define <vscale x 2 x float> @vp_log10_nxv2f32_unmasked(<vscale x 2 x float> %a, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv2f32_unmasked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv2f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 2 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 2 x i1> %head, <vscale x 2 x i1> undef, <vscale x 2 x i32> zeroinitializer

  %1 = call <vscale x 2 x float> @llvm.vp.log10.nxv2f32(<vscale x 2 x float> %a, <vscale x 2 x i1> %allones, i32 %evl)
  ret <vscale x 2 x float> %1
}

define <vscale x 4 x float> @vp_log10_nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x i1> %mask, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv4f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv4f32_m@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %1 = call <vscale x 4 x float> @llvm.vp.log10.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x i1> %mask, i32 %evl)
  ret <vscale x 4 x float> %1
}

define <vscale x 4 x float> @vp_log10_nxv4f32_unmasked(<vscale x 4 x float> %a, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv4f32_unmasked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv4f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 4 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 4 x i1> %head, <vscale x 4 x i1> undef, <vscale x 4 x i32> zeroinitializer

  %1 = call <vscale x 4 x float> @llvm.vp.log10.nxv4f32(<vscale x 4 x float> %a, <vscale x 4 x i1> %allones, i32 %evl)
  ret <vscale x 4 x float> %1
}

define <vscale x 8 x float> @vp_log10_nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x i1> %mask, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv8f32_m@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %1 = call <vscale x 8 x float> @llvm.vp.log10.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x i1> %mask, i32 %evl)
  ret <vscale x 8 x float> %1
}

define <vscale x 8 x float> @vp_log10_nxv8f32_unmasked(<vscale x 8 x float> %a, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv8f32_unmasked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv8f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 8 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 8 x i1> %head, <vscale x 8 x i1> undef, <vscale x 8 x i32> zeroinitializer

  %1 = call <vscale x 8 x float> @llvm.vp.log10.nxv8f32(<vscale x 8 x float> %a, <vscale x 8 x i1> %allones, i32 %evl)
  ret <vscale x 8 x float> %1
}

define <vscale x 16 x float> @vp_log10_nxv16f32(<vscale x 16 x float> %a, <vscale x 16 x i1> %mask, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv16f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv16f32_m@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %1 = call <vscale x 16 x float> @llvm.vp.log10.nxv16f32(<vscale x 16 x float> %a, <vscale x 16 x i1> %mask, i32 %evl)
  ret <vscale x 16 x float> %1
}

define <vscale x 16 x float> @vp_log10_nxv16f32_unmasked(<vscale x 16 x float> %a, i32 zeroext %evl) nounwind {
; CHECK-LABEL: vp_log10_nxv16f32_unmasked:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    call __epi_flog10_nxv16f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %head = insertelement <vscale x 16 x i1> undef, i1 1, i32 0
  %allones = shufflevector <vscale x 16 x i1> %head, <vscale x 16 x i1> undef, <vscale x 16 x i32> zeroinitializer

  %1 = call <vscale x 16 x float> @llvm.vp.log10.nxv16f32(<vscale x 16 x float> %a, <vscale x 16 x i1> %allones, i32 %evl)
  ret <vscale x 16 x float> %1
}

declare <vscale x 1 x double> @llvm.vp.log10.nxv1f64(<vscale x 1 x double>, <vscale x 1 x i1>, i32)
declare <vscale x 2 x double> @llvm.vp.log10.nxv2f64(<vscale x 2 x double>, <vscale x 2 x i1>, i32)
declare <vscale x 4 x double> @llvm.vp.log10.nxv4f64(<vscale x 4 x double>, <vscale x 4 x i1>, i32)
declare <vscale x 8 x double> @llvm.vp.log10.nxv8f64(<vscale x 8 x double>, <vscale x 8 x i1>, i32)
declare <vscale x 1 x float> @llvm.vp.log10.nxv1f32(<vscale x 1 x float>, <vscale x 1 x i1>, i32)
declare <vscale x 2 x float> @llvm.vp.log10.nxv2f32(<vscale x 2 x float>, <vscale x 2 x i1>, i32)
declare <vscale x 4 x float> @llvm.vp.log10.nxv4f32(<vscale x 4 x float>, <vscale x 4 x i1>, i32)
declare <vscale x 8 x float> @llvm.vp.log10.nxv8f32(<vscale x 8 x float>, <vscale x 8 x i1>, i32)
declare <vscale x 16 x float> @llvm.vp.log10.nxv16f32(<vscale x 16 x float>, <vscale x 16 x i1>, i32)
