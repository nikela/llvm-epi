; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+d,+f,+experimental-v -verify-machineinstrs -epi-pipeline < %s \
; RUN:   | FileCheck %s

define float @test_vp_reduce_fmul_nxv1f32(float %x, <vscale x 1 x float> %v, <vscale x 1 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_fmul_nxv1f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_fmul_nxv1f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call reassoc float @llvm.vp.reduce.fmul.nxv1f32(float %x, <vscale x 1 x float> %v, <vscale x 1 x i1> %m, i32 %evl)
  ret float %result
}

define float @test_vp_reduce_fmul_nxv2f32(float %x, <vscale x 2 x float> %v, <vscale x 2 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_fmul_nxv2f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_fmul_nxv2f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call reassoc float @llvm.vp.reduce.fmul.nxv2f32(float %x, <vscale x 2 x float> %v, <vscale x 2 x i1> %m, i32 %evl)
  ret float %result
}

define float @test_vp_reduce_fmul_nxv4f32(float %x, <vscale x 4 x float> %v, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_fmul_nxv4f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_fmul_nxv4f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call reassoc float @llvm.vp.reduce.fmul.nxv4f32(float %x, <vscale x 4 x float> %v, <vscale x 4 x i1> %m, i32 %evl)
  ret float %result
}

define float @test_vp_reduce_fmul_nxv8f32(float %x, <vscale x 8 x float> %v, <vscale x 8 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_fmul_nxv8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_fmul_nxv8f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call reassoc float @llvm.vp.reduce.fmul.nxv8f32(float %x, <vscale x 8 x float> %v, <vscale x 8 x i1> %m, i32 %evl)
  ret float %result
}

define float @test_vp_reduce_fmul_nxv16f32(float %x, <vscale x 16 x float> %v, <vscale x 16 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_fmul_nxv16f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_fmul_nxv16f32@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call reassoc float @llvm.vp.reduce.fmul.nxv16f32(float %x, <vscale x 16 x float> %v, <vscale x 16 x i1> %m, i32 %evl)
  ret float %result
}

define double @test_vp_reduce_fmul_nxv1f64(double %x, <vscale x 1 x double> %v, <vscale x 1 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_fmul_nxv1f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_fmul_nxv1f64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call reassoc double @llvm.vp.reduce.fmul.nxv1f64(double %x, <vscale x 1 x double> %v, <vscale x 1 x i1> %m, i32 %evl)
  ret double %result
}

define double @test_vp_reduce_fmul_nxv2f64(double %x, <vscale x 2 x double> %v, <vscale x 2 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_fmul_nxv2f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_fmul_nxv2f64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call reassoc double @llvm.vp.reduce.fmul.nxv2f64(double %x, <vscale x 2 x double> %v, <vscale x 2 x i1> %m, i32 %evl)
  ret double %result
}

define double @test_vp_reduce_fmul_nxv4f64(double %x, <vscale x 4 x double> %v, <vscale x 4 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_fmul_nxv4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_fmul_nxv4f64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call reassoc double @llvm.vp.reduce.fmul.nxv4f64(double %x, <vscale x 4 x double> %v, <vscale x 4 x i1> %m, i32 %evl)
  ret double %result
}

define double @test_vp_reduce_fmul_nxv8f64(double %x, <vscale x 8 x double> %v, <vscale x 8 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: test_vp_reduce_fmul_nxv8f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call __epi_vp_reduce_fmul_nxv8f64@plt
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:    ret
  %result = call reassoc double @llvm.vp.reduce.fmul.nxv8f64(double %x, <vscale x 8 x double> %v, <vscale x 8 x i1> %m, i32 %evl)
  ret double %result
}

declare float @llvm.vp.reduce.fmul.nxv1f32(float, <vscale x 1 x float>, <vscale x 1 x i1>, i32)
declare float @llvm.vp.reduce.fmul.nxv2f32(float, <vscale x 2 x float>, <vscale x 2 x i1>, i32)
declare float @llvm.vp.reduce.fmul.nxv4f32(float, <vscale x 4 x float>, <vscale x 4 x i1>, i32)
declare float @llvm.vp.reduce.fmul.nxv8f32(float, <vscale x 8 x float>, <vscale x 8 x i1>, i32)
declare float @llvm.vp.reduce.fmul.nxv16f32(float, <vscale x 16 x float>, <vscale x 16 x i1>, i32)

declare double @llvm.vp.reduce.fmul.nxv1f64(double, <vscale x 1 x double>, <vscale x 1 x i1>, i32)
declare double @llvm.vp.reduce.fmul.nxv2f64(double, <vscale x 2 x double>, <vscale x 2 x i1>, i32)
declare double @llvm.vp.reduce.fmul.nxv4f64(double, <vscale x 4 x double>, <vscale x 4 x i1>, i32)
declare double @llvm.vp.reduce.fmul.nxv8f64(double, <vscale x 8 x double>, <vscale x 8 x i1>, i32)
